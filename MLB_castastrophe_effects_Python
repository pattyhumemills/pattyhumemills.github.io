##############################################################################
#
# Program: bbWeather.py
# Author: Patricia Mills
# Purpose: 1)	How do catastrophic events affect: pitching, hitting
# scoring, wins/losses
# Created: January, 2020
#
##############################################################################

import numpy as np
import pandas as pd
import csv
import matplotlib.pyplot as plt 
# Import a list of team abbreviations and team locations to a list of dictionaries
abfile = 'MLB_Teams_byCounty.csv'
count = 0
teamList = []
with open(abfile,'r') as csvfile:
    TeamReader = csv.reader(csvfile,dialect='excel',delimiter=',')
    for line in TeamReader:
        if line[0]=='' or line[0].startswith('Team'):
            continue
        else:
            team={}
            team['abbreviation']=line[0]
            team['state'] = line[1]
            team['city'] = line[2]
            team['county']=line[3]
            team['name']=line[4]
            team['stateCounty']=team['state']+team['county']
            teamList.append(team)
csvfile.close()
print('Number of teams: ',len(teamList))
teamDF = pd.DataFrame(teamList)
# Import list of disasters
disfile = 'DisasterDeclarationsSummaries.csv'
count = 0
disasterList = []
with open(disfile,'r') as csvfile:
    DisasterReader = csv.reader(csvfile,dialect='excel',delimiter=',')
    for line in DisasterReader:
        if line[0]=='' or line[0].startswith('femaDeclarationString'):
            continue
        else:
            disaster={}
            disaster['state']=line[2]
            disaster['declarationDate']=line[4]
            disaster['incidentType']=line[6]            
            disaster['declarationTitle']=line[7]
            disaster['incidentBeginDate']=line[12] 
            disaster['incidentEndDate']=line[13]
            disaster['designatedArea']=line[18]
            disaster['stateCounty']=disaster['state']+disaster['designatedArea']
            disasterList.append(disaster)
csvfile.close()
print('Number of disasters: ',len(disasterList))
disasterDF = pd.DataFrame(disasterList)
# Create a merged disaster and team dataframe, merge on the stateCounty column and only inner join as we don't need disasters where there isn't a baseball team.
disasterDFmerged = pd.merge(disasterDF,teamDF, on=['stateCounty'],how='inner')
# Store disasterDFmerged as a dictionary for uploading to mongo
#mergedDisaster_dict = disasterDFmerged.to_dict('records')
infile = 'GL2017.csv'
# Iterate over the lines of the file and count the number of lines
count = 0
gamelog17 = []
with open(infile,'r') as csvfile:
    MLBReader = csv.reader(csvfile,dialect='excel',delimiter=',')
    for line in MLBReader:
        if line[0].startswith('Date'):
            continue
        else:
            gamelog17.append(line)
csvfile.close()

print('Number of games 2017: ',len(gamelog17))
# Making the gamelog list a pandas dataframe
MLBgames17 = pd.DataFrame(gamelog17,columns=['Date','Game_Number','Day_Week','V_Team','V_League','V_GameNum','H_Team','H_League','H_GameNum','V_Score','H_Score','Outs','Day_Night','Complete','Forfeit','Protest','ParkID','Attendance','Minutes','V_Line','H_Line','V_AB','V_Hits','V_Doubles','V_Triples','V_HR','V_RBI','V_SacHit','V_SacFly','V_HBP','V_Walks','V_IntWalks','V_SO','V_SB','V_CSteal','V_GDP','V_CatcherInter','V_LOB','V_PitchersUsed','V_IndEarnedRuns','V_TeamEarnedRuns','V_Wild','V_Balks','V_Putout','V_Assists','V_Errors','V_PassedBalls','V_DoublePlay','V_TriplePlay','H_AB','H_Hits','H_Doubles','H_Triples','H_HR','H_RBI','H_SacHit','H_SacFly','H_HBP','H_Walks','H_IntWalks','H_SO','H_SB','H_CSteal','H_GDP','H_CatcherInter','H_LOB','H_PitchersUsed','H_IndEarnedRuns','H_TeamEarnedRuns','H_Wild','H_Balks','H_Putout','H_Assists','H_Errors','H_PassedBalls','H_DoublePlay','H_TriplePlay','HPUmpID','HPUmpName','1BUmpID','1BUmpName','2BUmpID','2BUmpName''3BUmpID','3BUmpName','LFUmpID','LFUmpName','RFUmpID','RFUmpName','V_ManagerID','V_ManagerName','H_ManagerID','H_ManagerName','Win_PitchID','Win_PitchName','Lose_PitchID','Lose_PitchName','Save_PitchID','Save_PitchName','Win_RBIBatID','Win_RBIBatName','V_Start_PitchID','V_Start_PitchName','H_Start_PitchID','H_Start_PitchName','V_Start1_ID','V_Start1_Name','V_Start1_Position','V_Start2_ID','V_Start2_Name','V_Start2_Position','V_Start3_ID','V_Start3_Name','V_Start3_Position','V_Start4_ID','V_Start4_Name','V_Start4_Position','V_Start5_ID','V_Start5_Name','V_Start5_Position','V_Start6_ID','V_Start6_Name','V_Start6_Position','V_Start7_ID','V_Start7_Name','V_Start7_Position','V_Start8_ID','V_Start8_Name','V_Start8_Position','V_Start9_ID','V_Start9_Name','V_Start9_Position','H_Start1_ID','H_Start1_Name','H_Start1_Position','H_Start2_ID','H_Start2_Name','H_Start2_Position','H_Start3_ID','H_Start3_Name','H_Start3_Position','H_Start4_ID','H_Start4_Name','H_Start4_Position','H_Start5_ID','H_Start5_Name','H_Start5_Position','H_Start6_ID','H_Start6_Name','H_Start6_Position','H_Start7_ID','H_Start7_Name','H_Start7_Position','H_Start8_ID','H_Start8_Name','H_Start8_Position','H_Start9_ID','H_Start9_Name','H_Start9_Position','Add_Info','Acq_Info'])
MLBgames17 = MLBgames17[0:2432]
MLBgames17['Date'] = pd.to_datetime(MLBgames17.Date)
MLBgames17.reset_index(inplace = True)
#MLBgames17_dict = MLBgames17.to_dict('records')
# Repeat process above with 2016 gamelog
infile2 = 'GL2016.csv'
# Iterate over the lines of the file and count the number of lines
count = 0
gamelog16 = []
with open(infile2,'r') as csvfile:
    MLBReader = csv.reader(csvfile,dialect='excel',delimiter=',')
    for line in MLBReader:
        gamelog16.append(line)
csvfile.close()
print('Number of games 2016: ',len(gamelog16))
# Making the gamelog list a pandas dataframe
MLBgames16 = pd.DataFrame(gamelog16,columns=['Date','Game_Number','Day_Week','V_Team','V_League','V_GameNum','H_Team','H_League','H_GameNum','V_Score','H_Score','Outs','Day_Night','Complete','Forfeit','Protest','ParkID','Attendance','Minutes','V_Line','H_Line','V_AB','V_Hits','V_Doubles','V_Triples','V_HR','V_RBI','V_SacHit','V_SacFly','V_HBP','V_Walks','V_IntWalks','V_SO','V_SB','V_CSteal','V_GDP','V_CatcherInter','V_LOB','V_PitchersUsed','V_IndEarnedRuns','V_TeamEarnedRuns','V_Wild','V_Balks','V_Putout','V_Assists','V_Errors','V_PassedBalls','V_DoublePlay','V_TriplePlay','H_AB','H_Hits','H_Doubles','H_Triples','H_HR','H_RBI','H_SacHit','H_SacFly','H_HBP','H_Walks','H_IntWalks','H_SO','H_SB','H_CSteal','H_GDP','H_CatcherInter','H_LOB','H_PitchersUsed','H_IndEarnedRuns','H_TeamEarnedRuns','H_Wild','H_Balks','H_Putout','H_Assists','H_Errors','H_PassedBalls','H_DoublePlay','H_TriplePlay','HPUmpID','HPUmpName','1BUmpID','1BUmpName','2BUmpID','2BUmpName''3BUmpID','3BUmpName','LFUmpID','LFUmpName','RFUmpID','RFUmpName','V_ManagerID','V_ManagerName','H_ManagerID','H_ManagerName','Win_PitchID','Win_PitchName','Lose_PitchID','Lose_PitchName','Save_PitchID','Save_PitchName','Win_RBIBatID','Win_RBIBatName','V_Start_PitchID','V_Start_PitchName','H_Start_PitchID','H_Start_PitchName','V_Start1_ID','V_Start1_Name','V_Start1_Position','V_Start2_ID','V_Start2_Name','V_Start2_Position','V_Start3_ID','V_Start3_Name','V_Start3_Position','V_Start4_ID','V_Start4_Name','V_Start4_Position','V_Start5_ID','V_Start5_Name','V_Start5_Position','V_Start6_ID','V_Start6_Name','V_Start6_Position','V_Start7_ID','V_Start7_Name','V_Start7_Position','V_Start8_ID','V_Start8_Name','V_Start8_Position','V_Start9_ID','V_Start9_Name','V_Start9_Position','H_Start1_ID','H_Start1_Name','H_Start1_Position','H_Start2_ID','H_Start2_Name','H_Start2_Position','H_Start3_ID','H_Start3_Name','H_Start3_Position','H_Start4_ID','H_Start4_Name','H_Start4_Position','H_Start5_ID','H_Start5_Name','H_Start5_Position','H_Start6_ID','H_Start6_Name','H_Start6_Position','H_Start7_ID','H_Start7_Name','H_Start7_Position','H_Start8_ID','H_Start8_Name','H_Start8_Position','H_Start9_ID','H_Start9_Name','H_Start9_Position','Add_Info','Acq_Info'])
MLBgames16 = MLBgames16[0:2432]
MLBgames16['Date'] = pd.to_datetime(MLBgames16.Date)
MLBgames16.reset_index(inplace = True)
#MLBgames16_dict = MLBgames16.to_dict('records')
# Repeat process above with 2015 gamelog
infile3 = 'GL2015.csv'
# Iterate over the lines of the file and count the number of lines
count = 0
gamelog15 = []
with open(infile3,'r') as csvfile:
    MLBReader = csv.reader(csvfile,dialect='excel',delimiter=',')
    for line in MLBReader:
        gamelog15.append(line)
csvfile.close()

print('Number of games 2015: ',len(gamelog15))

# Making the gamelog list a pandas dataframe
MLBgames15 = pd.DataFrame(gamelog15,columns=['Date','Game_Number','Day_Week','V_Team','V_League','V_GameNum','H_Team','H_League','H_GameNum','V_Score','H_Score','Outs','Day_Night','Complete','Forfeit','Protest','ParkID','Attendance','Minutes','V_Line','H_Line','V_AB','V_Hits','V_Doubles','V_Triples','V_HR','V_RBI','V_SacHit','V_SacFly','V_HBP','V_Walks','V_IntWalks','V_SO','V_SB','V_CSteal','V_GDP','V_CatcherInter','V_LOB','V_PitchersUsed','V_IndEarnedRuns','V_TeamEarnedRuns','V_Wild','V_Balks','V_Putout','V_Assists','V_Errors','V_PassedBalls','V_DoublePlay','V_TriplePlay','H_AB','H_Hits','H_Doubles','H_Triples','H_HR','H_RBI','H_SacHit','H_SacFly','H_HBP','H_Walks','H_IntWalks','H_SO','H_SB','H_CSteal','H_GDP','H_CatcherInter','H_LOB','H_PitchersUsed','H_IndEarnedRuns','H_TeamEarnedRuns','H_Wild','H_Balks','H_Putout','H_Assists','H_Errors','H_PassedBalls','H_DoublePlay','H_TriplePlay','HPUmpID','HPUmpName','1BUmpID','1BUmpName','2BUmpID','2BUmpName''3BUmpID','3BUmpName','LFUmpID','LFUmpName','RFUmpID','RFUmpName','V_ManagerID','V_ManagerName','H_ManagerID','H_ManagerName','Win_PitchID','Win_PitchName','Lose_PitchID','Lose_PitchName','Save_PitchID','Save_PitchName','Win_RBIBatID','Win_RBIBatName','V_Start_PitchID','V_Start_PitchName','H_Start_PitchID','H_Start_PitchName','V_Start1_ID','V_Start1_Name','V_Start1_Position','V_Start2_ID','V_Start2_Name','V_Start2_Position','V_Start3_ID','V_Start3_Name','V_Start3_Position','V_Start4_ID','V_Start4_Name','V_Start4_Position','V_Start5_ID','V_Start5_Name','V_Start5_Position','V_Start6_ID','V_Start6_Name','V_Start6_Position','V_Start7_ID','V_Start7_Name','V_Start7_Position','V_Start8_ID','V_Start8_Name','V_Start8_Position','V_Start9_ID','V_Start9_Name','V_Start9_Position','H_Start1_ID','H_Start1_Name','H_Start1_Position','H_Start2_ID','H_Start2_Name','H_Start2_Position','H_Start3_ID','H_Start3_Name','H_Start3_Position','H_Start4_ID','H_Start4_Name','H_Start4_Position','H_Start5_ID','H_Start5_Name','H_Start5_Position','H_Start6_ID','H_Start6_Name','H_Start6_Position','H_Start7_ID','H_Start7_Name','H_Start7_Position','H_Start8_ID','H_Start8_Name','H_Start8_Position','H_Start9_ID','H_Start9_Name','H_Start9_Position','Add_Info','Acq_Info'])
MLBgames15 = MLBgames15[0:2432]
MLBgames15['Date'] = pd.to_datetime(MLBgames15.Date)
MLBgames15.reset_index(inplace = True)
#MLBgames15_dict = MLBgames15.to_dict('records')
# Repeat process above with 2014 gamelog
infile4 = 'GL2014.csv'
# Iterate over the lines of the file and count the number of lines
count = 0
gamelog14 = []
with open(infile4,'r') as csvfile:
    MLBReader = csv.reader(csvfile,dialect='excel',delimiter=',')
    for line in MLBReader:
        gamelog14.append(line)
csvfile.close()
print('Number of games 2014: ',len(gamelog14))
# Making the gamelog list a pandas dataframe
MLBgames14 = pd.DataFrame(gamelog14,columns=['Date','Game_Number','Day_Week','V_Team','V_League','V_GameNum','H_Team','H_League','H_GameNum','V_Score','H_Score','Outs','Day_Night','Complete','Forfeit','Protest','ParkID','Attendance','Minutes','V_Line','H_Line','V_AB','V_Hits','V_Doubles','V_Triples','V_HR','V_RBI','V_SacHit','V_SacFly','V_HBP','V_Walks','V_IntWalks','V_SO','V_SB','V_CSteal','V_GDP','V_CatcherInter','V_LOB','V_PitchersUsed','V_IndEarnedRuns','V_TeamEarnedRuns','V_Wild','V_Balks','V_Putout','V_Assists','V_Errors','V_PassedBalls','V_DoublePlay','V_TriplePlay','H_AB','H_Hits','H_Doubles','H_Triples','H_HR','H_RBI','H_SacHit','H_SacFly','H_HBP','H_Walks','H_IntWalks','H_SO','H_SB','H_CSteal','H_GDP','H_CatcherInter','H_LOB','H_PitchersUsed','H_IndEarnedRuns','H_TeamEarnedRuns','H_Wild','H_Balks','H_Putout','H_Assists','H_Errors','H_PassedBalls','H_DoublePlay','H_TriplePlay','HPUmpID','HPUmpName','1BUmpID','1BUmpName','2BUmpID','2BUmpName''3BUmpID','3BUmpName','LFUmpID','LFUmpName','RFUmpID','RFUmpName','V_ManagerID','V_ManagerName','H_ManagerID','H_ManagerName','Win_PitchID','Win_PitchName','Lose_PitchID','Lose_PitchName','Save_PitchID','Save_PitchName','Win_RBIBatID','Win_RBIBatName','V_Start_PitchID','V_Start_PitchName','H_Start_PitchID','H_Start_PitchName','V_Start1_ID','V_Start1_Name','V_Start1_Position','V_Start2_ID','V_Start2_Name','V_Start2_Position','V_Start3_ID','V_Start3_Name','V_Start3_Position','V_Start4_ID','V_Start4_Name','V_Start4_Position','V_Start5_ID','V_Start5_Name','V_Start5_Position','V_Start6_ID','V_Start6_Name','V_Start6_Position','V_Start7_ID','V_Start7_Name','V_Start7_Position','V_Start8_ID','V_Start8_Name','V_Start8_Position','V_Start9_ID','V_Start9_Name','V_Start9_Position','H_Start1_ID','H_Start1_Name','H_Start1_Position','H_Start2_ID','H_Start2_Name','H_Start2_Position','H_Start3_ID','H_Start3_Name','H_Start3_Position','H_Start4_ID','H_Start4_Name','H_Start4_Position','H_Start5_ID','H_Start5_Name','H_Start5_Position','H_Start6_ID','H_Start6_Name','H_Start6_Position','H_Start7_ID','H_Start7_Name','H_Start7_Position','H_Start8_ID','H_Start8_Name','H_Start8_Position','H_Start9_ID','H_Start9_Name','H_Start9_Position','Add_Info','Acq_Info'])
MLBgames14 = MLBgames14[0:2432]
MLBgames14['Date'] = pd.to_datetime(MLBgames14.Date)
MLBgames14.reset_index(inplace = True)
#MLBgames14_dict = MLBgames14.to_dict('records')
# Repeat process above with 2013 gamelog
infile5 = 'GL2013.csv'
# Iterate over the lines of the file and count the number of lines
count = 0
gamelog13 = []
with open(infile5,'r') as csvfile:
    MLBReader = csv.reader(csvfile,dialect='excel',delimiter=',')
    for line in MLBReader:
        gamelog13.append(line)
csvfile.close()
print('Number of games 2013: ',len(gamelog13))
# Making the gamelog list a pandas dataframe
MLBgames13 = pd.DataFrame(gamelog13,columns=['Date','Game_Number','Day_Week','V_Team','V_League','V_GameNum','H_Team','H_League','H_GameNum','V_Score','H_Score','Outs','Day_Night','Complete','Forfeit','Protest','ParkID','Attendance','Minutes','V_Line','H_Line','V_AB','V_Hits','V_Doubles','V_Triples','V_HR','V_RBI','V_SacHit','V_SacFly','V_HBP','V_Walks','V_IntWalks','V_SO','V_SB','V_CSteal','V_GDP','V_CatcherInter','V_LOB','V_PitchersUsed','V_IndEarnedRuns','V_TeamEarnedRuns','V_Wild','V_Balks','V_Putout','V_Assists','V_Errors','V_PassedBalls','V_DoublePlay','V_TriplePlay','H_AB','H_Hits','H_Doubles','H_Triples','H_HR','H_RBI','H_SacHit','H_SacFly','H_HBP','H_Walks','H_IntWalks','H_SO','H_SB','H_CSteal','H_GDP','H_CatcherInter','H_LOB','H_PitchersUsed','H_IndEarnedRuns','H_TeamEarnedRuns','H_Wild','H_Balks','H_Putout','H_Assists','H_Errors','H_PassedBalls','H_DoublePlay','H_TriplePlay','HPUmpID','HPUmpName','1BUmpID','1BUmpName','2BUmpID','2BUmpName''3BUmpID','3BUmpName','LFUmpID','LFUmpName','RFUmpID','RFUmpName','V_ManagerID','V_ManagerName','H_ManagerID','H_ManagerName','Win_PitchID','Win_PitchName','Lose_PitchID','Lose_PitchName','Save_PitchID','Save_PitchName','Win_RBIBatID','Win_RBIBatName','V_Start_PitchID','V_Start_PitchName','H_Start_PitchID','H_Start_PitchName','V_Start1_ID','V_Start1_Name','V_Start1_Position','V_Start2_ID','V_Start2_Name','V_Start2_Position','V_Start3_ID','V_Start3_Name','V_Start3_Position','V_Start4_ID','V_Start4_Name','V_Start4_Position','V_Start5_ID','V_Start5_Name','V_Start5_Position','V_Start6_ID','V_Start6_Name','V_Start6_Position','V_Start7_ID','V_Start7_Name','V_Start7_Position','V_Start8_ID','V_Start8_Name','V_Start8_Position','V_Start9_ID','V_Start9_Name','V_Start9_Position','H_Start1_ID','H_Start1_Name','H_Start1_Position','H_Start2_ID','H_Start2_Name','H_Start2_Position','H_Start3_ID','H_Start3_Name','H_Start3_Position','H_Start4_ID','H_Start4_Name','H_Start4_Position','H_Start5_ID','H_Start5_Name','H_Start5_Position','H_Start6_ID','H_Start6_Name','H_Start6_Position','H_Start7_ID','H_Start7_Name','H_Start7_Position','H_Start8_ID','H_Start8_Name','H_Start8_Position','H_Start9_ID','H_Start9_Name','H_Start9_Position','Add_Info','Acq_Info'])
MLBgames13 = MLBgames13[0:2432]
MLBgames13['Date'] = pd.to_datetime(MLBgames13.Date)
MLBgames13.reset_index(inplace = True)
#MLBgames13_dict = MLBgames13.to_dict('records')
# Repeat process above with 2012 gamelog
infile6 = 'GL2012.csv'

# Iterate over the lines of the file and count the number of lines
count = 0
gamelog12 = []
with open(infile6,'r') as csvfile:
    MLBReader = csv.reader(csvfile,dialect='excel',delimiter=',')
    for line in MLBReader:
        gamelog12.append(line)
csvfile.close()
print('Number of games 2012: ',len(gamelog12))
# Making the gamelog list a pandas dataframe
MLBgames12 = pd.DataFrame(gamelog12,columns=['Date','Game_Number','Day_Week','V_Team','V_League','V_GameNum','H_Team','H_League','H_GameNum','V_Score','H_Score','Outs','Day_Night','Complete','Forfeit','Protest','ParkID','Attendance','Minutes','V_Line','H_Line','V_AB','V_Hits','V_Doubles','V_Triples','V_HR','V_RBI','V_SacHit','V_SacFly','V_HBP','V_Walks','V_IntWalks','V_SO','V_SB','V_CSteal','V_GDP','V_CatcherInter','V_LOB','V_PitchersUsed','V_IndEarnedRuns','V_TeamEarnedRuns','V_Wild','V_Balks','V_Putout','V_Assists','V_Errors','V_PassedBalls','V_DoublePlay','V_TriplePlay','H_AB','H_Hits','H_Doubles','H_Triples','H_HR','H_RBI','H_SacHit','H_SacFly','H_HBP','H_Walks','H_IntWalks','H_SO','H_SB','H_CSteal','H_GDP','H_CatcherInter','H_LOB','H_PitchersUsed','H_IndEarnedRuns','H_TeamEarnedRuns','H_Wild','H_Balks','H_Putout','H_Assists','H_Errors','H_PassedBalls','H_DoublePlay','H_TriplePlay','HPUmpID','HPUmpName','1BUmpID','1BUmpName','2BUmpID','2BUmpName''3BUmpID','3BUmpName','LFUmpID','LFUmpName','RFUmpID','RFUmpName','V_ManagerID','V_ManagerName','H_ManagerID','H_ManagerName','Win_PitchID','Win_PitchName','Lose_PitchID','Lose_PitchName','Save_PitchID','Save_PitchName','Win_RBIBatID','Win_RBIBatName','V_Start_PitchID','V_Start_PitchName','H_Start_PitchID','H_Start_PitchName','V_Start1_ID','V_Start1_Name','V_Start1_Position','V_Start2_ID','V_Start2_Name','V_Start2_Position','V_Start3_ID','V_Start3_Name','V_Start3_Position','V_Start4_ID','V_Start4_Name','V_Start4_Position','V_Start5_ID','V_Start5_Name','V_Start5_Position','V_Start6_ID','V_Start6_Name','V_Start6_Position','V_Start7_ID','V_Start7_Name','V_Start7_Position','V_Start8_ID','V_Start8_Name','V_Start8_Position','V_Start9_ID','V_Start9_Name','V_Start9_Position','H_Start1_ID','H_Start1_Name','H_Start1_Position','H_Start2_ID','H_Start2_Name','H_Start2_Position','H_Start3_ID','H_Start3_Name','H_Start3_Position','H_Start4_ID','H_Start4_Name','H_Start4_Position','H_Start5_ID','H_Start5_Name','H_Start5_Position','H_Start6_ID','H_Start6_Name','H_Start6_Position','H_Start7_ID','H_Start7_Name','H_Start7_Position','H_Start8_ID','H_Start8_Name','H_Start8_Position','H_Start9_ID','H_Start9_Name','H_Start9_Position','Add_Info','Acq_Info'])
MLBgames12 = MLBgames12[0:2432]
MLBgames12['Date'] = pd.to_datetime(MLBgames12.Date)

MLBgames12.reset_index(inplace = True)
#MLBgames12_dict = MLBgames12.to_dict('records')
print('First Game of 2017 season: ',MLBgames17.iloc[0,1])
print('Last Game of 2017 season: ',MLBgames17.iloc[-1,1])
print('First Game of 2016 season: ',MLBgames16.iloc[0,1])
print('Last Game of 2016 season: ',MLBgames16.iloc[-1,1])
print('First Game of 2015 season: ',MLBgames15.iloc[0,1])
print('Last Game of 2015 season: ',MLBgames15.iloc[-1,1])
print('First Game of 2014 season: ',MLBgames14.iloc[0,1])
print('Last Game of 2014 season: ',MLBgames14.iloc[-1,1])
print('First Game of 2013 season: ',MLBgames13.iloc[0,1])
print('Last Game of 2013 season: ',MLBgames13.iloc[-1,1])
print('First Game of 2012 season: ',MLBgames12.iloc[0,1])
print('Last Game of 2012 season: ',MLBgames12.iloc[-1,1])
# Create DataFrames to pull out ONLY disasters within the season for each season to identify dates and teams affected
disasters2017seasonDF = disasterDFmerged[(disasterDFmerged['incidentBeginDate']>="2017-04-02")&(disasterDFmerged['incidentBeginDate']<="2017-10-01")]
print('Disaster Teams 2017')
print(disasters2017seasonDF[['abbreviation','incidentType','incidentBeginDate','incidentEndDate']])
disasters2016seasonDF = disasterDFmerged[(disasterDFmerged['incidentBeginDate']>="2016-04-03")&(disasterDFmerged['incidentBeginDate']<="2016-10-02")]
print('Disaster Teams 2016')
print(disasters2016seasonDF[['abbreviation','incidentType','incidentBeginDate','incidentEndDate']])
disasters2015seasonDF = disasterDFmerged[(disasterDFmerged['incidentBeginDate']>="2015-04-05")&(disasterDFmerged['incidentBeginDate']<="2015-10-04")]
print('Disaster Teams 2015')
print(disasters2015seasonDF[['abbreviation','incidentType','incidentBeginDate','incidentEndDate']])
disasters2014seasonDF = disasterDFmerged[(disasterDFmerged['incidentBeginDate']>="2014-03-22")&(disasterDFmerged['incidentBeginDate']<="2014-09-28")]
print('Disaster Teams 2014')
print(disasters2014seasonDF[['abbreviation','incidentType','incidentBeginDate','incidentEndDate']])
disasters2013seasonDF = disasterDFmerged[(disasterDFmerged['incidentBeginDate']>="2013-03-31")&(disasterDFmerged['incidentBeginDate']<="2013-09-30")]
print('Disaster Teams 2013')
print(disasters2013seasonDF[['abbreviation','incidentType','incidentBeginDate','incidentEndDate']])
disasters2012seasonDF = disasterDFmerged[(disasterDFmerged['incidentBeginDate']>="2012-03-28")&(disasterDFmerged['incidentBeginDate']<="2012-10-03")]
print('Disaster Teams 2012')
print(disasters2012seasonDF[['abbreviation','incidentType','incidentBeginDate','incidentEndDate']])
frames = [disasters2017seasonDF.loc[(disasters2017seasonDF['abbreviation']=='HOU')|(disasters2017seasonDF['abbreviation']=='TEX')|(disasters2017seasonDF['abbreviation']=='MIA')|(disasters2017seasonDF['abbreviation']=='BOS')|(disasters2017seasonDF['abbreviation']=='COL')|(disasters2017seasonDF['abbreviation']=='NYN')|(disasters2017seasonDF['abbreviation']=='NYA')],
          disasters2016seasonDF.loc[(disasters2016seasonDF['abbreviation']=='HOU')|(disasters2016seasonDF['abbreviation']=='TEX')|(disasters2016seasonDF['abbreviation']=='MIA')|(disasters2016seasonDF['abbreviation']=='BOS')|(disasters2016seasonDF['abbreviation']=='COL')|(disasters2016seasonDF['abbreviation']=='NYN')|(disasters2016seasonDF['abbreviation']=='NYA')],
          disasters2015seasonDF.loc[(disasters2015seasonDF['abbreviation']=='HOU')|(disasters2015seasonDF['abbreviation']=='TEX')|(disasters2015seasonDF['abbreviation']=='MIA')|(disasters2015seasonDF['abbreviation']=='BOS')|(disasters2015seasonDF['abbreviation']=='COL')|(disasters2015seasonDF['abbreviation']=='NYN')|(disasters2015seasonDF['abbreviation']=='NYA')],
          disasters2014seasonDF.loc[(disasters2014seasonDF['abbreviation']=='HOU')|(disasters2014seasonDF['abbreviation']=='TEX')|(disasters2014seasonDF['abbreviation']=='MIA')|(disasters2014seasonDF['abbreviation']=='BOS')|(disasters2014seasonDF['abbreviation']=='COL')|(disasters2014seasonDF['abbreviation']=='NYN')|(disasters2014seasonDF['abbreviation']=='NYA')],
          disasters2013seasonDF.loc[(disasters2013seasonDF['abbreviation']=='HOU')|(disasters2013seasonDF['abbreviation']=='TEX')|(disasters2013seasonDF['abbreviation']=='MIA')|(disasters2013seasonDF['abbreviation']=='BOS')|(disasters2013seasonDF['abbreviation']=='COL')|(disasters2013seasonDF['abbreviation']=='NYN')|(disasters2013seasonDF['abbreviation']=='NYA')],
          disasters2012seasonDF.loc[(disasters2012seasonDF['abbreviation']=='HOU')|(disasters2012seasonDF['abbreviation']=='TEX')|(disasters2012seasonDF['abbreviation']=='MIA')|(disasters2012seasonDF['abbreviation']=='BOS')|(disasters2012seasonDF['abbreviation']=='COL')|(disasters2012seasonDF['abbreviation']=='NYN')|(disasters2012seasonDF['abbreviation']=='NYA')]]
disastersMLBseasons12to17 = pd.concat(frames,keys = ['2017','2016','2015','2014','2013','2012'])
disastersbyType = disastersMLBseasons12to17.groupby(['incidentType']).size()
disastersbyTeam = disastersMLBseasons12to17.groupby(['abbreviation']).size()
print('Disasters by Type for Focus Teams:',disastersbyType)
print('Disasters by Focus Teams:',disastersbyTeam)
# Create a dataframe of only games the Astros were playing and reset the index
Astros2017 = pd.DataFrame(columns=MLBgames17.columns)
Astros2017 = MLBgames17.loc[(MLBgames17['V_Team']=='HOU')|(MLBgames17['H_Team']=='HOU')] 
Astros2017 = Astros2017.reset_index(drop=True)
# Add columns to the Astros dataframe for hits when the Astros are visitors, hits when the Astros are at home and hits by Astros total.
Astros2017['HitsbyHOUasV'] = pd.to_numeric(Astros2017.apply(lambda row: row.V_Hits if row.V_Team == 'HOU' else 0,axis=1))
Astros2017['HitsbyHOUasH'] = pd.to_numeric(Astros2017.apply(lambda row: row.H_Hits if row.H_Team == 'HOU' else 0,axis=1))
Astros2017['HitsbyHOU'] = Astros2017['HitsbyHOUasV'] + Astros2017['HitsbyHOUasH']
# Add columns to the Astros dataframe for at bats when the Astros are visitors, at bats when the Astros are at home and at bats by Astros total.
Astros2017['ABbyHOUasV'] = pd.to_numeric(Astros2017.apply(lambda row: row.V_AB if row.V_Team == 'HOU' else 0,axis=1))
Astros2017['ABbyHOUasH'] = pd.to_numeric(Astros2017.apply(lambda row: row.H_AB if row.H_Team == 'HOU' else 0,axis=1))
Astros2017['ABbyHOU'] = Astros2017['ABbyHOUasV'] + Astros2017['ABbyHOUasH']
Astros2017.head
# Add columns to the Astros dataframe for at bats when the Astros are visitors, at bats when the Astros are at home and at bats by Astros total.
Astros2017['EarnedRunsbyHOUasV'] = pd.to_numeric(Astros2017.apply(lambda row: row.V_TeamEarnedRuns if row.V_Team == 'HOU' else 0,axis=1))
Astros2017['EarnedRunsbyHOUasH'] = pd.to_numeric(Astros2017.apply(lambda row: row.H_TeamEarnedRuns if row.H_Team == 'HOU' else 0,axis=1))
Astros2017['EarnedRunsbyHOU'] = Astros2017['EarnedRunsbyHOUasV'] + Astros2017['EarnedRunsbyHOUasH']
Astros2017.head
# Converts score columns to numbers
Astros2017['V_Score'] = pd.to_numeric(Astros2017['V_Score'])
Astros2017['H_Score'] = pd.to_numeric(Astros2017['H_Score'])
# Code below adapted from optimumsportsperformance.com/blog/python-pivot-tables/
# This code creates a Point Difference column, sets conditions and choices for 
# the created Winner column which tells if the home or visitor is the winner, 
# sets conditions and choices to return the winning team abbreviation to the WTeam column,
# and a W or L to the WinLoss column on the basis of HOU being in the WTeam field for that row.
Astros2017['Point_Diff'] =0
Astros2017['Point_Diff'] = np.where((Astros2017.H_Team == 'HOU'),Astros2017['H_Score'] - Astros2017['V_Score'],Astros2017.Point_Diff)
Astros2017['Point_Diff'] = np.where((Astros2017.H_Team != 'HOU'),Astros2017['V_Score'] - Astros2017['H_Score'],Astros2017.Point_Diff)
conditions = [(Astros2017['H_Score'] > Astros2017['V_Score']),(Astros2017['H_Score'] < Astros2017['V_Score'])]
choices = ['home','visitor']
Astros2017['Winner'] = np.select(conditions,choices,default = 'null')
cond_for_winner = [(Astros2017['Winner']=='home'),(Astros2017['Winner']=='visitor')]
choices_for_winner = [Astros2017['H_Team'],Astros2017['V_Team']]
Astros2017['WTeam'] = np.select(cond_for_winner,choices_for_winner,default='null')
Astros2017['WinLoss'] = Astros2017.apply(lambda row: 'W' if row.WTeam == 'HOU' else 'L',axis=1)
# Creates individual dataframes for Before Hurricane (games played prior to 8/28/2017), 
# During Hurricane (including games played at Tropicana Field because of Hurricane on 8/23-9/16/2017 based on the dates of FEMA disaster declarations),
# After Hurricane (games played from 9/17/2017 to the end of the regular season.)

Astros2017BH = Astros2017.loc[(Astros2017['Date']<'2017-08-23')]
Astros2017AH = Astros2017.loc[(Astros2017['Date']>='2017-09-17')]
Astros2017DH = Astros2017.loc[(Astros2017['Date']>='2017-08-23')&(Astros2017['Date']<'2017-09-17')]
# Creates dataframes for full season home, full season away, Before Hurricane home, Before Hurricane away, After Hurricane home, 
# After Hurricane away, During Hurricane home, and During Hurricane away
Astros2017FShome = Astros2017.loc[(Astros2017['H_Team']=='HOU')]
Astros2017FShome['Point_Diff'] = Astros2017FShome['H_Score'] - Astros2017FShome['V_Score']
Astros2017FSaway = Astros2017.loc[(Astros2017['V_Team']=='HOU')]
Astros2017FSaway['Point_Diff'] = Astros2017FSaway['V_Score'] - Astros2017FSaway['H_Score']
Astros2017BHhome = Astros2017FShome.loc[(Astros2017FShome['Date']<'2017-08-23')]
Astros2017BHhome['Point_Diff'] = Astros2017BHhome['H_Score'] - Astros2017BHhome['V_Score']
Astros2017AHhome = Astros2017FShome.loc[(Astros2017FShome['Date']>='2017-09-17')]
Astros2017AHhome['Point_Diff'] = Astros2017AHhome['H_Score'] - Astros2017AHhome['V_Score']
Astros2017DHhome = Astros2017FShome.loc[(Astros2017FShome['Date']>='2017-08-23')&(Astros2017FShome['Date']<'2017-09-17')]
Astros2017DHhome['Point_Diff'] = Astros2017DHhome['H_Score'] - Astros2017DHhome['V_Score']
Astros2017BHaway = Astros2017FSaway.loc[(Astros2017FSaway['Date']<'2017-08-23')]
Astros2017BHaway['Point_Diff'] = Astros2017BHaway['V_Score'] - Astros2017BHaway['H_Score']
Astros2017AHaway = Astros2017FSaway.loc[(Astros2017FSaway['Date']>='2017-09-17')]
Astros2017AHaway['Point_Diff'] = Astros2017AHaway['V_Score'] - Astros2017AHaway['H_Score']
Astros2017DHaway = Astros2017FSaway.loc[(Astros2017FSaway['Date']>='2017-08-23')&(Astros2017FSaway['Date']<'2017-09-17')]
Astros2017DHaway['Point_Diff'] = Astros2017DHaway['V_Score'] - Astros2017DHaway['H_Score']
# Win/Loss Records by Full Season, Before Hurricane, After Hurricane, During Hurricane.
AstrosFullSeason2017 = Astros2017.groupby(['WinLoss']).size()
AstrosBefore_Hurricane2017 = Astros2017BH.groupby(['WinLoss']).size()
AstrosAfter_Hurricane2017 = Astros2017AH.groupby(['WinLoss']).size()
AstrosDuring_Hurricane2017 = Astros2017DH.groupby(['WinLoss']).size()
print('Astros Full Season Win/Loss Records 2017: ', AstrosFullSeason2017)
print('Astros Before Hurricane Win/Loss Records 2017: ',AstrosBefore_Hurricane2017)
print('Astros After Hurricane Win/Loss Records 2017:',AstrosAfter_Hurricane2017)
print('Astros During Hurricane Win/Loss Records 2017: ',AstrosDuring_Hurricane2017)
AstrosFullSeason2017 = np.array(AstrosFullSeason2017)
AstrosBefore_Hurricane2017 = np.array(AstrosBefore_Hurricane2017)
AstrosAfter_Hurricane2017 = np.array(AstrosAfter_Hurricane2017)
AstrosDuring_Hurricane2017 = np.array(AstrosDuring_Hurricane2017)
n_groups = 2
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.2
opacity = 0.8
rects1 = plt.bar(index,AstrosFullSeason2017,bar_width, 
alpha = opacity,
color = 'navy',
label = 'Full Season')
rects2 = plt.bar(index + bar_width,AstrosBefore_Hurricane2017,bar_width, 
alpha = opacity,
color = 'darkorange',
label = 'Before Hurricane')
rects3 = plt.bar(index + 2*bar_width,AstrosAfter_Hurricane2017,bar_width, 
alpha = opacity,
color = 'steelblue',
label = 'After Hurricane')
rects4 = plt.bar(index + 3*bar_width,AstrosDuring_Hurricane2017,bar_width, 
alpha = opacity,
color = 'lightsalmon',
label = 'During Hurricane')
plt.xlabel('Segment of the Season')
plt.ylabel('Games')
plt.title('Astros 2017 Win/loss Records by Segment of the Season')
plt.xticks(index + 1.5*bar_width,('Losses','Wins'))
plt.legend(loc = 0,fontsize='xx-small',ncol=3)
plt.tight_layout()
plt.show()
# Percentages for Full Season, Before Hurricane, After Hurricane, During Hurricane
AstrosFSPercentWin2017 = Astros2017.groupby(['WinLoss']).size()/len(Astros2017.index)
AstrosBHPercentWin2017 = Astros2017BH.groupby(['WinLoss']).size()/len(Astros2017BH.index)
AstrosAHPercentWin2017 = Astros2017AH.groupby(['WinLoss']).size()/len(Astros2017AH.index)
AstrosDHPercentWin2017 = Astros2017DH.groupby(['WinLoss']).size()/len(Astros2017DH.index)
print('Astros Full Season Win/Loss Percentages 2017: ',AstrosFSPercentWin2017)
print('Astros Before Hurricane Win/Loss Percentages 2017: ',AstrosBHPercentWin2017)
print('Astros After Hurricane Win/Loss Percentages 2017: ',AstrosAHPercentWin2017)
print('Astros During Hurricane Win/Loss Percentages 2017: ',AstrosDHPercentWin2017)
# Plotting the Win/Loss Ratios for the Astros 2017 Season
n_groups = 2
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.2
opacity = 0.8
rects1 = plt.bar(index,AstrosFSPercentWin2017,bar_width, 
alpha = opacity,
color = 'navy',
label = 'Full Season')
rects2 = plt.bar(index + bar_width,AstrosBHPercentWin2017,bar_width, 
alpha = opacity,
color = 'darkorange',
label = 'Before Hurricane')
rects3 = plt.bar(index + 2*bar_width,AstrosAHPercentWin2017,bar_width, 
alpha = opacity,
color = 'steelblue',
label = 'After Hurricane')
rects4 = plt.bar(index + 3*bar_width,AstrosDHPercentWin2017,bar_width, 
alpha = opacity,
color = 'lightsalmon',
label = 'During Hurricane')
plt.xlabel('Segment of the Season')
plt.ylabel('Percentages')
plt.title('Astros 2017 Win/loss Percentage by Segment of the Season')
plt.xticks(index + 1.5*bar_width,('Losses','Wins'))
plt.legend(loc = 0,fontsize='xx-small',ncol=3)
plt.tight_layout()
plt.show()
# Win/Loss Records for Home vs. Away for Full Season, Before Hurricane, After Hurricane, During Hurricane
AstrosFullSeason2017Home = Astros2017FShome.groupby(['WinLoss']).size()
AstrosBefore_Hurricane2017Home = Astros2017BHhome.groupby(['WinLoss']).size()
AstrosAfter_Hurricane2017Home = Astros2017AHhome.groupby(['WinLoss']).size()
AstrosDuring_Hurricane2017Home = Astros2017DHhome.groupby(['WinLoss']).size()
print('Astros Full Season Home Win/Loss Records 2017', AstrosFullSeason2017Home)
print('Astros Before Hurricane Home Win/Loss Records 2017',AstrosBefore_Hurricane2017Home)
print('Astros After Hurricane Home Win/Loss Records 2017',AstrosAfter_Hurricane2017Home)
print('Astros During Hurricane Home Win/Loss Records 2017',AstrosDuring_Hurricane2017Home)
AstrosFullSeason2017Away = Astros2017FSaway.groupby(['WinLoss']).size()
AstrosBefore_Hurricane2017Away = Astros2017BHaway.groupby(['WinLoss']).size()
AstrosAfter_Hurricane2017Away = Astros2017AHaway.groupby(['WinLoss']).size()
AstrosDuring_Hurricane2017Away = Astros2017DHaway.groupby(['WinLoss']).size()
print('Astros Full Season AwayWin/Loss Records 2017', AstrosFullSeason2017Away)
print('Astros Before Hurricane Away Win/Loss Records 2017',AstrosBefore_Hurricane2017Away)
print('Astros After Hurricane Away Win/Loss Records 2017',AstrosAfter_Hurricane2017Away)
print('Astros During Hurricane Away Win/Loss Records 2017',AstrosDuring_Hurricane2017Away)
# Percentages for home vs. away Full Season, Before Hurricane, After Hurricane, During Hurricane
AstrosFSPercentWin2017home = Astros2017FShome.groupby(['WinLoss']).size()/len(Astros2017FShome.index)
AstrosBHPercentWin2017home = Astros2017BHhome.groupby(['WinLoss']).size()/len(Astros2017BHhome.index)
AstrosAHPercentWin2017home = Astros2017AHhome.groupby(['WinLoss']).size()/len(Astros2017AHhome.index)
AstrosDHPercentWin2017home = Astros2017DHhome.groupby(['WinLoss']).size()/len(Astros2017DHhome.index)
print('Astros Full Season Home Win/Loss Percentages',AstrosFSPercentWin2017home)
print('Astros Before Hurricane Home Win/Loss Percentages',AstrosBHPercentWin2017home)
print('Astros After Hurricane Home Win/Loss Percentages',AstrosAHPercentWin2017home)
print('Astros During Hurricane Home Win/Loss Percentages',AstrosDHPercentWin2017home)
AstrosFSPercentWin2017away = Astros2017FSaway.groupby(['WinLoss']).size()/len(Astros2017FSaway.index)
AstrosBHPercentWin2017away = Astros2017BHaway.groupby(['WinLoss']).size()/len(Astros2017BHaway.index)
AstrosAHPercentWin2017away = Astros2017AHaway.groupby(['WinLoss']).size()/len(Astros2017AHaway.index)
AstrosDHPercentWin2017away = Astros2017DHaway.groupby(['WinLoss']).size()/len(Astros2017DHaway.index)
print('Astros Full Season Away Win/Loss Percentages 2017',AstrosFSPercentWin2017away)
print('Astros Before Hurricane Away Win/Loss Percentages 2017',AstrosBHPercentWin2017away)
print('Astros After Hurricane Away Win/Loss Percentages 2017',AstrosAHPercentWin2017away)
print('Astros During Hurricane Away Win/Loss Percentages 2017',AstrosDHPercentWin2017away)
# Plotting the Win/Loss Ratios for the Astros 2017 Season Compare Home vs. Away
n_groups = 2
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.1
opacity = 0.8
FSHome = plt.bar(index,AstrosFSPercentWin2017home,bar_width, 
alpha = opacity,
color = 'navy',
label = 'Full Season Home Games')
FSAway = plt.bar(index + bar_width,AstrosFSPercentWin2017away,bar_width, 
alpha = opacity,
color = 'cornflowerblue',
label = 'Full Season Away Games')
BHHome = plt.bar(index + 2*bar_width,AstrosBHPercentWin2017home,bar_width, 
alpha = opacity,
color = 'darkorange',
label = 'Before Hurricane Home Games')
BHAway = plt.bar(index + 3*bar_width,AstrosBHPercentWin2017away,bar_width,
alpha = opacity,
color = 'moccasin',
label = 'Before Hurricane Away Games')
AHHome = plt.bar(index + 4*bar_width,AstrosAHPercentWin2017home,bar_width, 
alpha = opacity,
color = 'steelblue',
label = 'After Hurricane Home Games')
AHAway = plt.bar(index + 5*bar_width,AstrosAHPercentWin2017away,bar_width, 
alpha = opacity,
color = 'lightsteelblue',
label = 'After Hurricane Away Games')
DHHome = plt.bar(index + 6*bar_width,AstrosDHPercentWin2017home,bar_width, 
alpha = opacity,
color = 'darksalmon',
label = 'During Hurricane Home Games')
DHAway = plt.bar(index + 7*bar_width,AstrosDHPercentWin2017away,bar_width, 
alpha = opacity,
color = 'lightsalmon',
label = 'During Hurricane Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Percentages')
plt.title('Astros 2017 Win/loss Percentages by Segment of the Season and Home vs Away')
plt.xticks(index + 2*bar_width,('Losses','Wins'))
plt.legend(loc = 0,fontsize='x-small')
plt.tight_layout()
plt.show()
# Hits Records by Full Season, Before Hurricane, After Hurricane, During Hurricane
AstrosFS2017Hits = sum(Astros2017['HitsbyHOU'])
AstrosBH2017Hits = sum(Astros2017BH['HitsbyHOU'])
AstrosAH2017Hits = sum(Astros2017AH['HitsbyHOU'])
AstrosDH2017Hits = sum(Astros2017DH['HitsbyHOU'])
AstrosFS2017Hitshome = sum(Astros2017FShome['HitsbyHOU'])
AstrosBH2017Hitshome = sum(Astros2017BHhome['HitsbyHOU'])
AstrosAH2017Hitshome = sum(Astros2017AHhome['HitsbyHOU'])
AstrosDH2017Hitshome = sum(Astros2017DHhome['HitsbyHOU'])
AstrosFS2017Hitsaway = sum(Astros2017FSaway['HitsbyHOU'])
AstrosBH2017Hitsaway = sum(Astros2017BHaway['HitsbyHOU'])
AstrosAH2017Hitsaway = sum(Astros2017AHaway['HitsbyHOU'])
AstrosDH2017Hitsaway = sum(Astros2017DHaway['HitsbyHOU'])
print('Astros Full Season Hits 2017: ',AstrosFS2017Hits)
print('Astros Full Season Hits 2017 Home Games: ',AstrosFS2017Hitshome)
print('Astros Full Season Hits 2017 Away Games: ',AstrosFS2017Hitsaway)
print('Astros Before Hurricane Hits 2017: ',AstrosBH2017Hits)
print('Astros Before Hurricane Hits 2017 Away Games: ',AstrosBH2017Hitshome)
print('Astros Before Hurricane Hits 2017 Home Games: ',AstrosBH2017Hitsaway)
print('Astros After Hurricane Hits 2017: ',AstrosAH2017Hits)
print('Astros After Hurricane Hits 2017 Home Games: ',AstrosAH2017Hitshome)
print('Astros After Hurricane Hits 2017 Away Games: ',AstrosAH2017Hitsaway)
print('Astros During Hurricane Hits 2017: ',AstrosDH2017Hits)
print('Astros During Hurricane Hits 2017 Home Games: ',AstrosDH2017Hitshome)
print('Astros During Hurricane Hits 2017 Away Games: ',AstrosDH2017Hitsaway)
# At Bats Records by Full Season, Before Hurricane, After Hurricane, During Hurricane
AstrosFS2017AtBats = sum(Astros2017['ABbyHOU'])
AstrosBH2017AtBats = sum(Astros2017BH['ABbyHOU'])
AstrosAH2017AtBats = sum(Astros2017AH['ABbyHOU'])
AstrosDH2017AtBats = sum(Astros2017DH['ABbyHOU'])
AstrosFS2017AtBatshome = sum(Astros2017FShome['ABbyHOU'])
AstrosBH2017AtBatshome = sum(Astros2017BHhome['ABbyHOU'])
AstrosAH2017AtBatshome = sum(Astros2017AHhome['ABbyHOU'])
AstrosDH2017AtBatshome = sum(Astros2017DHhome['ABbyHOU'])
AstrosFS2017AtBatsaway = sum(Astros2017FSaway['ABbyHOU'])
AstrosBH2017AtBatsaway = sum(Astros2017BHaway['ABbyHOU'])
AstrosAH2017AtBatsaway = sum(Astros2017AHaway['ABbyHOU'])
AstrosDH2017AtBatsaway = sum(Astros2017DHaway['ABbyHOU'])
print('Astros Full Season At Bats 2017: ',AstrosFS2017AtBats)
print('Astros Full Season At Bats 2017 Home Games: ',AstrosFS2017AtBatshome)
print('Astros Full Season At Bats 2017 Away Games: ',AstrosFS2017AtBatsaway)
print('Astros Before Hurricane At Bats 2017: ',AstrosBH2017AtBats)
print('Astros Before Hurricane At Bats 2017 Home Games: ',AstrosBH2017AtBatshome)
print('Astros Before Hurricane At Bats 2017 Away Games: ',AstrosBH2017AtBatsaway)
print('Astros After Hurricane At Bats 2017: ',AstrosAH2017AtBats)
print('Astros After Hurricane At Bats 2017 Home Games: ',AstrosAH2017AtBatshome)
print('Astros After Hurricane At Bats 2017 Away games: ',AstrosAH2017AtBatsaway)
print('Astros During Hurricane At Bats 2017: ',AstrosDH2017AtBats)
print('Astros During Hurricane At Bats 2017 Home Games: ',AstrosDH2017AtBatshome)
print('Astros During Hurricane At Bats 2017 Away Games: ',AstrosDH2017AtBatsaway)
# Percent of At Bats resulting in hits by Full Season, Before Hurricane, After Hurricane, During Hurricane
AstrosFS2017Hpercent = AstrosFS2017Hits/AstrosFS2017AtBats
AstrosBH2017Hpercent = AstrosBH2017Hits/AstrosBH2017AtBats
AstrosAH2017Hpercent = AstrosAH2017Hits/AstrosAH2017AtBats
AstrosDH2017Hpercent = AstrosDH2017Hits/AstrosDH2017AtBats
AstrosFS2017Hpercenthome = AstrosFS2017Hitshome/AstrosFS2017AtBatshome
AstrosBH2017Hpercenthome = AstrosBH2017Hitshome/AstrosBH2017AtBatshome
AstrosAH2017Hpercenthome = AstrosAH2017Hitshome/AstrosAH2017AtBatshome
AstrosDH2017Hpercenthome = AstrosDH2017Hitshome/AstrosDH2017AtBatshome
AstrosFS2017Hpercentaway = AstrosFS2017Hitsaway/AstrosFS2017AtBatsaway
AstrosBH2017Hpercentaway = AstrosBH2017Hitsaway/AstrosBH2017AtBatsaway
AstrosAH2017Hpercentaway = AstrosAH2017Hitsaway/AstrosAH2017AtBatsaway
AstrosDH2017Hpercentaway = AstrosDH2017Hitsaway/AstrosDH2017AtBatsaway
print('Astros Full Season Percentage of At Bats resulting in Hits 2017: ',"{:.2%}".format(AstrosFS2017Hpercent))
print('Astros Full Season Percentage of At Bats resulting in Hits 2017 Home Games: ',"{:.2%}".format(AstrosFS2017Hpercenthome))
print('Astros Full Season Percentage of At Bats resulting in Hits 2017 Away Games: ',"{:.2%}".format(AstrosFS2017Hpercentaway))
print('Astros Before Hurricane Percentage of At Bats resulting in Hits 2017: ',"{:.2%}".format(AstrosBH2017Hpercent))
print('Astros Before Hurricane Percentage of At Bats resulting in Hits 2017 Home Games: ',"{:.2%}".format(AstrosBH2017Hpercenthome))
print('Astros Before Hurricane Percentage of At Bats resulting in Hits 2017 Away Games: ',"{:.2%}".format(AstrosBH2017Hpercentaway))
print('Astros After Hurricane Percentage of At Bats resulting in Hits 2017: ',"{:.2%}".format(AstrosAH2017Hpercent))
print('Astros After Hurricane Percentage of At Bats resulting in Hits 2017 Home Games: ',"{:.2%}".format(AstrosAH2017Hpercenthome))
print('Astros After Hurricane Percentage of At Bats resulting in Hits 2017 Away Games: ',"{:.2%}".format(AstrosAH2017Hpercentaway))
print('Astros During Hurricane Percentage of At Bats resulting in Hits 2017: ',"{:.2%}".format(AstrosDH2017Hpercent))
print('Astros During Hurricane Percentage of At Bats resulting in Hits 2017 Home Games: ',"{:.2%}".format(AstrosDH2017Hpercenthome))
print('Astros During Hurricane Percentage of At Bats resulting in Hits 2017 Away Games: ',"{:.2%}".format(AstrosDH2017Hpercentaway))
# Create a CSV for At Bats resulting in Hits based on Full Season, Before Hurricane, After Hurricane, and During Hurricane 
row_list1 = [['Portion of Season','Home vs Away','Hits','At Bats','Percent of At Bats resulting in Hits'],
['Full Season','ALL',AstrosFS2017Hits,AstrosFS2017AtBats,"{:.2%}".format(AstrosFS2017Hpercent)],
['Full Season','Home',AstrosFS2017Hitshome,AstrosFS2017AtBatshome,"{:.2%}".format(AstrosFS2017Hpercenthome)],
['Full Season','Away',AstrosFS2017Hitsaway,AstrosFS2017AtBatsaway,"{:.2%}".format(AstrosFS2017Hpercentaway)],
['Before Hurricane','ALL',AstrosBH2017Hits,AstrosBH2017AtBats,"{:.2%}".format(AstrosBH2017Hpercent)],
['Before Hurricane','Home',AstrosBH2017Hitshome,AstrosBH2017AtBatshome,"{:.2%}".format(AstrosBH2017Hpercenthome)],
['Before Hurricane','Away',AstrosBH2017Hitsaway,AstrosBH2017AtBatsaway,"{:.2%}".format(AstrosBH2017Hpercentaway)],
['After Hurricane','All',AstrosAH2017Hits,AstrosAH2017AtBats,"{:.2%}".format(AstrosAH2017Hpercent)],
['After Hurricane','Home',AstrosAH2017Hitshome,AstrosAH2017AtBatshome,"{:.2%}".format(AstrosAH2017Hpercenthome)],
['After Hurricane','Away',AstrosAH2017Hitsaway,AstrosAH2017AtBatsaway,"{:.2%}".format(AstrosAH2017Hpercentaway)],
['During Hurricane','ALL',AstrosDH2017Hits,AstrosDH2017AtBats,"{:.2%}".format(AstrosDH2017Hpercent)],
['During Hurricane','Home',AstrosDH2017Hits,AstrosDH2017AtBatshome,"{:.2%}".format(AstrosDH2017Hpercenthome)],
['During Hurricane','Away',AstrosDH2017Hits,AstrosDH2017AtBatsaway,"{:.2%}".format(AstrosDH2017Hpercentaway)]]
with open ('Astros-Hits-AtBats2017.csv','w',newline='') as file:
    writer = csv.writer(file)
    writer.writerows(row_list1) 
# Plotting Hits to At Bat Ratios by Segment of the season
n_groups = 1
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.05
opacity = 0.8
FSALL = plt.bar(index,AstrosFS2017Hpercent,bar_width, 
alpha = opacity,
color = 'royalblue',
label = 'Full Season')
FSHome = plt.bar(index + bar_width,AstrosFS2017Hpercenthome,bar_width, 
alpha = opacity,
color = 'navy',
label = 'Full Season Home Games')
FSAway = plt.bar(index + 2*bar_width,AstrosFS2017Hpercentaway,bar_width, 
alpha = opacity,
color = 'cornflowerblue',
label = 'Full Season Away Games')
BHALL = plt.bar(index + 3.5*bar_width,AstrosBH2017Hpercent,bar_width, 
alpha = opacity,
color = 'orange',
label = 'During Hurricane')
BHHome = plt.bar(index + 4.5*bar_width,AstrosBH2017Hpercenthome,bar_width, 
alpha = opacity,
color = 'darkorange',
label = 'Before Hurricane Home Games')
BHAway = plt.bar(index + 5.5*bar_width,AstrosBH2017Hpercentaway,bar_width,
alpha = opacity,
color = 'moccasin',
label = 'Before Hurricane Away Games')
AHALL = plt.bar(index + 7*bar_width,AstrosAH2017Hpercent,bar_width, 
alpha = opacity,
color = 'cadetblue',
label = 'After Hurricane')
AHHome = plt.bar(index + 8*bar_width,AstrosAH2017Hpercenthome,bar_width, 
alpha = opacity,
color = 'steelblue',
label = 'After Hurricane Home Games')
AHAway = plt.bar(index + 9*bar_width,AstrosAH2017Hpercentaway,bar_width, 
alpha = opacity,
color = 'lightsteelblue',
label = 'After Hurricane Away Games')
DHALL = plt.bar(index + 10.5*bar_width,AstrosDH2017Hpercent,bar_width, 
alpha = opacity,
color = 'salmon',
label = 'During Hurricane')
DHHome = plt.bar(index + 11.5*bar_width,AstrosDH2017Hpercenthome,bar_width, 
alpha = opacity,
color = 'darksalmon',
label = 'During Hurricane Home Games')
DHAway = plt.bar(index + 12.5*bar_width,AstrosDH2017Hpercentaway,bar_width, 
alpha = opacity,
color = 'lightsalmon',
label = 'During Hurricane Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Hits to At Bats Ratio')
plt.title('Astros 2017 Hits to At Bats Ratio by Segment of the Season')
plt.xticks([.05,.225,.4,.575],['Full Season','Before Hurricane','After Hurricane','During Hurricane'])
plt.legend(loc = 0,fontsize='xx-small',ncol = 3)
plt.tight_layout()
plt.show()
# Median Points Difference in games where Astros were at home vs. away Full Season, Before Hurricane, After Hurricane, During Hurricane and full season both home and away
AstrosFS2017Points_Diff = Astros2017.loc[:,'Point_Diff'].median()
AstrosBH2017Points_Diff = Astros2017BH.loc[:,'Point_Diff'].median()
AstrosAH2017Points_Diff = Astros2017AH.loc[:,'Point_Diff'].median()
AstrosDH2017Points_Diff = Astros2017DH.loc[:,'Point_Diff'].median()
AstrosFS2017Points_DiffHome = Astros2017FShome.loc[:,'Point_Diff'].median()
AstrosFS2017Points_DiffAway = Astros2017FSaway.loc[:,'Point_Diff'].median()
AstrosBH2017Points_DiffHome = Astros2017BHhome.loc[:,'Point_Diff'].median()
AstrosBH2017Points_DiffAway = Astros2017BHaway.loc[:,'Point_Diff'].median()
AstrosAH2017Points_DiffHome = Astros2017AHhome.loc[:,'Point_Diff'].median()
AstrosAH2017Points_DiffAway = Astros2017AHaway.loc[:,'Point_Diff'].median()
AstrosDH2017Points_DiffHome = Astros2017DHhome.loc[:,'Point_Diff'].median()
AstrosDH2017Points_DiffAway = Astros2017DHaway.loc[:,'Point_Diff'].median()
print('Astros Full Season Median Points Difference 2017: ',AstrosFS2017Points_Diff)
print('Astros Full Season Home Games Median Points Difference 2017: ',AstrosFS2017Points_DiffHome)
print('Astros Full Season Away Games Median Points Difference 2017: ',AstrosFS2017Points_DiffAway)
print('Astros Before Hurricane Median Points Difference 2017: ',AstrosBH2017Points_Diff)
print('Astros Before Hurricane Home Games Median Points Difference 2017: ',AstrosBH2017Points_DiffHome)
print('Astros Before Hurricane Away Games Points Difference 2017: ',AstrosBH2017Points_DiffAway)
print('Astros After Hurricane Median Points Difference 2017: ',AstrosAH2017Points_Diff)
print('Astros After Hurricane Home Games Median Points Difference 2017: ',AstrosAH2017Points_DiffHome)
print('Astros After Hurricane Away Games Median Points Difference 2017: ',AstrosAH2017Points_DiffAway)
print('Astros During Hurricane Median Points Difference 2017: ',AstrosDH2017Points_Diff)
print('Astros During Hurricane Home Games Median Points Difference 2017: ',AstrosDH2017Points_DiffHome)
print('Astros During Hurricane Away Games Median Points Difference 2017: ',AstrosDH2017Points_DiffAway)
# Plotting the Win/Loss Ratios for the Astros 2017 Season Compare Home vs. Away
n_groups = 1
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.05
opacity = 0.8
FSALL = plt.bar(index,AstrosFS2017Points_Diff,bar_width, 
alpha = opacity,
color = 'royalblue',
label = 'Full Season')
FSHome = plt.bar(index + bar_width,AstrosFS2017Points_DiffHome,bar_width, 
alpha = opacity,
color = 'navy',
label = 'Full Season Home Games')
FSAway = plt.bar(index + 2*bar_width,AstrosFS2017Points_DiffAway,bar_width, 
alpha = opacity,
color = 'cornflowerblue',
label = 'Full Season Away Games')
BHALL = plt.bar(index + 3.5*bar_width,AstrosBH2017Points_Diff,bar_width, 
alpha = opacity,
color = 'orange',
label = 'During Hurricane')
BHHome = plt.bar(index + 4.5*bar_width,AstrosBH2017Points_DiffHome,bar_width, 
alpha = opacity,
color = 'darkorange',
label = 'Before Hurricane Home Games')
BHAway = plt.bar(index + 5.5*bar_width,AstrosBH2017Points_DiffAway,bar_width,
alpha = opacity,
color = 'moccasin',
label = 'Before Hurricane Away Games')
AHALL = plt.bar(index + 7*bar_width,AstrosAH2017Points_Diff,bar_width, 
alpha = opacity,
color = 'cadetblue',
label = 'After Hurricane')
AHHome = plt.bar(index + 8*bar_width,AstrosAH2017Points_DiffHome,bar_width, 
alpha = opacity,
color = 'steelblue',
label = 'After Hurricane Home Games')
AHAway = plt.bar(index + 9*bar_width,AstrosAH2017Points_DiffAway,bar_width, 
alpha = opacity,
color = 'lightsteelblue',
label = 'After Hurricane Away Games')
DHALL = plt.bar(index + 10.5*bar_width,AstrosDH2017Points_Diff,bar_width, 
alpha = opacity,
color = 'salmon',
label = 'During Hurricane')
DHHome = plt.bar(index + 11.5*bar_width,AstrosDH2017Points_DiffHome,bar_width, 
alpha = opacity,
color = 'darksalmon',
label = 'During Hurricane Home Games')
DHAway = plt.bar(index + 12.5*bar_width,AstrosDH2017Points_DiffAway,bar_width, 
alpha = opacity,
color = 'lightsalmon',
label = 'During Hurricane Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Median Points Differences')
plt.title('Astros 2017 Median Points Differences by Segment of the Season')
plt.xticks([.05,.225,.4,.575],['Full Season','Before Hurricane','After Hurricane','During Hurricane'])
plt.legend(loc = 0,fontsize='x-small')
plt.tight_layout()
plt.show()
# Team Earned Run Average for the Astros full season, Before Hurricane, After Hurricane, During Hurricane, then Home vs. away FS, BH, AH, DH
AstrosFS2017teamERA = sum(Astros2017['EarnedRunsbyHOU'])/len(Astros2017['EarnedRunsbyHOU'])
AstrosBH2017teamERA = sum(Astros2017BH['EarnedRunsbyHOU'])/len(Astros2017BH['EarnedRunsbyHOU'])
AstrosAH2017teamERA = sum(Astros2017AH['EarnedRunsbyHOU'])/len(Astros2017AH['EarnedRunsbyHOU'])
AstrosDH2017teamERA = sum(Astros2017DH['EarnedRunsbyHOU'])/len(Astros2017DH['EarnedRunsbyHOU'])
print('Astros Full Season Team Earned Run Average 2017: ',AstrosFS2017teamERA)
print('Astros Before Hurricane Team Earned Run Average 2017: ',AstrosBH2017teamERA)
print('Astros After Hurricane Team Earned Run Average 2017: ',AstrosAH2017teamERA)
print('Astros During Hurricane Team Earned Run Average 2017: ',AstrosDH2017teamERA)
AstrosFS2017teamERAhome = sum(Astros2017FShome['EarnedRunsbyHOU'])/len(Astros2017FShome['EarnedRunsbyHOU'])
AstrosBH2017teamERAhome = sum(Astros2017BHhome['EarnedRunsbyHOU'])/len(Astros2017BHhome['EarnedRunsbyHOU'])
AstrosAH2017teamERAhome = sum(Astros2017AHhome['EarnedRunsbyHOU'])/len(Astros2017AHhome['EarnedRunsbyHOU'])
AstrosDH2017teamERAhome = sum(Astros2017DHhome['EarnedRunsbyHOU'])/len(Astros2017DHhome['EarnedRunsbyHOU'])
print('Astros Full Season Home Games Team Earned Run Average 2017: ',AstrosFS2017teamERAhome)
print('Astros Before Hurricane Home Games Team Earned Run Average 2017: ',AstrosBH2017teamERAhome)
print('Astros After Hurricane Home Games Team Earned Run Average 2017: ',AstrosAH2017teamERAhome)
print('Astros During Hurricane Home Games Team Earned Run Average 2017 : ',AstrosDH2017teamERAhome)
AstrosFS2017teamERAaway = sum(Astros2017FSaway['EarnedRunsbyHOU'])/len(Astros2017FSaway['EarnedRunsbyHOU'])
AstrosBH2017teamERAaway = sum(Astros2017BHaway['EarnedRunsbyHOU'])/len(Astros2017BHaway['EarnedRunsbyHOU'])
AstrosAH2017teamERAaway = sum(Astros2017AHaway['EarnedRunsbyHOU'])/len(Astros2017AHaway['EarnedRunsbyHOU'])
AstrosDH2017teamERAaway = sum(Astros2017DHaway['EarnedRunsbyHOU'])/len(Astros2017DHaway['EarnedRunsbyHOU'])
print('Astros Full Season Away Games Team Earned Run Average 2017: ',AstrosFS2017teamERAaway)
print('Astros Before Hurricane Away Games Team Earned Run Average 2017: ',AstrosBH2017teamERAaway)
print('Astros After Hurricane Away Games Team Earned Run Average 2017: ',AstrosAH2017teamERAaway)
print('Astros During Hurricane Away Games Team Earned Run Average 2017: ',AstrosDH2017teamERAaway)
# Plotting team ERA by segment of the season
n_groups = 1
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.05
opacity = 0.8
FSALL = plt.bar(index,AstrosFS2017teamERA,bar_width, 
alpha = opacity,
color = 'royalblue',
label = 'Full Season')
FSHome = plt.bar(index + bar_width,AstrosFS2017teamERAhome,bar_width, 
alpha = opacity,
color = 'navy',
label = 'Full Season Home Games')
FSAway = plt.bar(index + 2*bar_width,AstrosFS2017teamERAaway,bar_width, 
alpha = opacity,
color = 'cornflowerblue',
label = 'Full Season Away Games')
BHALL = plt.bar(index + 3.5*bar_width,AstrosBH2017teamERA,bar_width, 
alpha = opacity,
color = 'orange',
label = 'During Hurricane')
BHHome = plt.bar(index + 4.5*bar_width,AstrosBH2017teamERAhome,bar_width, 
alpha = opacity,
color = 'darkorange',
label = 'Before Hurricane Home Games')
BHAway = plt.bar(index + 5.5*bar_width,AstrosBH2017teamERAaway,bar_width,
alpha = opacity,
color = 'moccasin',
label = 'Before Hurricane Away Games')
AHALL = plt.bar(index + 7*bar_width,AstrosAH2017teamERA,bar_width, 
alpha = opacity,
color = 'cadetblue',
label = 'After Hurricane')
AHHome = plt.bar(index + 8*bar_width,AstrosAH2017teamERAhome,bar_width, 
alpha = opacity,
color = 'steelblue',
label = 'After Hurricane Home Games')
AHAway = plt.bar(index + 9*bar_width,AstrosAH2017teamERAaway,bar_width, 
alpha = opacity,
color = 'lightsteelblue',
label = 'After Hurricane Away Games')
DHALL = plt.bar(index + 10.5*bar_width,AstrosDH2017teamERA,bar_width, 
alpha = opacity,
color = 'salmon',
label = 'During Hurricane')
DHHome = plt.bar(index + 11.5*bar_width,AstrosDH2017teamERAhome,bar_width, 
alpha = opacity,
color = 'darksalmon',
label = 'During Hurricane Home Games')
DHAway = plt.bar(index + 12.5*bar_width,AstrosDH2017teamERAaway,bar_width, 
alpha = opacity,
color = 'lightsalmon',
label = 'During Hurricane Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Median Points Differences')
plt.title('Astros 2017 Team ERA by Segment of the Season')
plt.xticks([.05,.225,.4,.575],['Full Season','Before Hurricane','After Hurricane','During Hurricane'])
plt.legend(loc = 0,fontsize='xx-small',ncol=3)
plt.tight_layout()
plt.show()
# Create a dataframe of only games the Rangers were playing and reset the index
Rangers2017 = pd.DataFrame(columns=MLBgames17.columns)
Rangers2017 = MLBgames17.loc[(MLBgames17['V_Team']=='TEX')|(MLBgames17['H_Team']=='TEX')] 
Rangers2017 = Rangers2017.reset_index(drop=True)
# Add columns to the Rangers dataframe for hits when the Rangers are visitors, hits when the Rangers are at home and hits by Rangers total.
Rangers2017['HitsbyTEXasV'] = pd.to_numeric(Rangers2017.apply(lambda row: row.V_Hits if row.V_Team == 'TEX' else 0,axis=1))
Rangers2017['HitsbyTEXasH'] = pd.to_numeric(Rangers2017.apply(lambda row: row.H_Hits if row.H_Team == 'TEX' else 0,axis=1))
Rangers2017['HitsbyTEX'] = Rangers2017['HitsbyTEXasV'] + Rangers2017['HitsbyTEXasH']
# Add columns to the Rangers dataframe for at bats when the Rangers are visitors, at bats when the Rangers are at home and at bats by Rangers total.
Rangers2017['ABbyTEXasV'] = pd.to_numeric(Rangers2017.apply(lambda row: row.V_AB if row.V_Team == 'TEX' else 0,axis=1))
Rangers2017['ABbyTEXasH'] = pd.to_numeric(Rangers2017.apply(lambda row: row.H_AB if row.H_Team == 'TEX' else 0,axis=1))
Rangers2017['ABbyTEX'] = Rangers2017['ABbyTEXasV'] + Rangers2017['ABbyTEXasH']
Rangers2017.head
# Add columns to the Rangers dataframe for at bats when the Rangers are visitors, at bats when the Rangers are at home and at bats by Rangers total.
Rangers2017['EarnedRunsbyTEXasV'] = pd.to_numeric(Rangers2017.apply(lambda row: row.V_TeamEarnedRuns if row.V_Team == 'TEX' else 0,axis=1))
Rangers2017['EarnedRunsbyTEXasH'] = pd.to_numeric(Rangers2017.apply(lambda row: row.H_TeamEarnedRuns if row.H_Team == 'TEX' else 0,axis=1))
Rangers2017['EarnedRunsbyTEX'] = Rangers2017['EarnedRunsbyTEXasV'] + Rangers2017['EarnedRunsbyTEXasH']
Rangers2017.head
# Converts score columns to numbers
Rangers2017['V_Score'] = pd.to_numeric(Rangers2017['V_Score'])
Rangers2017['H_Score'] = pd.to_numeric(Rangers2017['H_Score'])

# Code below adapted from optimumsportsperformance.com/blog/python-pivot-tables/
# This code creates a Point Difference column, sets conditions and choices for 
# the created Winner column which tells if the home or visitor is the winner, 
# sets conditions and choices to return the winning team abbreviation to the WTeam column,
# and a W or L to the WinLoss column on the basis of TEX being in the WTeam field for that row.
Rangers2017['Point_Diff'] =0
Rangers2017['Point_Diff'] = np.where((Rangers2017.H_Team == 'TEX'),Rangers2017['H_Score'] - Rangers2017['V_Score'],Rangers2017.Point_Diff)
Rangers2017['Point_Diff'] = np.where((Rangers2017.H_Team != 'TEX'),Rangers2017['V_Score'] - Rangers2017['H_Score'],Rangers2017.Point_Diff)
conditions = [(Rangers2017['H_Score'] > Rangers2017['V_Score']),(Rangers2017['H_Score'] < Rangers2017['V_Score'])]
choices = ['home','visitor']
Rangers2017['Winner'] = np.select(conditions,choices,default = 'null')
cond_for_winner = [(Rangers2017['Winner']=='home'),(Rangers2017['Winner']=='visitor')]
choices_for_winner = [Rangers2017['H_Team'],Rangers2017['V_Team']]
Rangers2017['WTeam'] = np.select(cond_for_winner,choices_for_winner,default='null')
Rangers2017['WinLoss'] = Rangers2017.apply(lambda row: 'W' if row.WTeam == 'TEX' else 'L',axis=1)
# Creates individual dataframes for Before Hurricane (games played prior to 8/28/2017), 
# During Hurricane (including games played at Tropicana Field because of Hurricane on 8/23-9/16/2017 based on the dates of FEMA disaster declarations),
# After Hurricane (games played from 9/17/2017 to the end of the regular season.)
Rangers2017BH = Rangers2017.loc[(Rangers2017['Date']<'2017-08-23')]
Rangers2017AH = Rangers2017.loc[(Rangers2017['Date']>='2017-09-17')]
Rangers2017DH = Rangers2017.loc[(Rangers2017['Date']>='2017-08-23')&(Rangers2017['Date']<'2017-09-17')]
# Creates dataframes for full season home, full season away, Before Hurricane home, Before Hurricane away, After Hurricane home, 
# After Hurricane away, During Hurricane home, and During Hurricane away
Rangers2017FShome = Rangers2017.loc[(Rangers2017['H_Team']=='TEX')]
Rangers2017FShome['Point_Diff'] = Rangers2017FShome['H_Score'] - Rangers2017FShome['V_Score']
Rangers2017FSaway = Rangers2017.loc[(Rangers2017['V_Team']=='TEX')]
Rangers2017FSaway['Point_Diff'] = Rangers2017FSaway['V_Score'] - Rangers2017FSaway['H_Score']
Rangers2017BHhome = Rangers2017FShome.loc[(Rangers2017FShome['Date']<'2017-08-23')]
Rangers2017BHhome['Point_Diff'] = Rangers2017BHhome['H_Score'] - Rangers2017BHhome['V_Score']
Rangers2017AHhome = Rangers2017FShome.loc[(Rangers2017FShome['Date']>='2017-09-17')]
Rangers2017AHhome['Point_Diff'] = Rangers2017AHhome['H_Score'] - Rangers2017AHhome['V_Score']
Rangers2017DHhome = Rangers2017FShome.loc[(Rangers2017FShome['Date']>='2017-08-23')&(Rangers2017FShome['Date']<'2017-09-17')]
Rangers2017DHhome['Point_Diff'] = Rangers2017DHhome['H_Score'] - Rangers2017DHhome['V_Score']
Rangers2017BHaway = Rangers2017FSaway.loc[(Rangers2017FSaway['Date']<'2017-08-23')]
Rangers2017BHaway['Point_Diff'] = Rangers2017BHaway['V_Score'] - Rangers2017BHaway['H_Score']
Rangers2017AHaway = Rangers2017FSaway.loc[(Rangers2017FSaway['Date']>='2017-09-17')]
Rangers2017AHaway['Point_Diff'] = Rangers2017AHaway['V_Score'] - Rangers2017AHaway['H_Score']
Rangers2017DHaway = Rangers2017FSaway.loc[(Rangers2017FSaway['Date']>='2017-08-23')&(Rangers2017FSaway['Date']<'2017-09-17')]
Rangers2017DHaway['Point_Diff'] = Rangers2017DHaway['V_Score'] - Rangers2017DHaway['H_Score']
# Win/Loss Records by Full Season, Before Hurricane, After Hurricane, During Hurricane.
RangersFullSeason2017 = Rangers2017.groupby(['WinLoss']).size()
RangersBefore_Hurricane2017 = Rangers2017BH.groupby(['WinLoss']).size()
RangersAfter_Hurricane2017 = Rangers2017AH.groupby(['WinLoss']).size()
RangersDuring_Hurricane2017 = Rangers2017DH.groupby(['WinLoss']).size()
print('Rangers Full Season Win/Loss Records 2017: ', RangersFullSeason2017)
print('Rangers Before Hurricane Win/Loss Records 2017: ',RangersBefore_Hurricane2017)
print('Rangers After Hurricane Win/Loss Records 2017:',RangersAfter_Hurricane2017)
print('Rangers During Hurricane Win/Loss Records 2017: ',RangersDuring_Hurricane2017)
RangersFullSeason2017 = np.array(RangersFullSeason2017)
RangersBefore_Hurricane2017 = np.array(RangersBefore_Hurricane2017)
RangersAfter_Hurricane2017 = np.array(RangersAfter_Hurricane2017)
RangersDuring_Hurricane2017 = np.array(RangersDuring_Hurricane2017)
n_groups = 2
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.2
opacity = 0.8
rects1 = plt.bar(index,RangersFullSeason2017,bar_width, 
alpha = opacity,
color = 'navy',
label = 'Full Season')
rects2 = plt.bar(index + bar_width,RangersBefore_Hurricane2017,bar_width, 
alpha = opacity,
color = 'firebrick',
label = 'Before Hurricane')
rects3 = plt.bar(index + 2*bar_width,RangersAfter_Hurricane2017,bar_width, 
alpha = opacity,
color = 'steelblue',
label = 'After Hurricane')
rects4 = plt.bar(index + 3*bar_width,RangersDuring_Hurricane2017,bar_width, 
alpha = opacity,
color = 'lightcoral',
label = 'During Hurricane')
plt.xlabel('Segment of the Season')
plt.ylabel('Games')
plt.title('Rangers 2017 Win/loss Records by Segment of the Season')
plt.xticks(index + 1.5*bar_width,('Losses','Wins'))
plt.legend(loc = 0,fontsize='xx-small',ncol=3)
plt.tight_layout()
plt.show()

# Percentages for Full Season, Before Hurricane, After Hurricane, During Hurricane
RangersFSPercentWin2017 = Rangers2017.groupby(['WinLoss']).size()/len(Rangers2017.index)
RangersBHPercentWin2017 = Rangers2017BH.groupby(['WinLoss']).size()/len(Rangers2017BH.index)
RangersAHPercentWin2017 = Rangers2017AH.groupby(['WinLoss']).size()/len(Rangers2017AH.index)
RangersDHPercentWin2017 = Rangers2017DH.groupby(['WinLoss']).size()/len(Rangers2017DH.index)
print('Rangers Full Season Win/Loss Percentages 2017: ',RangersFSPercentWin2017)
print('Rangers Before Hurricane Win/Loss Percentages 2017: ',RangersBHPercentWin2017)
print('Rangers After Hurricane Win/Loss Percentages 2017: ',RangersAHPercentWin2017)
print('Rangers During Hurricane Win/Loss Percentages 2017: ',RangersDHPercentWin2017)
# Plotting the Win/Loss Ratios for the Rangers 2017 Season
n_groups = 2
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.2
opacity = 0.8
rects1 = plt.bar(index,RangersFSPercentWin2017,bar_width, 
alpha = opacity,
color = 'navy',
label = 'Full Season')
rects2 = plt.bar(index + bar_width,RangersBHPercentWin2017,bar_width, 
alpha = opacity,
color = 'firebrick',
label = 'Before Hurricane')
rects3 = plt.bar(index + 2*bar_width,RangersAHPercentWin2017,bar_width, 
alpha = opacity,
color = 'steelblue',
label = 'After Hurricane')

rects4 = plt.bar(index + 3*bar_width,RangersDHPercentWin2017,bar_width, 
alpha = opacity,
color = 'lightcoral',
label = 'During Hurricane')
plt.xlabel('Segment of the Season')
plt.ylabel('Percentages')
plt.title('Rangers 2017 Win/loss Percentages by Segment of the Season')
plt.xticks(index + 1.5*bar_width,('Losses','Wins'))
plt.legend(loc = 0,fontsize='xx-small',ncol=3)
plt.tight_layout()
plt.show()
# Win/Loss Records for Home vs. Away for Full Season, Before Hurricane, After Hurricane, During Hurricane
RangersFullSeason2017Home = Rangers2017FShome.groupby(['WinLoss']).size()
RangersBefore_Hurricane2017Home = Rangers2017BHhome.groupby(['WinLoss']).size()
RangersAfter_Hurricane2017Home = Rangers2017AHhome.groupby(['WinLoss']).size()
RangersDuring_Hurricane2017Home = Rangers2017DHhome.groupby(['WinLoss']).size()
print('Rangers Full Season Home Win/Loss Records 2017', RangersFullSeason2017Home)
print('Rangers Before Hurricane Home Win/Loss Records 2017',RangersBefore_Hurricane2017Home)
print('Rangers After Hurricane Home Win/Loss Records 2017',RangersAfter_Hurricane2017Home)
print('Rangers During Hurricane Home Win/Loss Records 2017',RangersDuring_Hurricane2017Home)
RangersFullSeason2017Away = Rangers2017FSaway.groupby(['WinLoss']).size()
RangersBefore_Hurricane2017Away = Rangers2017BHaway.groupby(['WinLoss']).size()
RangersAfter_Hurricane2017Away = Rangers2017AHaway.groupby(['WinLoss']).size()
RangersDuring_Hurricane2017Away = Rangers2017DHaway.groupby(['WinLoss']).size()
print('Rangers Full Season AwayWin/Loss Records 2017', RangersFullSeason2017Away)
print('Rangers Before Hurricane Away Win/Loss Records 2017',RangersBefore_Hurricane2017Away)
print('Rangers After Hurricane Away Win/Loss Records 2017',RangersAfter_Hurricane2017Away)
print('Rangers During Hurricane Away Win/Loss Records 2017',RangersDuring_Hurricane2017Away)
# Percentages for home vs. away Full Season, Before Hurricane, After Hurricane, During Hurricane
RangersFSPercentWin2017home = Rangers2017FShome.groupby(['WinLoss']).size()/len(Rangers2017FShome.index)
RangersBHPercentWin2017home = Rangers2017BHhome.groupby(['WinLoss']).size()/len(Rangers2017BHhome.index)
RangersAHPercentWin2017home = Rangers2017AHhome.groupby(['WinLoss']).size()/len(Rangers2017AHhome.index)
RangersDHPercentWin2017home = Rangers2017DHhome.groupby(['WinLoss']).size()/len(Rangers2017DHhome.index)
print('Rangers Full Season Home Win/Loss Percentages',RangersFSPercentWin2017home)
print('Rangers Before Hurricane Home Win/Loss Percentages',RangersBHPercentWin2017home)
print('Rangers After Hurricane Home Win/Loss Percentages',RangersAHPercentWin2017home)
print('Rangers During Hurricane Home Win/Loss Percentages',RangersDHPercentWin2017home)
RangersFSPercentWin2017away = Rangers2017FSaway.groupby(['WinLoss']).size()/len(Rangers2017FSaway.index)
RangersBHPercentWin2017away = Rangers2017BHaway.groupby(['WinLoss']).size()/len(Rangers2017BHaway.index)
RangersAHPercentWin2017away = Rangers2017AHaway.groupby(['WinLoss']).size()/len(Rangers2017AHaway.index)
RangersDHPercentWin2017away = Rangers2017DHaway.groupby(['WinLoss']).size()/len(Rangers2017DHaway.index)
print('Rangers Full Season Away Win/Loss Percentages 2017',RangersFSPercentWin2017away)
print('Rangers Before Hurricane Away Win/Loss Percentages 2017',RangersBHPercentWin2017away)
print('Rangers After Hurricane Away Win/Loss Percentages 2017',RangersAHPercentWin2017away)
print('Rangers During Hurricane Away Win/Loss Percentages 2017',RangersDHPercentWin2017away)
# Plotting the Win/Loss Ratios for the Rangers 2017 Season Compare Home vs. Away
n_groups = 2
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.1
opacity = 0.8
FSHome = plt.bar(index,RangersFSPercentWin2017home,bar_width, 
alpha = opacity,
color = 'navy',
label = 'Full Season Home Games')
FSAway = plt.bar(index + bar_width,RangersFSPercentWin2017away,bar_width, 
alpha = opacity,
color = 'cornflowerblue',
label = 'Full Season Away Games')
BHHome = plt.bar(index + 2*bar_width,RangersBHPercentWin2017home,bar_width, 
alpha = opacity,
color = 'firebrick',
label = 'Before Hurricane Home Games')
BHAway = plt.bar(index + 3*bar_width,RangersBHPercentWin2017away,bar_width,
alpha = opacity,
color = 'indianred',
label = 'Before Hurricane Away Games')
AHHome = plt.bar(index + 4*bar_width,RangersAHPercentWin2017home,bar_width, 
alpha = opacity,
color = 'steelblue',
label = 'After Hurricane Home Games')
AHAway = plt.bar(index + 5*bar_width,RangersAHPercentWin2017away,bar_width, 
alpha = opacity,
color = 'lightsteelblue',
label = 'After Hurricane Away Games')
DHHome = plt.bar(index + 6*bar_width,RangersDHPercentWin2017home,bar_width, 
alpha = opacity,
color = 'maroon',
label = 'During Hurricane Home Games')
DHAway = plt.bar(index + 7*bar_width,RangersDHPercentWin2017away,bar_width, 
alpha = opacity,
color = 'lightcoral',
label = 'During Hurricane Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Percentages')
plt.title('Rangers 2017 Win/loss Percentages by Segment of the Season and Home vs Away')
plt.xticks(index + 2*bar_width,('Losses','Wins'))
plt.legend(loc = 0,fontsize='x-small')
plt.tight_layout()
plt.show()
# Hits Records by Full Season, Before Hurricane, After Hurricane, During Hurricane
RangersFS2017Hits = sum(Rangers2017['HitsbyTEX'])
RangersBH2017Hits = sum(Rangers2017BH['HitsbyTEX'])
RangersAH2017Hits = sum(Rangers2017AH['HitsbyTEX'])
RangersDH2017Hits = sum(Rangers2017DH['HitsbyTEX'])
RangersFS2017Hitshome = sum(Rangers2017FShome['HitsbyTEX'])
RangersBH2017Hitshome = sum(Rangers2017BHhome['HitsbyTEX'])
RangersAH2017Hitshome = sum(Rangers2017AHhome['HitsbyTEX'])
RangersDH2017Hitshome = sum(Rangers2017DHhome['HitsbyTEX'])
RangersFS2017Hitsaway = sum(Rangers2017FSaway['HitsbyTEX'])
RangersBH2017Hitsaway = sum(Rangers2017BHaway['HitsbyTEX'])
RangersAH2017Hitsaway = sum(Rangers2017AHaway['HitsbyTEX'])
RangersDH2017Hitsaway = sum(Rangers2017DHaway['HitsbyTEX'])
print('Rangers Full Season Hits 2017: ',RangersFS2017Hits)
print('Rangers Full Season Hits 2017 Home Games: ',RangersFS2017Hitshome)
print('Rangers Full Season Hits 2017 Away Games: ',RangersFS2017Hitsaway)
print('Rangers Before Hurricane Hits 2017: ',RangersBH2017Hits)
print('Rangers Before Hurricane Hits 2017 Away Games: ',RangersBH2017Hitshome)
print('Rangers Before Hurricane Hits 2017 Home Games: ',RangersBH2017Hitsaway)
print('Rangers After Hurricane Hits 2017: ',RangersAH2017Hits)
print('Rangers After Hurricane Hits 2017 Home Games: ',RangersAH2017Hitshome)
print('Rangers After Hurricane Hits 2017 Away Games: ',RangersAH2017Hitsaway)
print('Rangers During Hurricane Hits 2017: ',RangersDH2017Hits)
print('Rangers During Hurricane Hits 2017 Home Games: ',RangersDH2017Hitshome)
print('Rangers During Hurricane Hits 2017 Away Games: ',RangersDH2017Hitsaway)
# At Bats Records by Full Season, Before Hurricane, After Hurricane, During Hurricane
RangersFS2017AtBats = sum(Rangers2017['ABbyTEX'])
RangersBH2017AtBats = sum(Rangers2017BH['ABbyTEX'])
RangersAH2017AtBats = sum(Rangers2017AH['ABbyTEX'])
RangersDH2017AtBats = sum(Rangers2017DH['ABbyTEX'])
RangersFS2017AtBatshome = sum(Rangers2017FShome['ABbyTEX'])
RangersBH2017AtBatshome = sum(Rangers2017BHhome['ABbyTEX'])
RangersAH2017AtBatshome = sum(Rangers2017AHhome['ABbyTEX'])
RangersDH2017AtBatshome = sum(Rangers2017DHhome['ABbyTEX'])
RangersFS2017AtBatsaway = sum(Rangers2017FSaway['ABbyTEX'])
RangersBH2017AtBatsaway = sum(Rangers2017BHaway['ABbyTEX'])
RangersAH2017AtBatsaway = sum(Rangers2017AHaway['ABbyTEX'])
RangersDH2017AtBatsaway = sum(Rangers2017DHaway['ABbyTEX'])
print('Rangers Full Season At Bats 2017: ',RangersFS2017AtBats)
print('Rangers Full Season At Bats 2017 Home Games: ',RangersFS2017AtBatshome)
print('Rangers Full Season At Bats 2017 Away Games: ',RangersFS2017AtBatsaway)
print('Rangers Before Hurricane At Bats 2017: ',RangersBH2017AtBats)
print('Rangers Before Hurricane At Bats 2017 Home Games: ',RangersBH2017AtBatshome)
print('Rangers Before Hurricane At Bats 2017 Away Games: ',RangersBH2017AtBatsaway)
print('Rangers After Hurricane At Bats 2017: ',RangersAH2017AtBats)
print('Rangers After Hurricane At Bats 2017 Home Games: ',RangersAH2017AtBatshome)
print('Rangers After Hurricane At Bats 2017 Away games: ',RangersAH2017AtBatsaway)
print('Rangers During Hurricane At Bats 2017: ',RangersDH2017AtBats)
print('Rangers During Hurricane At Bats 2017 Home Games: ',RangersDH2017AtBatshome)
print('Rangers During Hurricane At Bats 2017 Away Games: ',RangersDH2017AtBatsaway)
# Percent of At Bats resulting in hits by Full Season, Before Hurricane, After Hurricane, During Hurricane
RangersFS2017Hpercent = RangersFS2017Hits/RangersFS2017AtBats
RangersBH2017Hpercent = RangersBH2017Hits/RangersBH2017AtBats
RangersAH2017Hpercent = RangersAH2017Hits/RangersAH2017AtBats
RangersDH2017Hpercent = RangersDH2017Hits/RangersDH2017AtBats
RangersFS2017Hpercenthome = RangersFS2017Hitshome/RangersFS2017AtBatshome
RangersBH2017Hpercenthome = RangersBH2017Hitshome/RangersBH2017AtBatshome
RangersAH2017Hpercenthome = RangersAH2017Hitshome/RangersAH2017AtBatshome
RangersDH2017Hpercenthome = RangersDH2017Hitshome/RangersDH2017AtBatshome
RangersFS2017Hpercentaway = RangersFS2017Hitsaway/RangersFS2017AtBatsaway
RangersBH2017Hpercentaway = RangersBH2017Hitsaway/RangersBH2017AtBatsaway
RangersAH2017Hpercentaway = RangersAH2017Hitsaway/RangersAH2017AtBatsaway
RangersDH2017Hpercentaway = RangersDH2017Hitsaway/RangersDH2017AtBatsaway
print('Rangers Full Season Percentage of At Bats resulting in Hits 2017: ',"{:.2%}".format(RangersFS2017Hpercent))
print('Rangers Full Season Percentage of At Bats resulting in Hits 2017 Home Games: ',"{:.2%}".format(RangersFS2017Hpercenthome))
print('Rangers Full Season Percentage of At Bats resulting in Hits 2017 Away Games: ',"{:.2%}".format(RangersFS2017Hpercentaway))
print('Rangers Before Hurricane Percentage of At Bats resulting in Hits 2017: ',"{:.2%}".format(RangersBH2017Hpercent))
print('Rangers Before Hurricane Percentage of At Bats resulting in Hits 2017 Home Games: ',"{:.2%}".format(RangersBH2017Hpercenthome))
print('Rangers Before Hurricane Percentage of At Bats resulting in Hits 2017 Away Games: ',"{:.2%}".format(RangersBH2017Hpercentaway))
print('Rangers After Hurricane Percentage of At Bats resulting in Hits 2017: ',"{:.2%}".format(RangersAH2017Hpercent))
print('Rangers After Hurricane Percentage of At Bats resulting in Hits 2017 Home Games: ',"{:.2%}".format(RangersAH2017Hpercenthome))
print('Rangers After Hurricane Percentage of At Bats resulting in Hits 2017 Away Games: ',"{:.2%}".format(RangersAH2017Hpercentaway))
print('Rangers During Hurricane Percentage of At Bats resulting in Hits 2017: ',"{:.2%}".format(RangersDH2017Hpercent))
print('Rangers During Hurricane Percentage of At Bats resulting in Hits 2017 Home Games: ',"{:.2%}".format(RangersDH2017Hpercenthome))
print('Rangers During Hurricane Percentage of At Bats resulting in Hits 2017 Away Games: ',"{:.2%}".format(RangersDH2017Hpercentaway))
# Create a CSV for At Bats resulting in Hits based on Full Season, Before Hurricane, After Hurricane, and During Hurricane 
row_list1 = [['Portion of Season','Home vs Away','Hits','At Bats','Percent of At Bats resulting in Hits'],
['Full Season','ALL',RangersFS2017Hits,RangersFS2017AtBats,"{:.2%}".format(RangersFS2017Hpercent)],
['Full Season','Home',RangersFS2017Hitshome,RangersFS2017AtBatshome,"{:.2%}".format(RangersFS2017Hpercenthome)],
['Full Season','Away',RangersFS2017Hitsaway,RangersFS2017AtBatsaway,"{:.2%}".format(RangersFS2017Hpercentaway)],
['Before Hurricane','ALL',RangersBH2017Hits,RangersBH2017AtBats,"{:.2%}".format(RangersBH2017Hpercent)],
['Before Hurricane','Home',RangersBH2017Hitshome,RangersBH2017AtBatshome,"{:.2%}".format(RangersBH2017Hpercenthome)],
['Before Hurricane','Away',RangersBH2017Hitsaway,RangersBH2017AtBatsaway,"{:.2%}".format(RangersBH2017Hpercentaway)],
['After Hurricane','All',RangersAH2017Hits,RangersAH2017AtBats,"{:.2%}".format(RangersAH2017Hpercent)],
['After Hurricane','Home',RangersAH2017Hitshome,RangersAH2017AtBatshome,"{:.2%}".format(RangersAH2017Hpercenthome)],
['After Hurricane','Away',RangersAH2017Hitsaway,RangersAH2017AtBatsaway,"{:.2%}".format(RangersAH2017Hpercentaway)],
['During Hurricane','ALL',RangersDH2017Hits,RangersDH2017AtBats,"{:.2%}".format(RangersDH2017Hpercent)],
['During Hurricane','Home',RangersDH2017Hits,RangersDH2017AtBatshome,"{:.2%}".format(RangersDH2017Hpercenthome)],
['During Hurricane','Away',RangersDH2017Hits,RangersDH2017AtBatsaway,"{:.2%}".format(RangersDH2017Hpercentaway)]]
with open ('Rangers-Hits-AtBats2017.csv','w',newline='') as file:
    writer = csv.writer(file)
    writer.writerows(row_list1) 
# Plotting Hits to At Bat Ratios by Segment of the season
n_groups = 1
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.05
opacity = 0.8
FSALL = plt.bar(index,RangersFS2017Hpercent,bar_width, 
alpha = opacity,
color = 'royalblue',
label = 'Full Season')
FSHome = plt.bar(index + bar_width,RangersFS2017Hpercenthome,bar_width, 
alpha = opacity,
color = 'navy',
label = 'Full Season Home Games')
FSAway = plt.bar(index + 2*bar_width,RangersFS2017Hpercentaway,bar_width, 
alpha = opacity,
color = 'cornflowerblue',
label = 'Full Season Away Games')
BHALL = plt.bar(index + 3.5*bar_width,RangersBH2017Hpercent,bar_width, 
alpha = opacity,
color = 'red',
label = 'During Hurricane')
BHHome = plt.bar(index + 4.5*bar_width,RangersBH2017Hpercenthome,bar_width, 
alpha = opacity,
color = 'firebrick',
label = 'Before Hurricane Home Games')
BHAway = plt.bar(index + 5.5*bar_width,RangersBH2017Hpercentaway,bar_width,
alpha = opacity,
color = 'indianred',
label = 'Before Hurricane Away Games')
AHALL = plt.bar(index + 7*bar_width,RangersAH2017Hpercent,bar_width, 
alpha = opacity,
color = 'cadetblue',
label = 'After Hurricane')
AHHome = plt.bar(index + 8*bar_width,RangersAH2017Hpercenthome,bar_width, 
alpha = opacity,
color = 'steelblue',
label = 'After Hurricane Home Games')
AHAway = plt.bar(index + 9*bar_width,RangersAH2017Hpercentaway,bar_width, 
alpha = opacity,
color = 'lightsteelblue',
label = 'After Hurricane Away Games')
DHALL = plt.bar(index + 10.5*bar_width,RangersDH2017Hpercent,bar_width, 
alpha = opacity,
color = 'tomato',
label = 'During Hurricane')
DHHome = plt.bar(index + 11.5*bar_width,RangersDH2017Hpercenthome,bar_width, 
alpha = opacity,
color = 'maroon',
label = 'During Hurricane Home Games')
DHAway = plt.bar(index + 12.5*bar_width,RangersDH2017Hpercentaway,bar_width, 
alpha = opacity,
color = 'lightcoral',
label = 'During Hurricane Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Hits to At Bats Ratio')
plt.title('Rangers 2017 Hits to At Bats Ratio by Segment of the Season')
plt.xticks([.05,.225,.4,.575],['Full Season','Before Hurricane','After Hurricane','During Hurricane'])
plt.legend(loc = 0,fontsize='xx-small',ncol = 3)
plt.tight_layout()
plt.show()
# Median Points Difference in games where Rangers were at home vs. away Full Season, Before Hurricane, After Hurricane, During Hurricane and full season both home and away
RangersFS2017Points_Diff = Rangers2017.loc[:,'Point_Diff'].median()
RangersBH2017Points_Diff = Rangers2017BH.loc[:,'Point_Diff'].median()
RangersAH2017Points_Diff = Rangers2017AH.loc[:,'Point_Diff'].median()
RangersDH2017Points_Diff = Rangers2017DH.loc[:,'Point_Diff'].median()
RangersFS2017Points_DiffHome = Rangers2017FShome.loc[:,'Point_Diff'].median()
RangersFS2017Points_DiffAway = Rangers2017FSaway.loc[:,'Point_Diff'].median()
RangersBH2017Points_DiffHome = Rangers2017BHhome.loc[:,'Point_Diff'].median()
RangersBH2017Points_DiffAway = Rangers2017BHaway.loc[:,'Point_Diff'].median()
RangersAH2017Points_DiffHome = Rangers2017AHhome.loc[:,'Point_Diff'].median()
RangersAH2017Points_DiffAway = Rangers2017AHaway.loc[:,'Point_Diff'].median()
RangersDH2017Points_DiffHome = Rangers2017DHhome.loc[:,'Point_Diff'].median()
RangersDH2017Points_DiffAway = Rangers2017DHaway.loc[:,'Point_Diff'].median()
print('Rangers Full Season Median Points Difference 2017: ',RangersFS2017Points_Diff)
print('Rangers Full Season Home Games Median Points Difference 2017: ',RangersFS2017Points_DiffHome)
print('Rangers Full Season Away Games Median Points Difference 2017: ',RangersFS2017Points_DiffAway)
print('Rangers Before Hurricane Median Points Difference 2017: ',RangersBH2017Points_Diff)
print('Rangers Before Hurricane Home Games Median Points Difference 2017: ',RangersBH2017Points_DiffHome)
print('Rangers Before Hurricane Away Games Points Difference 2017: ',RangersBH2017Points_DiffAway)
print('Rangers After Hurricane Median Points Difference 2017: ',RangersAH2017Points_Diff)
print('Rangers After Hurricane Home Games Median Points Difference 2017: ',RangersAH2017Points_DiffHome)
print('Rangers After Hurricane Away Games Median Points Difference 2017: ',RangersAH2017Points_DiffAway)
print('Rangers During Hurricane Median Points Difference 2017: ',RangersDH2017Points_Diff)
print('Rangers During Hurricane Home Games Median Points Difference 2017: ',RangersDH2017Points_DiffHome)
print('Rangers During Hurricane Away Games Median Points Difference 2017: ',RangersDH2017Points_DiffAway)
# Plotting the Win/Loss Ratios for the Rangers 2017 Season Compare Home vs. Away
n_groups = 1
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.05
opacity = 0.8
FSALL = plt.bar(index,RangersFS2017Points_Diff,bar_width, 
alpha = opacity,
color = 'royalblue',
label = 'Full Season')
FSHome = plt.bar(index + bar_width,RangersFS2017Points_DiffHome,bar_width, 
alpha = opacity,
color = 'navy',
label = 'Full Season Home Games')
FSAway = plt.bar(index + 2*bar_width,RangersFS2017Points_DiffAway,bar_width, 
alpha = opacity,
color = 'cornflowerblue',
label = 'Full Season Away Games')
BHALL = plt.bar(index + 3.5*bar_width,RangersBH2017Points_Diff,bar_width, 
alpha = opacity,
color = 'red',
label = 'During Hurricane')
BHHome = plt.bar(index + 4.5*bar_width,RangersBH2017Points_DiffHome,bar_width, 
alpha = opacity,
color = 'firebrick',
label = 'Before Hurricane Home Games')
BHAway = plt.bar(index + 5.5*bar_width,RangersBH2017Points_DiffAway,bar_width,
alpha = opacity,
color = 'indianred',
label = 'Before Hurricane Away Games')
AHALL = plt.bar(index + 7*bar_width,RangersAH2017Points_Diff,bar_width, 
alpha = opacity,
color = 'cadetblue',
label = 'After Hurricane')
AHHome = plt.bar(index + 8*bar_width,RangersAH2017Points_DiffHome,bar_width, 
alpha = opacity,
color = 'steelblue',
label = 'After Hurricane Home Games')
AHAway = plt.bar(index + 9*bar_width,RangersAH2017Points_DiffAway,bar_width, 
alpha = opacity,
color = 'lightsteelblue',
label = 'After Hurricane Away Games')
DHALL = plt.bar(index + 10.5*bar_width,RangersDH2017Points_Diff,bar_width, 
alpha = opacity,
color = 'tomato',
label = 'During Hurricane')
DHHome = plt.bar(index + 11.5*bar_width,RangersDH2017Points_DiffHome,bar_width, 
alpha = opacity,
color = 'maroon',
label = 'During Hurricane Home Games')
DHAway = plt.bar(index + 12.5*bar_width,RangersDH2017Points_DiffAway,bar_width, 
alpha = opacity,
color = 'lightcoral',
label = 'During Hurricane Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Median Points Differences')
plt.title('Rangers 2017 Median Points Differences by Segment of the Season')
plt.xticks([.05,.225,.4,.575],['Full Season','Before Hurricane','After Hurricane','During Hurricane'])
plt.legend(loc = 0,fontsize='x-small')
plt.tight_layout()
plt.show()
# Team Earned Run Average for the Rangers full season, Before Hurricane, After Hurricane, During Hurricane, then Home vs. away FS, BH, AH, DH
RangersFS2017teamERA = sum(Rangers2017['EarnedRunsbyTEX'])/len(Rangers2017['EarnedRunsbyTEX'])
RangersBH2017teamERA = sum(Rangers2017BH['EarnedRunsbyTEX'])/len(Rangers2017BH['EarnedRunsbyTEX'])
RangersAH2017teamERA = sum(Rangers2017AH['EarnedRunsbyTEX'])/len(Rangers2017AH['EarnedRunsbyTEX'])
RangersDH2017teamERA = sum(Rangers2017DH['EarnedRunsbyTEX'])/len(Rangers2017DH['EarnedRunsbyTEX'])
print('Rangers Full Season Team Earned Run Average 2017: ',RangersFS2017teamERA)
print('Rangers Before Hurricane Team Earned Run Average 2017: ',RangersBH2017teamERA)
print('Rangers After Hurricane Team Earned Run Average 2017: ',RangersAH2017teamERA)
print('Rangers During Hurricane Team Earned Run Average 2017: ',RangersDH2017teamERA)
RangersFS2017teamERAhome = sum(Rangers2017FShome['EarnedRunsbyTEX'])/len(Rangers2017FShome['EarnedRunsbyTEX'])
RangersBH2017teamERAhome = sum(Rangers2017BHhome['EarnedRunsbyTEX'])/len(Rangers2017BHhome['EarnedRunsbyTEX'])
RangersAH2017teamERAhome = sum(Rangers2017AHhome['EarnedRunsbyTEX'])/len(Rangers2017AHhome['EarnedRunsbyTEX'])
RangersDH2017teamERAhome = sum(Rangers2017DHhome['EarnedRunsbyTEX'])/len(Rangers2017DHhome['EarnedRunsbyTEX'])
print('Rangers Full Season Home Games Team Earned Run Average 2017: ',RangersFS2017teamERAhome)
print('Rangers Before Hurricane Home Games Team Earned Run Average 2017: ',RangersBH2017teamERAhome)
print('Rangers After Hurricane Home Games Team Earned Run Average 2017: ',RangersAH2017teamERAhome)
print('Rangers During Hurricane Home Games Team Earned Run Average 2017 : ',RangersDH2017teamERAhome)
RangersFS2017teamERAaway = sum(Rangers2017FSaway['EarnedRunsbyTEX'])/len(Rangers2017FSaway['EarnedRunsbyTEX'])
RangersBH2017teamERAaway = sum(Rangers2017BHaway['EarnedRunsbyTEX'])/len(Rangers2017BHaway['EarnedRunsbyTEX'])
RangersAH2017teamERAaway = sum(Rangers2017AHaway['EarnedRunsbyTEX'])/len(Rangers2017AHaway['EarnedRunsbyTEX'])
RangersDH2017teamERAaway = sum(Rangers2017DHaway['EarnedRunsbyTEX'])/len(Rangers2017DHaway['EarnedRunsbyTEX'])
print('Rangers Full Season Away Games Team Earned Run Average 2017: ',RangersFS2017teamERAaway)
print('Rangers Before Hurricane Away Games Team Earned Run Average 2017: ',RangersBH2017teamERAaway)
print('Rangers After Hurricane Away Games Team Earned Run Average 2017: ',RangersAH2017teamERAaway)
print('Rangers During Hurricane Away Games Team Earned Run Average 2017: ',RangersDH2017teamERAaway)
# Plotting team ERA by segment of the season
n_groups = 1
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.05
opacity = 0.8
FSALL = plt.bar(index,RangersFS2017teamERA,bar_width, 
alpha = opacity,
color = 'royalblue',
label = 'Full Season')
FSHome = plt.bar(index + bar_width,RangersFS2017teamERAhome,bar_width, 
alpha = opacity,
color = 'navy',
label = 'Full Season Home Games')
FSAway = plt.bar(index + 2*bar_width,RangersFS2017teamERAaway,bar_width, 
alpha = opacity,
color = 'cornflowerblue',
label = 'Full Season Away Games')
BHALL = plt.bar(index + 3.5*bar_width,RangersBH2017teamERA,bar_width, 
alpha = opacity,
color = 'red',
label = 'During Hurricane')
BHHome = plt.bar(index + 4.5*bar_width,RangersBH2017teamERAhome,bar_width, 
alpha = opacity,
color = 'firebrick',
label = 'Before Hurricane Home Games')
BHAway = plt.bar(index + 5.5*bar_width,RangersBH2017teamERAaway,bar_width,
alpha = opacity,
color = 'indianred',
label = 'Before Hurricane Away Games')
AHALL = plt.bar(index + 7*bar_width,RangersAH2017teamERA,bar_width, 
alpha = opacity,
color = 'cadetblue',
label = 'After Hurricane')
AHHome = plt.bar(index + 8*bar_width,RangersAH2017teamERAhome,bar_width, 
alpha = opacity,
color = 'steelblue',
label = 'After Hurricane Home Games')
AHAway = plt.bar(index + 9*bar_width,RangersAH2017teamERAaway,bar_width, 
alpha = opacity,
color = 'lightsteelblue',
label = 'After Hurricane Away Games')
DHALL = plt.bar(index + 10.5*bar_width,RangersDH2017teamERA,bar_width, 
alpha = opacity,
color = 'tomato',
label = 'During Hurricane')
DHHome = plt.bar(index + 11.5*bar_width,RangersDH2017teamERAhome,bar_width, 
alpha = opacity,
color = 'maroon',
label = 'During Hurricane Home Games')
DHAway = plt.bar(index + 12.5*bar_width,RangersDH2017teamERAaway,bar_width, 
alpha = opacity,
color = 'lightcoral',
label = 'During Hurricane Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Median Points Differences')
plt.title('Rangers 2017 Team ERA by Segment of the Season')
plt.xticks([.05,.225,.4,.575],['Full Season','Before Hurricane','After Hurricane','During Hurricane'])
plt.legend(loc = 0,fontsize='xx-small',ncol=3)
plt.tight_layout()
plt.show()

# Create a dataframe of only games the Marlins were playing and reset the index
Marlins2017 = pd.DataFrame(columns=MLBgames17.columns)
Marlins2017 = MLBgames17.loc[(MLBgames17['V_Team']=='MIA')|(MLBgames17['H_Team']=='MIA')] 
Marlins2017 = Marlins2017.reset_index(drop=True)
# Add columns to the Marlins dataframe for hits when the Marlins are visitors, hits when the Marlins are at home and hits by Marlins total.
Marlins2017['HitsbyMIAasV'] = pd.to_numeric(Marlins2017.apply(lambda row: row.V_Hits if row.V_Team == 'MIA' else 0,axis=1))
Marlins2017['HitsbyMIAasH'] = pd.to_numeric(Marlins2017.apply(lambda row: row.H_Hits if row.H_Team == 'MIA' else 0,axis=1))
Marlins2017['HitsbyMIA'] = Marlins2017['HitsbyMIAasV'] + Marlins2017['HitsbyMIAasH']
# Add columns to the Marlins dataframe for at bats when the Marlins are visitors, at bats when the Marlins are at home and at bats by Marlins total.
Marlins2017['ABbyMIAasV'] = pd.to_numeric(Marlins2017.apply(lambda row: row.V_AB if row.V_Team == 'MIA' else 0,axis=1))
Marlins2017['ABbyMIAasH'] = pd.to_numeric(Marlins2017.apply(lambda row: row.H_AB if row.H_Team == 'MIA' else 0,axis=1))
Marlins2017['ABbyMIA'] = Marlins2017['ABbyMIAasV'] + Marlins2017['ABbyMIAasH']
Marlins2017.head
# Add columns to the Marlins dataframe for at bats when the Marlins are visitors, at bats when the Marlins are at home and at bats by Marlins total.
Marlins2017['EarnedRunsbyMIAasV'] = pd.to_numeric(Marlins2017.apply(lambda row: row.V_TeamEarnedRuns if row.V_Team == 'MIA' else 0,axis=1))
Marlins2017['EarnedRunsbyMIAasH'] = pd.to_numeric(Marlins2017.apply(lambda row: row.H_TeamEarnedRuns if row.H_Team == 'MIA' else 0,axis=1))
Marlins2017['EarnedRunsbyMIA'] = Marlins2017['EarnedRunsbyMIAasV'] + Marlins2017['EarnedRunsbyMIAasH']
Marlins2017.head
# Converts score columns to numbers
Marlins2017['V_Score'] = pd.to_numeric(Marlins2017['V_Score'])
Marlins2017['H_Score'] = pd.to_numeric(Marlins2017['H_Score'])

# Code below adapted from optimumsportsperformance.com/blog/python-pivot-tables/
# This code creates a Point Difference column, sets conditions and choices for 
# the created Winner column which tells if the home or visitor is the winner, 
# sets conditions and choices to return the winning team abbreviation to the WTeam column,
# and a W or L to the WinLoss column on the basis of MIA being in the WTeam field for that row.
Marlins2017['Point_Diff'] =0
Marlins2017['Point_Diff'] = np.where((Marlins2017.H_Team == 'MIA'),Marlins2017['H_Score'] - Marlins2017['V_Score'],Marlins2017.Point_Diff)
Marlins2017['Point_Diff'] = np.where((Marlins2017.H_Team != 'MIA'),Marlins2017['V_Score'] - Marlins2017['H_Score'],Marlins2017.Point_Diff)
conditions = [(Marlins2017['H_Score'] > Marlins2017['V_Score']),(Marlins2017['H_Score'] < Marlins2017['V_Score'])]
choices = ['home','visitor']
Marlins2017['Winner'] = np.select(conditions,choices,default = 'null')
cond_for_winner = [(Marlins2017['Winner']=='home'),(Marlins2017['Winner']=='visitor')]
choices_for_winner = [Marlins2017['H_Team'],Marlins2017['V_Team']]
Marlins2017['WTeam'] = np.select(cond_for_winner,choices_for_winner,default='null')
Marlins2017['WinLoss'] = Marlins2017.apply(lambda row: 'W' if row.WTeam == 'MIA' else 'L',axis=1)
# Creates individual dataframes for Before Hurricane (games played prior to 9/4/2017), 
# During Hurricane (between 9/4-10/19/2017 based on the dates of FEMA disaster declarations), which includes the rest of the season. There is no AFTER data.
Marlins2017BH = Marlins2017.loc[(Marlins2017['Date']<'2017-09-04')]
Marlins2017DH = Marlins2017.loc[(Marlins2017['Date']>='2017-09-04')&(Marlins2017['Date']<'2017-10-20')]
# Creates dataframes for full season home, full season away, Before Hurricane home, Before Hurricane away, After Hurricane home, 
# After Hurricane away, During Hurricane home, and During Hurricane away
Marlins2017FShome = Marlins2017.loc[(Marlins2017['H_Team']=='MIA')]
Marlins2017FShome['Point_Diff'] = Marlins2017FShome['H_Score'] - Marlins2017FShome['V_Score']
Marlins2017FSaway = Marlins2017.loc[(Marlins2017['V_Team']=='MIA')]
Marlins2017FSaway['Point_Diff'] = Marlins2017FSaway['V_Score'] - Marlins2017FSaway['H_Score']
Marlins2017BHhome = Marlins2017FShome.loc[(Marlins2017FShome['Date']<'2017-09-04')]
Marlins2017BHhome['Point_Diff'] = Marlins2017BHhome['H_Score'] - Marlins2017BHhome['V_Score']
Marlins2017DHhome = Marlins2017FShome.loc[(Marlins2017FShome['Date']>='2017-09-04')&(Marlins2017FShome['Date']<'2017-10-20')]
Marlins2017DHhome['Point_Diff'] = Marlins2017DHhome['H_Score'] - Marlins2017DHhome['V_Score']
Marlins2017BHaway = Marlins2017FSaway.loc[(Marlins2017FSaway['Date']<'2017-09-04')]
Marlins2017BHaway['Point_Diff'] = Marlins2017BHaway['V_Score'] - Marlins2017BHaway['H_Score']
Marlins2017DHaway = Marlins2017FSaway.loc[(Marlins2017FSaway['Date']>='2017-09-04')&(Marlins2017FSaway['Date']<'2017-10-20')]
Marlins2017DHaway['Point_Diff'] = Marlins2017DHaway['V_Score'] - Marlins2017DHaway['H_Score']
# Win/Loss Records by Full Season, Before Hurricane, After Hurricane, During Hurricane.
MarlinsFullSeason2017 = Marlins2017.groupby(['WinLoss']).size()
MarlinsBefore_Hurricane2017 = Marlins2017BH.groupby(['WinLoss']).size()
MarlinsDuring_Hurricane2017 = Marlins2017DH.groupby(['WinLoss']).size()
print('Marlins 2017 data does not include after hurricane grouping because the season ended prior to end of FEMA declared dates.')
print('Marlins Full Season Win/Loss Records 2017: ', MarlinsFullSeason2017)
print('Marlins Before Hurricane Win/Loss Records 2017: ',MarlinsBefore_Hurricane2017)
print('Marlins During Hurricane Win/Loss Records 2017: ',MarlinsDuring_Hurricane2017)
MarlinsFullSeason2017 = np.array(MarlinsFullSeason2017)
MarlinsBefore_Hurricane2017 = np.array(MarlinsBefore_Hurricane2017)
MarlinsDuring_Hurricane2017 = np.array(MarlinsDuring_Hurricane2017)
n_groups = 2
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.2
opacity = 0.8
rects1 = plt.bar(index,MarlinsFullSeason2017,bar_width, 
alpha = opacity,
color = 'dimgray',
label = 'Full Season')
rects2 = plt.bar(index + bar_width,MarlinsBefore_Hurricane2017,bar_width, 
alpha = opacity,
color = 'teal',
label = 'Before Hurricane')
rects4 = plt.bar(index + 2*bar_width,MarlinsDuring_Hurricane2017,bar_width, 
alpha = opacity,
color = 'silver',
label = 'During Hurricane')
plt.xlabel('Segment of the Season')
plt.ylabel('Games')
plt.title('Marlins 2017 Win/loss Records by Segment of the Season')
plt.xticks(index + 1.5*bar_width,('Losses','Wins'))
plt.legend(loc = 0,fontsize='xx-small',ncol=3)
plt.tight_layout()
plt.show()
# Percentages for Full Season, Before Hurricane, After Hurricane, During Hurricane
MarlinsFSPercentWin2017 = Marlins2017.groupby(['WinLoss']).size()/len(Marlins2017.index)
MarlinsBHPercentWin2017 = Marlins2017BH.groupby(['WinLoss']).size()/len(Marlins2017BH.index)
MarlinsDHPercentWin2017 = Marlins2017DH.groupby(['WinLoss']).size()/len(Marlins2017DH.index)
print('Marlins Full Season Win/Loss Percentages 2017: ',MarlinsFSPercentWin2017)
print('Marlins Before Hurricane Win/Loss Percentages 2017: ',MarlinsBHPercentWin2017)
print('Marlins During Hurricane Win/Loss Percentages 2017: ',MarlinsDHPercentWin2017)
# Plotting the Win/Loss Ratios for the Marlins 2017 Season
n_groups = 2
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.2
opacity = 0.8
rects1 = plt.bar(index,MarlinsFSPercentWin2017,bar_width, 
alpha = opacity,
color = 'dimgray',
label = 'Full Season')
rects2 = plt.bar(index + bar_width,MarlinsBHPercentWin2017,bar_width, 
alpha = opacity,
color = 'teal',
label = 'Before Hurricane')
rects4 = plt.bar(index + 2*bar_width,MarlinsDHPercentWin2017,bar_width, 
alpha = opacity,
color = 'silver',
label = 'During Hurricane')
plt.xlabel('Segment of the Season')
plt.ylabel('Percentages')
plt.title('Marlins 2017 Win/loss Percentages by Segment of the Season')
plt.xticks(index + 1.5*bar_width,('Losses','Wins'))
plt.legend(loc = 0,fontsize='xx-small',ncol=3)
plt.tight_layout()
plt.show()
# Win/Loss Records for Home vs. Away for Full Season, Before Hurricane, After Hurricane, During Hurricane
MarlinsFullSeason2017Home = Marlins2017FShome.groupby(['WinLoss']).size()
MarlinsBefore_Hurricane2017Home = Marlins2017BHhome.groupby(['WinLoss']).size()
MarlinsDuring_Hurricane2017Home = Marlins2017DHhome.groupby(['WinLoss']).size()
print('Marlins Full Season Home Win/Loss Records 2017', MarlinsFullSeason2017Home)
print('Marlins Before Hurricane Home Win/Loss Records 2017',MarlinsBefore_Hurricane2017Home)
print('Marlins During Hurricane Home Win/Loss Records 2017',MarlinsDuring_Hurricane2017Home)

MarlinsFullSeason2017Away = Marlins2017FSaway.groupby(['WinLoss']).size()
MarlinsBefore_Hurricane2017Away = Marlins2017BHaway.groupby(['WinLoss']).size()
MarlinsDuring_Hurricane2017Away = Marlins2017DHaway.groupby(['WinLoss']).size()
print('Marlins Full Season AwayWin/Loss Records 2017', MarlinsFullSeason2017Away)
print('Marlins Before Hurricane Away Win/Loss Records 2017',MarlinsBefore_Hurricane2017Away)
print('Marlins During Hurricane Away Win/Loss Records 2017',MarlinsDuring_Hurricane2017Away)
# Percentages for home vs. away Full Season, Before Hurricane, After Hurricane, During Hurricane
MarlinsFSPercentWin2017home = Marlins2017FShome.groupby(['WinLoss']).size()/len(Marlins2017FShome.index)
MarlinsBHPercentWin2017home = Marlins2017BHhome.groupby(['WinLoss']).size()/len(Marlins2017BHhome.index)
MarlinsDHPercentWin2017home = Marlins2017DHhome.groupby(['WinLoss']).size()/len(Marlins2017DHhome.index)
print('Marlins Full Season Home Win/Loss Percentages',MarlinsFSPercentWin2017home)
print('Marlins Before Hurricane Home Win/Loss Percentages',MarlinsBHPercentWin2017home)
print('Marlins During Hurricane Home Win/Loss Percentages',MarlinsDHPercentWin2017home)
MarlinsFSPercentWin2017away = Marlins2017FSaway.groupby(['WinLoss']).size()/len(Marlins2017FSaway.index)
MarlinsBHPercentWin2017away = Marlins2017BHaway.groupby(['WinLoss']).size()/len(Marlins2017BHaway.index)
MarlinsDHPercentWin2017away = Marlins2017DHaway.groupby(['WinLoss']).size()/len(Marlins2017DHaway.index)
print('Marlins Full Season Away Win/Loss Percentages 2017',MarlinsFSPercentWin2017away)
print('Marlins Before Hurricane Away Win/Loss Percentages 2017',MarlinsBHPercentWin2017away)
print('Marlins During Hurricane Away Win/Loss Percentages 2017',MarlinsDHPercentWin2017away)
# Plotting the Win/Loss Ratios for the Marlins 2017 Season Compare Home vs. Away
n_groups = 2
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.1
opacity = 0.8
FSHome = plt.bar(index,MarlinsFSPercentWin2017home,bar_width, 
alpha = opacity,
color = 'dimgray',
label = 'Full Season Home Games')
FSAway = plt.bar(index + bar_width,MarlinsFSPercentWin2017away,bar_width, 
alpha = opacity,
color = 'gray',
label = 'Full Season Away Games')
BHHome = plt.bar(index + 2*bar_width,MarlinsBHPercentWin2017home,bar_width, 
alpha = opacity,
color = 'teal',
label = 'Before Hurricane Home Games')
BHAway = plt.bar(index + 3*bar_width,MarlinsBHPercentWin2017away,bar_width,
alpha = opacity,
color = 'paleturquoise',
label = 'Before Hurricane Away Games')
DHHome = plt.bar(index + 4*bar_width,MarlinsDHPercentWin2017home,bar_width, 
alpha = opacity,
color = 'black',
label = 'During Hurricane Home Games')
DHAway = plt.bar(index + 5*bar_width,MarlinsDHPercentWin2017away,bar_width, 
alpha = opacity,
color = 'silver',
label = 'During Hurricane Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Percentages')
plt.title('Marlins 2017 Win/loss Percentages by Segment of the Season and Home vs Away')
plt.xticks(index + 2*bar_width,('Losses','Wins'))
plt.legend(loc = 0,fontsize='x-small')
plt.tight_layout()
plt.show()
# Hits Records by Full Season, Before Hurricane, After Hurricane, During Hurricane
MarlinsFS2017Hits = sum(Marlins2017['HitsbyMIA'])
MarlinsBH2017Hits = sum(Marlins2017BH['HitsbyMIA'])
MarlinsDH2017Hits = sum(Marlins2017DH['HitsbyMIA'])
MarlinsFS2017Hitshome = sum(Marlins2017FShome['HitsbyMIA'])
MarlinsBH2017Hitshome = sum(Marlins2017BHhome['HitsbyMIA'])
MarlinsDH2017Hitshome = sum(Marlins2017DHhome['HitsbyMIA'])
MarlinsFS2017Hitsaway = sum(Marlins2017FSaway['HitsbyMIA'])
MarlinsBH2017Hitsaway = sum(Marlins2017BHaway['HitsbyMIA'])
MarlinsDH2017Hitsaway = sum(Marlins2017DHaway['HitsbyMIA'])
print('Marlins Full Season Hits 2017: ',MarlinsFS2017Hits)
print('Marlins Full Season Hits 2017 Home Games: ',MarlinsFS2017Hitshome)
print('Marlins Full Season Hits 2017 Away Games: ',MarlinsFS2017Hitsaway)
print('Marlins Before Hurricane Hits 2017: ',MarlinsBH2017Hits)
print('Marlins Before Hurricane Hits 2017 Away Games: ',MarlinsBH2017Hitshome)
print('Marlins Before Hurricane Hits 2017 Home Games: ',MarlinsBH2017Hitsaway)
print('Marlins During Hurricane Hits 2017: ',MarlinsDH2017Hits)
print('Marlins During Hurricane Hits 2017 Home Games: ',MarlinsDH2017Hitshome)
print('Marlins During Hurricane Hits 2017 Away Games: ',MarlinsDH2017Hitsaway)
# At Bats Records by Full Season, Before Hurricane, After Hurricane, During Hurricane
MarlinsFS2017AtBats = sum(Marlins2017['ABbyMIA'])
MarlinsBH2017AtBats = sum(Marlins2017BH['ABbyMIA'])
MarlinsDH2017AtBats = sum(Marlins2017DH['ABbyMIA'])
MarlinsFS2017AtBatshome = sum(Marlins2017FShome['ABbyMIA'])
MarlinsBH2017AtBatshome = sum(Marlins2017BHhome['ABbyMIA'])
MarlinsDH2017AtBatshome = sum(Marlins2017DHhome['ABbyMIA'])
MarlinsFS2017AtBatsaway = sum(Marlins2017FSaway['ABbyMIA'])
MarlinsBH2017AtBatsaway = sum(Marlins2017BHaway['ABbyMIA'])
MarlinsDH2017AtBatsaway = sum(Marlins2017DHaway['ABbyMIA'])
print('Marlins Full Season At Bats 2017: ',MarlinsFS2017AtBats)
print('Marlins Full Season At Bats 2017 Home Games: ',MarlinsFS2017AtBatshome)
print('Marlins Full Season At Bats 2017 Away Games: ',MarlinsFS2017AtBatsaway)
print('Marlins Before Hurricane At Bats 2017: ',MarlinsBH2017AtBats)
print('Marlins Before Hurricane At Bats 2017 Home Games: ',MarlinsBH2017AtBatshome)
print('Marlins Before Hurricane At Bats 2017 Away Games: ',MarlinsBH2017AtBatsaway)
print('Marlins During Hurricane At Bats 2017: ',MarlinsDH2017AtBats)
print('Marlins During Hurricane At Bats 2017 Home Games: ',MarlinsDH2017AtBatshome)
print('Marlins During Hurricane At Bats 2017 Away Games: ',MarlinsDH2017AtBatsaway)
# Percent of At Bats resulting in hits by Full Season, Before Hurricane, After Hurricane, During Hurricane
MarlinsFS2017Hpercent = MarlinsFS2017Hits/MarlinsFS2017AtBats
MarlinsBH2017Hpercent = MarlinsBH2017Hits/MarlinsBH2017AtBats
MarlinsDH2017Hpercent = MarlinsDH2017Hits/MarlinsDH2017AtBats
MarlinsFS2017Hpercenthome = MarlinsFS2017Hitshome/MarlinsFS2017AtBatshome
MarlinsBH2017Hpercenthome = MarlinsBH2017Hitshome/MarlinsBH2017AtBatshome
MarlinsDH2017Hpercenthome = MarlinsDH2017Hitshome/MarlinsDH2017AtBatshome
MarlinsFS2017Hpercentaway = MarlinsFS2017Hitsaway/MarlinsFS2017AtBatsaway
MarlinsBH2017Hpercentaway = MarlinsBH2017Hitsaway/MarlinsBH2017AtBatsaway
MarlinsDH2017Hpercentaway = MarlinsDH2017Hitsaway/MarlinsDH2017AtBatsaway
print('Marlins Full Season Percentage of At Bats resulting in Hits 2017: ',"{:.2%}".format(MarlinsFS2017Hpercent))
print('Marlins Full Season Percentage of At Bats resulting in Hits 2017 Home Games: ',"{:.2%}".format(MarlinsFS2017Hpercenthome))
print('Marlins Full Season Percentage of At Bats resulting in Hits 2017 Away Games: ',"{:.2%}".format(MarlinsFS2017Hpercentaway))
print('Marlins Before Hurricane Percentage of At Bats resulting in Hits 2017: ',"{:.2%}".format(MarlinsBH2017Hpercent))
print('Marlins Before Hurricane Percentage of At Bats resulting in Hits 2017 Home Games: ',"{:.2%}".format(MarlinsBH2017Hpercenthome))
print('Marlins Before Hurricane Percentage of At Bats resulting in Hits 2017 Away Games: ',"{:.2%}".format(MarlinsBH2017Hpercentaway))
print('Marlins During Hurricane Percentage of At Bats resulting in Hits 2017: ',"{:.2%}".format(MarlinsDH2017Hpercent))
print('Marlins During Hurricane Percentage of At Bats resulting in Hits 2017 Home Games: ',"{:.2%}".format(MarlinsDH2017Hpercenthome))
print('Marlins During Hurricane Percentage of At Bats resulting in Hits 2017 Away Games: ',"{:.2%}".format(MarlinsDH2017Hpercentaway))
# Create a CSV for At Bats resulting in Hits based on Full Season, Before Hurricane, After Hurricane, and During Hurricane 
row_list1 = [['Portion of Season','Home vs Away','Hits','At Bats','Percent of At Bats resulting in Hits'],
['Full Season','ALL',MarlinsFS2017Hits,MarlinsFS2017AtBats,"{:.2%}".format(MarlinsFS2017Hpercent)],
['Full Season','Home',MarlinsFS2017Hitshome,MarlinsFS2017AtBatshome,"{:.2%}".format(MarlinsFS2017Hpercenthome)],
['Full Season','Away',MarlinsFS2017Hitsaway,MarlinsFS2017AtBatsaway,"{:.2%}".format(MarlinsFS2017Hpercentaway)],
['Before Hurricane','ALL',MarlinsBH2017Hits,MarlinsBH2017AtBats,"{:.2%}".format(MarlinsBH2017Hpercent)],
['Before Hurricane','Home',MarlinsBH2017Hitshome,MarlinsBH2017AtBatshome,"{:.2%}".format(MarlinsBH2017Hpercenthome)],
['Before Hurricane','Away',MarlinsBH2017Hitsaway,MarlinsBH2017AtBatsaway,"{:.2%}".format(MarlinsBH2017Hpercentaway)],
['During Hurricane','ALL',MarlinsDH2017Hits,MarlinsDH2017AtBats,"{:.2%}".format(MarlinsDH2017Hpercent)],
['During Hurricane','Home',MarlinsDH2017Hits,MarlinsDH2017AtBatshome,"{:.2%}".format(MarlinsDH2017Hpercenthome)],
['During Hurricane','Away',MarlinsDH2017Hits,MarlinsDH2017AtBatsaway,"{:.2%}".format(MarlinsDH2017Hpercentaway)]]
with open ('Marlins-Hits-AtBats2017.csv','w',newline='') as file:
    writer = csv.writer(file)
    writer.writerows(row_list1) 
# Plotting Hits to At Bat Ratios by Segment of the season
n_groups = 1
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.05
opacity = 0.8
FSALL = plt.bar(index,MarlinsFS2017Hpercent,bar_width, 
alpha = opacity,
color = 'darkgray',
label = 'Full Season')
FSHome = plt.bar(index + bar_width,MarlinsFS2017Hpercenthome,bar_width, 
alpha = opacity,
color = 'dimgray',
label = 'Full Season Home Games')
FSAway = plt.bar(index + 2*bar_width,MarlinsFS2017Hpercentaway,bar_width, 
alpha = opacity,
color = 'gray',
label = 'Full Season Away Games')
BHALL = plt.bar(index + 3.5*bar_width,MarlinsBH2017Hpercent,bar_width, 
alpha = opacity,
color = 'mediumturquoise',
label = 'During Hurricane')
BHHome = plt.bar(index + 4.5*bar_width,MarlinsBH2017Hpercenthome,bar_width, 
alpha = opacity,
color = 'teal',
label = 'Before Hurricane Home Games')
BHAway = plt.bar(index + 5.5*bar_width,MarlinsBH2017Hpercentaway,bar_width,
alpha = opacity,
color = 'paleturquoise',
label = 'Before Hurricane Away Games')
DHALL = plt.bar(index + 7*bar_width,MarlinsDH2017Hpercent,bar_width, 
alpha = opacity,
color = 'slategray',
label = 'During Hurricane')
DHHome = plt.bar(index + 8*bar_width,MarlinsDH2017Hpercenthome,bar_width, 
alpha = opacity,
color = 'black',
label = 'During Hurricane Home Games')
DHAway = plt.bar(index + 9*bar_width,MarlinsDH2017Hpercentaway,bar_width, 
alpha = opacity,
color = 'silver',
label = 'During Hurricane Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Hits to At Bats Ratio')
plt.title('Marlins 2017 Hits to At Bats Ratio by Segment of the Season')
plt.xticks([.05,.225,.4],['Full Season','Before Hurricane','During Hurricane'])
plt.legend(loc = 0,fontsize='xx-small',ncol = 3)
plt.tight_layout()
plt.show()
# Median Points Difference in games where Marlins were at home vs. away Full Season, Before Hurricane, After Hurricane, During Hurricane and full season both home and away
MarlinsFS2017Points_Diff = Marlins2017.loc[:,'Point_Diff'].median()
MarlinsBH2017Points_Diff = Marlins2017BH.loc[:,'Point_Diff'].median()
MarlinsDH2017Points_Diff = Marlins2017DH.loc[:,'Point_Diff'].median()
MarlinsFS2017Points_DiffHome = Marlins2017FShome.loc[:,'Point_Diff'].median()
MarlinsFS2017Points_DiffAway = Marlins2017FSaway.loc[:,'Point_Diff'].median()
MarlinsBH2017Points_DiffHome = Marlins2017BHhome.loc[:,'Point_Diff'].median()
MarlinsBH2017Points_DiffAway = Marlins2017BHaway.loc[:,'Point_Diff'].median()
MarlinsDH2017Points_DiffHome = Marlins2017DHhome.loc[:,'Point_Diff'].median()
MarlinsDH2017Points_DiffAway = Marlins2017DHaway.loc[:,'Point_Diff'].median()
print('Marlins Full Season Median Points Difference 2017: ',MarlinsFS2017Points_Diff)
print('Marlins Full Season Home Games Median Points Difference 2017: ',MarlinsFS2017Points_DiffHome)
print('Marlins Full Season Away Games Median Points Difference 2017: ',MarlinsFS2017Points_DiffAway)
print('Marlins Before Hurricane Median Points Difference 2017: ',MarlinsBH2017Points_Diff)
print('Marlins Before Hurricane Home Games Median Points Difference 2017: ',MarlinsBH2017Points_DiffHome)
print('Marlins Before Hurricane Away Games Points Difference 2017: ',MarlinsBH2017Points_DiffAway)
print('Marlins During Hurricane Median Points Difference 2017: ',MarlinsDH2017Points_Diff)
print('Marlins During Hurricane Home Games Median Points Difference 2017: ',MarlinsDH2017Points_DiffHome)
print('Marlins During Hurricane Away Games Median Points Difference 2017: ',MarlinsDH2017Points_DiffAway)
# Plotting the Win/Loss Ratios for the Marlins 2017 Season Compare Home vs. Away
n_groups = 1
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.05
opacity = 0.8
FSALL = plt.bar(index,MarlinsFS2017Points_Diff,bar_width, 
alpha = opacity,
color = 'darkgray',
label = 'Full Season')
FSHome = plt.bar(index + bar_width,MarlinsFS2017Points_DiffHome,bar_width, 
alpha = opacity,
color = 'dimgray',
label = 'Full Season Home Games')
FSAway = plt.bar(index + 2*bar_width,MarlinsFS2017Points_DiffAway,bar_width, 
alpha = opacity,
color = 'gray',
label = 'Full Season Away Games')
BHALL = plt.bar(index + 3.5*bar_width,MarlinsBH2017Points_Diff,bar_width, 
alpha = opacity,
color = 'mediumturquoise',
label = 'During Hurricane')
BHHome = plt.bar(index + 4.5*bar_width,MarlinsBH2017Points_DiffHome,bar_width, 
alpha = opacity,
color = 'teal',
label = 'Before Hurricane Home Games')
BHAway = plt.bar(index + 5.5*bar_width,MarlinsBH2017Points_DiffAway,bar_width,
alpha = opacity,
color = 'paleturquoise',
label = 'Before Hurricane Away Games')
DHALL = plt.bar(index + 7*bar_width,MarlinsDH2017Points_Diff,bar_width, 
alpha = opacity,
color = 'slategray',
label = 'During Hurricane')
DHHome = plt.bar(index + 8*bar_width,MarlinsDH2017Points_DiffHome,bar_width, 
alpha = opacity,
color = 'black',
label = 'During Hurricane Home Games')
DHAway = plt.bar(index + 9*bar_width,MarlinsDH2017Points_DiffAway,bar_width, 
alpha = opacity,
color = 'silver',
label = 'During Hurricane Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Median Points Differences')
plt.title('Marlins 2017 Median Points Differences by Segment of the Season')
plt.xticks([.05,.225,.4],['Full Season','Before Hurricane','During Hurricane'])
plt.legend(loc = 0,fontsize='x-small')
plt.tight_layout()
plt.show()
# Team Earned Run Average for the Marlins full season, Before Hurricane, After Hurricane, During Hurricane, then Home vs. away FS, BH, AH, DH
MarlinsFS2017teamERA = sum(Marlins2017['EarnedRunsbyMIA'])/len(Marlins2017['EarnedRunsbyMIA'])
MarlinsBH2017teamERA = sum(Marlins2017BH['EarnedRunsbyMIA'])/len(Marlins2017BH['EarnedRunsbyMIA'])
MarlinsDH2017teamERA = sum(Marlins2017DH['EarnedRunsbyMIA'])/len(Marlins2017DH['EarnedRunsbyMIA'])
print('Marlins Full Season Team Earned Run Average 2017: ',MarlinsFS2017teamERA)
print('Marlins Before Hurricane Team Earned Run Average 2017: ',MarlinsBH2017teamERA)
print('Marlins During Hurricane Team Earned Run Average 2017: ',MarlinsDH2017teamERA)
MarlinsFS2017teamERAhome = sum(Marlins2017FShome['EarnedRunsbyMIA'])/len(Marlins2017FShome['EarnedRunsbyMIA'])
MarlinsBH2017teamERAhome = sum(Marlins2017BHhome['EarnedRunsbyMIA'])/len(Marlins2017BHhome['EarnedRunsbyMIA'])
MarlinsDH2017teamERAhome = sum(Marlins2017DHhome['EarnedRunsbyMIA'])/len(Marlins2017DHhome['EarnedRunsbyMIA'])
print('Marlins Full Season Home Games Team Earned Run Average 2017: ',MarlinsFS2017teamERAhome)
print('Marlins Before Hurricane Home Games Team Earned Run Average 2017: ',MarlinsBH2017teamERAhome)
print('Marlins During Hurricane Home Games Team Earned Run Average 2017 : ',MarlinsDH2017teamERAhome)
MarlinsFS2017teamERAaway = sum(Marlins2017FSaway['EarnedRunsbyMIA'])/len(Marlins2017FSaway['EarnedRunsbyMIA'])
MarlinsBH2017teamERAaway = sum(Marlins2017BHaway['EarnedRunsbyMIA'])/len(Marlins2017BHaway['EarnedRunsbyMIA'])
MarlinsDH2017teamERAaway = sum(Marlins2017DHaway['EarnedRunsbyMIA'])/len(Marlins2017DHaway['EarnedRunsbyMIA'])
print('Marlins Full Season Away Games Team Earned Run Average 2017: ',MarlinsFS2017teamERAaway)
print('Marlins Before Hurricane Away Games Team Earned Run Average 2017: ',MarlinsBH2017teamERAaway)
print('Marlins During Hurricane Away Games Team Earned Run Average 2017: ',MarlinsDH2017teamERAaway)
# Plotting team ERA by segment of the season
n_groups = 1
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.05
opacity = 0.8
FSALL = plt.bar(index,MarlinsFS2017teamERA,bar_width, 
alpha = opacity,
color = 'darkgray',
label = 'Full Season')
FSHome = plt.bar(index + bar_width,MarlinsFS2017teamERAhome,bar_width, 
alpha = opacity,
color = 'dimgray',
label = 'Full Season Home Games')
FSAway = plt.bar(index + 2*bar_width,MarlinsFS2017teamERAaway,bar_width, 
alpha = opacity,
color = 'gray',
label = 'Full Season Away Games')
BHALL = plt.bar(index + 3.5*bar_width,MarlinsBH2017teamERA,bar_width, 
alpha = opacity,
color = 'mediumturquoise',
label = 'During Hurricane')
BHHome = plt.bar(index + 4.5*bar_width,MarlinsBH2017teamERAhome,bar_width, 
alpha = opacity,
color = 'teal',
label = 'Before Hurricane Home Games')
BHAway = plt.bar(index + 5.5*bar_width,MarlinsBH2017teamERAaway,bar_width,
alpha = opacity,
color = 'paleturquoise',
label = 'Before Hurricane Away Games')
DHALL = plt.bar(index + 7*bar_width,MarlinsDH2017teamERA,bar_width, 
alpha = opacity,
color = 'slategray',
label = 'During Hurricane')
DHHome = plt.bar(index + 8*bar_width,MarlinsDH2017teamERAhome,bar_width, 
alpha = opacity,
color = 'black',
label = 'During Hurricane Home Games')
DHAway = plt.bar(index + 9*bar_width,MarlinsDH2017teamERAaway,bar_width, 
alpha = opacity,
color = 'silver',
label = 'During Hurricane Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Median Points Differences')
plt.title('Marlins 2017 Team ERA by Segment of the Season')
plt.xticks([.05,.225,.4],['Full Season','Before Hurricane','During Hurricane'])
plt.legend(loc = 0,fontsize='xx-small',ncol=3)
plt.tight_layout()
plt.show()
# Create a dataframe of only games the Astros were playing and reset the index
Astros2016 = pd.DataFrame(columns=MLBgames16.columns)
Astros2016 = MLBgames16.loc[(MLBgames16['V_Team']=='HOU')|(MLBgames16['H_Team']=='HOU')] 
Astros2016 = Astros2016.reset_index(drop=True)
# Add columns to the Astros dataframe for hits when the Astros are visitors, hits when the Astros are at home and hits by Astros total.
Astros2016['HitsbyHOUasV'] = pd.to_numeric(Astros2016.apply(lambda row: row.V_Hits if row.V_Team == 'HOU' else 0,axis=1))
Astros2016['HitsbyHOUasH'] = pd.to_numeric(Astros2016.apply(lambda row: row.H_Hits if row.H_Team == 'HOU' else 0,axis=1))
Astros2016['HitsbyHOU'] = Astros2016['HitsbyHOUasV'] + Astros2016['HitsbyHOUasH']
# Add columns to the Astros dataframe for at bats when the Astros are visitors, at bats when the Astros are at home and at bats by Astros total.
Astros2016['ABbyHOUasV'] = pd.to_numeric(Astros2016.apply(lambda row: row.V_AB if row.V_Team == 'HOU' else 0,axis=1))
Astros2016['ABbyHOUasH'] = pd.to_numeric(Astros2016.apply(lambda row: row.H_AB if row.H_Team == 'HOU' else 0,axis=1))
Astros2016['ABbyHOU'] = Astros2016['ABbyHOUasV'] + Astros2016['ABbyHOUasH']
Astros2016.head
# Add columns to the Astros dataframe for at bats when the Astros are visitors, at bats when the Astros are at home and at bats by Astros total.
Astros2016['EarnedRunsbyHOUasV'] = pd.to_numeric(Astros2016.apply(lambda row: row.V_TeamEarnedRuns if row.V_Team == 'HOU' else 0,axis=1))
Astros2016['EarnedRunsbyHOUasH'] = pd.to_numeric(Astros2016.apply(lambda row: row.H_TeamEarnedRuns if row.H_Team == 'HOU' else 0,axis=1))
Astros2016['EarnedRunsbyHOU'] = Astros2016['EarnedRunsbyHOUasV'] + Astros2016['EarnedRunsbyHOUasH']
Astros2016.head
# Converts score columns to numbers
Astros2016['V_Score'] = pd.to_numeric(Astros2016['V_Score'])
Astros2016['H_Score'] = pd.to_numeric(Astros2016['H_Score'])

# Code below adapted from optimumsportsperformance.com/blog/python-pivot-tables/
# This code creates a Point Difference column, sets conditions and choices for 
# the created Winner column which tells if the home or visitor is the winner, 
# sets conditions and choices to return the winning team abbreviation to the WTeam column,
# and a W or L to the WinLoss column on the basis of HOU being in the WTeam field for that row.
Astros2016['Point_Diff'] =0
Astros2016['Point_Diff'] = np.where((Astros2016.H_Team == 'HOU'),Astros2016['H_Score'] - Astros2016['V_Score'],Astros2016.Point_Diff)
Astros2016['Point_Diff'] = np.where((Astros2016.H_Team != 'HOU'),Astros2016['V_Score'] - Astros2016['H_Score'],Astros2016.Point_Diff)
conditions = [(Astros2016['H_Score'] > Astros2016['V_Score']),(Astros2016['H_Score'] < Astros2016['V_Score'])]
choices = ['home','visitor']
Astros2016['Winner'] = np.select(conditions,choices,default = 'null')
cond_for_winner = [(Astros2016['Winner']=='home'),(Astros2016['Winner']=='visitor')]
choices_for_winner = [Astros2016['H_Team'],Astros2016['V_Team']]
Astros2016['WTeam'] = np.select(cond_for_winner,choices_for_winner,default='null')
Astros2016['WinLoss'] = Astros2016.apply(lambda row: 'W' if row.WTeam == 'HOU' else 'L',axis=1)
# Creates individual dataframes for Before Floods (games played prior to 4/17/2016), 
# During Floods (between 4/17-6/25/2016 based on the dates of FEMA disaster declarations),
# After Floods (games played from 6/26/2016 to the end of the regular season.)
Astros2016BF = Astros2016.loc[(Astros2016['Date']<'2016-04-17')]
Astros2016AF = Astros2016.loc[(Astros2016['Date']>='2016-06-26')]
Astros2016DF = Astros2016.loc[(Astros2016['Date']>='2016-04-17')&(Astros2016['Date']<'2016-06-26')]
# Creates dataframes for full season home, full season away, Before Floods home, Before Floods away, After Floods home, 
# After Floods away, During Floods home, and During Floods away
Astros2016FShome = Astros2016.loc[(Astros2016['H_Team']=='HOU')]
Astros2016FShome['Point_Diff'] = Astros2016FShome['H_Score'] - Astros2016FShome['V_Score']
Astros2016FSaway = Astros2016.loc[(Astros2016['V_Team']=='HOU')]
Astros2016FSaway['Point_Diff'] = Astros2016FSaway['V_Score'] - Astros2016FSaway['H_Score']
Astros2016BFhome = Astros2016FShome.loc[(Astros2016FShome['Date']<'2016-04-17')]
Astros2016BFhome['Point_Diff'] = Astros2016BFhome['H_Score'] - Astros2016BFhome['V_Score']
Astros2016AFhome = Astros2016FShome.loc[(Astros2016FShome['Date']>='2016-06-26')]
Astros2016AFhome['Point_Diff'] = Astros2016AFhome['H_Score'] - Astros2016AFhome['V_Score']
Astros2016DFhome = Astros2016FShome.loc[(Astros2016FShome['Date']>='2016-04-17')&(Astros2016FShome['Date']<'2016-06-26')]
Astros2016DFhome['Point_Diff'] = Astros2016DFhome['H_Score'] - Astros2016DFhome['V_Score']
Astros2016BFaway = Astros2016FSaway.loc[(Astros2016FSaway['Date']<'2016-04-17')]
Astros2016BFaway['Point_Diff'] = Astros2016BFaway['V_Score'] - Astros2016BFaway['H_Score']
Astros2016AFaway = Astros2016FSaway.loc[(Astros2016FSaway['Date']>='2016-06-26')]
Astros2016AFaway['Point_Diff'] = Astros2016AFaway['V_Score'] - Astros2016AFaway['H_Score']
Astros2016DFaway = Astros2016FSaway.loc[(Astros2016FSaway['Date']>='2016-04-17')&(Astros2016FSaway['Date']<'2016-06-26')]
Astros2016DFaway['Point_Diff'] = Astros2016DFaway['V_Score'] - Astros2016DFaway['H_Score']
# Win/Loss Records by Full Season, Before Floods, After Floods, During Floods.
print('In 2016, Houston had back to back flood events resulting in 2 FEMA declared disasters. There was a period of 3 weeks between the two flood events and we have grouped them together.')
AstrosFullSeason2016 = Astros2016.groupby(['WinLoss']).size()
AstrosBefore_Floods2016 = Astros2016BF.groupby(['WinLoss']).size()
AstrosAfter_Floods2016 = Astros2016AF.groupby(['WinLoss']).size()
AstrosDuring_Floods2016 = Astros2016DF.groupby(['WinLoss']).size()
print('Astros Full Season Win/Loss Records 2016: ', AstrosFullSeason2016)
print('Astros Before Floods Win/Loss Records 2016: ',AstrosBefore_Floods2016)
print('Astros After Floods Win/Loss Records 2016:',AstrosAfter_Floods2016)
print('Astros During Floods Win/Loss Records 2016: ',AstrosDuring_Floods2016)
AstrosFullSeason2016 = np.array(AstrosFullSeason2016)
AstrosBefore_Floods2016 = np.array(AstrosBefore_Floods2016)
AstrosAfter_Floods2016 = np.array(AstrosAfter_Floods2016)
AstrosDuring_Floods2016 = np.array(AstrosDuring_Floods2016)
n_groups = 2
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.2
opacity = 0.8
rects1 = plt.bar(index,AstrosFullSeason2016,bar_width, 
alpha = opacity,
color = 'navy',
label = 'Full Season')
rects2 = plt.bar(index + bar_width,AstrosBefore_Floods2016,bar_width, 
alpha = opacity,
color = 'darkorange',
label = 'Before Floods')
rects3 = plt.bar(index + 2*bar_width,AstrosAfter_Floods2016,bar_width, 
alpha = opacity,
color = 'steelblue',
label = 'After Floods')
rects4 = plt.bar(index + 3*bar_width,AstrosDuring_Floods2016,bar_width, 
alpha = opacity,
color = 'lightsalmon',
label = 'During Floods')
plt.xlabel('Segment of the Season')
plt.ylabel('Games')
plt.title('Astros 2016 Win/loss Records by Segment of the Season')
plt.xticks(index + 1.5*bar_width,('Losses','Wins'))
plt.legend(loc = 0,fontsize='xx-small',ncol=3)
plt.tight_layout()
plt.show()

# Percentages for Full Season, Before Floods, After Floods, During Floods
AstrosFSPercentWin2016 = Astros2016.groupby(['WinLoss']).size()/len(Astros2016.index)
AstrosBFPercentWin2016 = Astros2016BF.groupby(['WinLoss']).size()/len(Astros2016BF.index)
AstrosAFPercentWin2016 = Astros2016AF.groupby(['WinLoss']).size()/len(Astros2016AF.index)
AstrosDFPercentWin2016 = Astros2016DF.groupby(['WinLoss']).size()/len(Astros2016DF.index)
print('Astros Full Season Win/Loss Percentages 2016: ',AstrosFSPercentWin2016)
print('Astros Before Floods Win/Loss Percentages 2016: ',AstrosBFPercentWin2016)
print('Astros After Floods Win/Loss Percentages 2016: ',AstrosAFPercentWin2016)
print('Astros During Floods Win/Loss Percentages 2016: ',AstrosDFPercentWin2016)
# Plotting the Win/Loss Ratios for the Astros 2016 Season
n_groups = 2
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.2
opacity = 0.8
rects1 = plt.bar(index,AstrosFSPercentWin2016,bar_width, 
alpha = opacity,
color = 'navy',
label = 'Full Season')
rects2 = plt.bar(index + bar_width,AstrosBFPercentWin2016,bar_width, 
alpha = opacity,
color = 'darkorange',
label = 'Before Floods')
rects3 = plt.bar(index + 2*bar_width,AstrosAFPercentWin2016,bar_width, 
alpha = opacity,
color = 'steelblue',
label = 'After Floods')

rects4 = plt.bar(index + 3*bar_width,AstrosDFPercentWin2016,bar_width, 
alpha = opacity,
color = 'lightsalmon',
label = 'During Floods')
plt.xlabel('Segment of the Season')
plt.ylabel('Percentages')
plt.title('Astros 2016 Win/loss Percentages by Segment of the Season')
plt.xticks(index + 1.5*bar_width,('Losses','Wins'))
plt.legend(loc = 0,fontsize='xx-small',ncol=3)
plt.tight_layout()
plt.show()
# Win/Loss Records for Home vs. Away for Full Season, Before Floods, After Floods, During Floods
AstrosFullSeason2016Home = Astros2016FShome.groupby(['WinLoss']).size()
AstrosBefore_Floods2016Home = Astros2016BFhome.groupby(['WinLoss']).size()
AstrosAfter_Floods2016Home = Astros2016AFhome.groupby(['WinLoss']).size()
AstrosDuring_Floods2016Home = Astros2016DFhome.groupby(['WinLoss']).size()
print('Astros Full Season Home Win/Loss Records 2016', AstrosFullSeason2016Home)
print('Astros Before Floods Home Win/Loss Records 2016',AstrosBefore_Floods2016Home)
print('Astros After Floods Home Win/Loss Records 2016',AstrosAfter_Floods2016Home)
print('Astros During Floods Home Win/Loss Records 2016',AstrosDuring_Floods2016Home)
AstrosFullSeason2016Away = Astros2016FSaway.groupby(['WinLoss']).size()
AstrosBefore_Floods2016Away = Astros2016BFaway.groupby(['WinLoss']).size()
AstrosAfter_Floods2016Away = Astros2016AFaway.groupby(['WinLoss']).size()
AstrosDuring_Floods2016Away = Astros2016DFaway.groupby(['WinLoss']).size()
print('Astros Full Season AwayWin/Loss Records 2016', AstrosFullSeason2016Away)
print('Astros Before Floods Away Win/Loss Records 2016',AstrosBefore_Floods2016Away)
print('Astros After Floods Away Win/Loss Records 2016',AstrosAfter_Floods2016Away)
print('Astros During Floods Away Win/Loss Records 2016',AstrosDuring_Floods2016Away)

# Percentages for home vs. away Full Season, Before Floods, After Floods, During Floods
AstrosFSPercentWin2016home = Astros2016FShome.groupby(['WinLoss']).size()/len(Astros2016FShome.index)
AstrosBFPercentWin2016home = Astros2016BFhome.groupby(['WinLoss']).size()/len(Astros2016BFhome.index)
AstrosAFPercentWin2016home = Astros2016AFhome.groupby(['WinLoss']).size()/len(Astros2016AFhome.index)
AstrosDFPercentWin2016home = Astros2016DFhome.groupby(['WinLoss']).size()/len(Astros2016DFhome.index)
print('Astros Full Season Home Win/Loss Percentages',AstrosFSPercentWin2016home)
print('Astros Before Floods Home Win/Loss Percentages',AstrosBFPercentWin2016home)
print('Astros After Floods Home Win/Loss Percentages',AstrosAFPercentWin2016home)
print('Astros During Floods Home Win/Loss Percentages',AstrosDFPercentWin2016home)
AstrosFSPercentWin2016away = Astros2016FSaway.groupby(['WinLoss']).size()/len(Astros2016FSaway.index)
AstrosBFPercentWin2016away = Astros2016BFaway.groupby(['WinLoss']).size()/len(Astros2016BFaway.index)
AstrosAFPercentWin2016away = Astros2016AFaway.groupby(['WinLoss']).size()/len(Astros2016AFaway.index)
AstrosDFPercentWin2016away = Astros2016DFaway.groupby(['WinLoss']).size()/len(Astros2016DFaway.index)
print('Astros Full Season Away Win/Loss Percentages 2016',AstrosFSPercentWin2016away)
print('Astros Before Floods Away Win/Loss Percentages 2016',AstrosBFPercentWin2016away)
print('Astros After Floods Away Win/Loss Percentages 2016',AstrosAFPercentWin2016away)
print('Astros During Floods Away Win/Loss Percentages 2016',AstrosDFPercentWin2016away)
# Plotting the Win/Loss Ratios for the Astros 2016 Season Compare Home vs. Away
n_groups = 2
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.1
opacity = 0.8
FSHome = plt.bar(index,AstrosFSPercentWin2016home,bar_width, 
alpha = opacity,
color = 'navy',
label = 'Full Season Home Games')
FSAway = plt.bar(index + bar_width,AstrosFSPercentWin2016away,bar_width, 
alpha = opacity,
color = 'cornflowerblue',
label = 'Full Season Away Games')
BFHome = plt.bar(index + 2*bar_width,AstrosBFPercentWin2016home,bar_width, 
alpha = opacity,
color = 'darkorange',
label = 'Before Floods Home Games')
BFAway = plt.bar(index + 3*bar_width,AstrosBFPercentWin2016away,bar_width,
alpha = opacity,
color = 'moccasin',
label = 'Before Floods Away Games')
AFHome = plt.bar(index + 4*bar_width,AstrosAFPercentWin2016home,bar_width, 
alpha = opacity,
color = 'steelblue',
label = 'After Floods Home Games')
AFAway = plt.bar(index + 5*bar_width,AstrosAFPercentWin2016away,bar_width, 
alpha = opacity,
color = 'lightsteelblue',
label = 'After Floods Away Games')
DFHome = plt.bar(index + 6*bar_width,AstrosDFPercentWin2016home,bar_width, 
alpha = opacity,
color = 'darksalmon',
label = 'During Floods Home Games')
DFAway = plt.bar(index + 7*bar_width,AstrosDFPercentWin2016away,bar_width, 
alpha = opacity,
color = 'lightsalmon',
label = 'During Floods Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Percentages')
plt.title('Astros 2016 Win/loss Percentages by Segment of the Season and Home vs Away')
plt.xticks(index + 2*bar_width,('Losses','Wins'))
plt.legend(loc = 0,fontsize='x-small')
plt.tight_layout()
plt.show()
# Hits Records by Full Season, Before Floods, After Floods, During Floods
AstrosFS2016Hits = sum(Astros2016['HitsbyHOU'])
AstrosBF2016Hits = sum(Astros2016BF['HitsbyHOU'])
AstrosAF2016Hits = sum(Astros2016AF['HitsbyHOU'])
AstrosDF2016Hits = sum(Astros2016DF['HitsbyHOU'])
AstrosFS2016Hitshome = sum(Astros2016FShome['HitsbyHOU'])
AstrosBF2016Hitshome = sum(Astros2016BFhome['HitsbyHOU'])
AstrosAF2016Hitshome = sum(Astros2016AFhome['HitsbyHOU'])
AstrosDF2016Hitshome = sum(Astros2016DFhome['HitsbyHOU'])
AstrosFS2016Hitsaway = sum(Astros2016FSaway['HitsbyHOU'])
AstrosBF2016Hitsaway = sum(Astros2016BFaway['HitsbyHOU'])
AstrosAF2016Hitsaway = sum(Astros2016AFaway['HitsbyHOU'])
AstrosDF2016Hitsaway = sum(Astros2016DFaway['HitsbyHOU'])
print('Astros Full Season Hits 2016: ',AstrosFS2016Hits)
print('Astros Full Season Hits 2016 Home Games: ',AstrosFS2016Hitshome)
print('Astros Full Season Hits 2016 Away Games: ',AstrosFS2016Hitsaway)
print('Astros Before Floods Hits 2016: ',AstrosBF2016Hits)
print('Astros Before Floods Hits 2016 Away Games: ',AstrosBF2016Hitshome)
print('Astros Before Floods Hits 2016 Home Games: ',AstrosBF2016Hitsaway)
print('Astros After Floods Hits 2016: ',AstrosAF2016Hits)
print('Astros After Floods Hits 2016 Home Games: ',AstrosAF2016Hitshome)
print('Astros After Floods Hits 2016 Away Games: ',AstrosAF2016Hitsaway)
print('Astros During Floods Hits 2016: ',AstrosDF2016Hits)
print('Astros During Floods Hits 2016 Home Games: ',AstrosDF2016Hitshome)
print('Astros During Floods Hits 2016 Away Games: ',AstrosDF2016Hitsaway)
# At Bats Records by Full Season, Before Floods, After Floods, During Floods
AstrosFS2016AtBats = sum(Astros2016['ABbyHOU'])
AstrosBF2016AtBats = sum(Astros2016BF['ABbyHOU'])
AstrosAF2016AtBats = sum(Astros2016AF['ABbyHOU'])
AstrosDF2016AtBats = sum(Astros2016DF['ABbyHOU'])
AstrosFS2016AtBatshome = sum(Astros2016FShome['ABbyHOU'])
AstrosBF2016AtBatshome = sum(Astros2016BFhome['ABbyHOU'])
AstrosAF2016AtBatshome = sum(Astros2016AFhome['ABbyHOU'])
AstrosDF2016AtBatshome = sum(Astros2016DFhome['ABbyHOU'])
AstrosFS2016AtBatsaway = sum(Astros2016FSaway['ABbyHOU'])
AstrosBF2016AtBatsaway = sum(Astros2016BFaway['ABbyHOU'])
AstrosAF2016AtBatsaway = sum(Astros2016AFaway['ABbyHOU'])
AstrosDF2016AtBatsaway = sum(Astros2016DFaway['ABbyHOU'])
print('Astros Full Season At Bats 2016: ',AstrosFS2016AtBats)
print('Astros Full Season At Bats 2016 Home Games: ',AstrosFS2016AtBatshome)
print('Astros Full Season At Bats 2016 Away Games: ',AstrosFS2016AtBatsaway)
print('Astros Before Floods At Bats 2016: ',AstrosBF2016AtBats)
print('Astros Before Floods At Bats 2016 Home Games: ',AstrosBF2016AtBatshome)
print('Astros Before Floods At Bats 2016 Away Games: ',AstrosBF2016AtBatsaway)
print('Astros After Floods At Bats 2016: ',AstrosAF2016AtBats)
print('Astros After Floods At Bats 2016 Home Games: ',AstrosAF2016AtBatshome)
print('Astros After Floods At Bats 2016 Away games: ',AstrosAF2016AtBatsaway)
print('Astros During Floods At Bats 2016: ',AstrosDF2016AtBats)
print('Astros During Floods At Bats 2016 Home Games: ',AstrosDF2016AtBatshome)
print('Astros During Floods At Bats 2016 Away Games: ',AstrosDF2016AtBatsaway)
# Percent of At Bats resulting in hits by Full Season, Before Floods, After Floods, During Floods
AstrosFS2016Hpercent = AstrosFS2016Hits/AstrosFS2016AtBats
AstrosBF2016Hpercent = AstrosBF2016Hits/AstrosBF2016AtBats
AstrosAF2016Hpercent = AstrosAF2016Hits/AstrosAF2016AtBats
AstrosDF2016Hpercent = AstrosDF2016Hits/AstrosDF2016AtBats
AstrosFS2016Hpercenthome = AstrosFS2016Hitshome/AstrosFS2016AtBatshome
AstrosBF2016Hpercenthome = AstrosBF2016Hitshome/AstrosBF2016AtBatshome
AstrosAF2016Hpercenthome = AstrosAF2016Hitshome/AstrosAF2016AtBatshome
AstrosDF2016Hpercenthome = AstrosDF2016Hitshome/AstrosDF2016AtBatshome
AstrosFS2016Hpercentaway = AstrosFS2016Hitsaway/AstrosFS2016AtBatsaway
AstrosBF2016Hpercentaway = AstrosBF2016Hitsaway/AstrosBF2016AtBatsaway
AstrosAF2016Hpercentaway = AstrosAF2016Hitsaway/AstrosAF2016AtBatsaway
AstrosDF2016Hpercentaway = AstrosDF2016Hitsaway/AstrosDF2016AtBatsaway
print('Astros Full Season Percentage of At Bats resulting in Hits 2016: ',"{:.2%}".format(AstrosFS2016Hpercent))
print('Astros Full Season Percentage of At Bats resulting in Hits 2016 Home Games: ',"{:.2%}".format(AstrosFS2016Hpercenthome))
print('Astros Full Season Percentage of At Bats resulting in Hits 2016 Away Games: ',"{:.2%}".format(AstrosFS2016Hpercentaway))
print('Astros Before Floods Percentage of At Bats resulting in Hits 2016: ',"{:.2%}".format(AstrosBF2016Hpercent))
print('Astros Before Floods Percentage of At Bats resulting in Hits 2016 Home Games: ',"{:.2%}".format(AstrosBF2016Hpercenthome))
print('Astros Before Floods Percentage of At Bats resulting in Hits 2016 Away Games: ',"{:.2%}".format(AstrosBF2016Hpercentaway))
print('Astros After Floods Percentage of At Bats resulting in Hits 2016: ',"{:.2%}".format(AstrosAF2016Hpercent))
print('Astros After Floods Percentage of At Bats resulting in Hits 2016 Home Games: ',"{:.2%}".format(AstrosAF2016Hpercenthome))
print('Astros After Floods Percentage of At Bats resulting in Hits 2016 Away Games: ',"{:.2%}".format(AstrosAF2016Hpercentaway))
print('Astros During Floods Percentage of At Bats resulting in Hits 2016: ',"{:.2%}".format(AstrosDF2016Hpercent))
print('Astros During Floods Percentage of At Bats resulting in Hits 2016 Home Games: ',"{:.2%}".format(AstrosDF2016Hpercenthome))
print('Astros During Floods Percentage of At Bats resulting in Hits 2016 Away Games: ',"{:.2%}".format(AstrosDF2016Hpercentaway))
# Create a CSV for At Bats resulting in Hits based on Full Season, Before Floods, After Floods, and During Floods 
row_list1 = [['Portion of Season','Home vs Away','Hits','At Bats','Percent of At Bats resulting in Hits'],
['Full Season','ALL',AstrosFS2016Hits,AstrosFS2016AtBats,"{:.2%}".format(AstrosFS2016Hpercent)],
['Full Season','Home',AstrosFS2016Hitshome,AstrosFS2016AtBatshome,"{:.2%}".format(AstrosFS2016Hpercenthome)],
['Full Season','Away',AstrosFS2016Hitsaway,AstrosFS2016AtBatsaway,"{:.2%}".format(AstrosFS2016Hpercentaway)],
['Before Floods','ALL',AstrosBF2016Hits,AstrosBF2016AtBats,"{:.2%}".format(AstrosBF2016Hpercent)],
['Before Floods','Home',AstrosBF2016Hitshome,AstrosBF2016AtBatshome,"{:.2%}".format(AstrosBF2016Hpercenthome)],
['Before Floods','Away',AstrosBF2016Hitsaway,AstrosBF2016AtBatsaway,"{:.2%}".format(AstrosBF2016Hpercentaway)],
['After Floods','All',AstrosAF2016Hits,AstrosAF2016AtBats,"{:.2%}".format(AstrosAF2016Hpercent)],
['After Floods','Home',AstrosAF2016Hitshome,AstrosAF2016AtBatshome,"{:.2%}".format(AstrosAF2016Hpercenthome)],
['After Floods','Away',AstrosAF2016Hitsaway,AstrosAF2016AtBatsaway,"{:.2%}".format(AstrosAF2016Hpercentaway)],
['During Floods','ALL',AstrosDF2016Hits,AstrosDF2016AtBats,"{:.2%}".format(AstrosDF2016Hpercent)],
['During Floods','Home',AstrosDF2016Hits,AstrosDF2016AtBatshome,"{:.2%}".format(AstrosDF2016Hpercenthome)],
['During Floods','Away',AstrosDF2016Hits,AstrosDF2016AtBatsaway,"{:.2%}".format(AstrosDF2016Hpercentaway)]]
with open ('Astros-Hits-AtBats2016.csv','w',newline='') as file:
    writer = csv.writer(file)
    writer.writerows(row_list1) 
# Plotting Hits to At Bat Ratios by Segment of the season
n_groups = 1
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.05
opacity = 0.8
FSALL = plt.bar(index,AstrosFS2016Hpercent,bar_width, 
alpha = opacity,
color = 'royalblue',
label = 'Full Season')
FSHome = plt.bar(index + bar_width,AstrosFS2016Hpercenthome,bar_width, 
alpha = opacity,
color = 'navy',
label = 'Full Season Home Games')
FSAway = plt.bar(index + 2*bar_width,AstrosFS2016Hpercentaway,bar_width, 
alpha = opacity,
color = 'cornflowerblue',
label = 'Full Season Away Games')
BFALL = plt.bar(index + 3.5*bar_width,AstrosBF2016Hpercent,bar_width, 
alpha = opacity,
color = 'orange',
label = 'During Floods')
BFHome = plt.bar(index + 4.5*bar_width,AstrosBF2016Hpercenthome,bar_width, 
alpha = opacity,
color = 'darkorange',
label = 'Before Floods Home Games')
BFAway = plt.bar(index + 5.5*bar_width,AstrosBF2016Hpercentaway,bar_width,
alpha = opacity,
color = 'moccasin',
label = 'Before Floods Away Games')
AFALL = plt.bar(index + 7*bar_width,AstrosAF2016Hpercent,bar_width, 
alpha = opacity,
color = 'cadetblue',
label = 'After Floods')
AFHome = plt.bar(index + 8*bar_width,AstrosAF2016Hpercenthome,bar_width, 
alpha = opacity,
color = 'steelblue',
label = 'After Floods Home Games')
AFAway = plt.bar(index + 9*bar_width,AstrosAF2016Hpercentaway,bar_width, 
alpha = opacity,
color = 'lightsteelblue',
label = 'After Floods Away Games')
DFALL = plt.bar(index + 10.5*bar_width,AstrosDF2016Hpercent,bar_width, 
alpha = opacity,
color = 'salmon',
label = 'During Floods')
DFHome = plt.bar(index + 11.5*bar_width,AstrosDF2016Hpercenthome,bar_width, 
alpha = opacity,
color = 'darksalmon',
label = 'During Floods Home Games')
DFAway = plt.bar(index + 12.5*bar_width,AstrosDF2016Hpercentaway,bar_width, 
alpha = opacity,
color = 'lightsalmon',
label = 'During Floods Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Hits to At Bats Ratio')
plt.title('Astros 2016 Hits to At Bats Ratio by Segment of the Season')
plt.xticks([.05,.225,.4,.575],['Full Season','Before Floods','After Floods','During Floods'])
plt.legend(loc = 0,fontsize='xx-small',ncol = 3)
plt.tight_layout()
plt.show()
# Median Points Difference in games where Astros were at home vs. away Full Season, Before Floods, After Floods, During Floods and full season both home and away
AstrosFS2016Points_Diff = Astros2016.loc[:,'Point_Diff'].median()
AstrosBF2016Points_Diff = Astros2016BF.loc[:,'Point_Diff'].median()
AstrosAF2016Points_Diff = Astros2016AF.loc[:,'Point_Diff'].median()
AstrosDF2016Points_Diff = Astros2016DF.loc[:,'Point_Diff'].median()
AstrosFS2016Points_DiffHome = Astros2016FShome.loc[:,'Point_Diff'].median()
AstrosFS2016Points_DiffAway = Astros2016FSaway.loc[:,'Point_Diff'].median()
AstrosBF2016Points_DiffHome = Astros2016BFhome.loc[:,'Point_Diff'].median()
AstrosBF2016Points_DiffAway = Astros2016BFaway.loc[:,'Point_Diff'].median()
AstrosAF2016Points_DiffHome = Astros2016AFhome.loc[:,'Point_Diff'].median()
AstrosAF2016Points_DiffAway = Astros2016AFaway.loc[:,'Point_Diff'].median()
AstrosDF2016Points_DiffHome = Astros2016DFhome.loc[:,'Point_Diff'].median()
AstrosDF2016Points_DiffAway = Astros2016DFaway.loc[:,'Point_Diff'].median()
print('Astros Full Season Median Points Difference 2016: ',AstrosFS2016Points_Diff)
print('Astros Full Season Home Games Median Points Difference 2016: ',AstrosFS2016Points_DiffHome)
print('Astros Full Season Away Games Median Points Difference 2016: ',AstrosFS2016Points_DiffAway)
print('Astros Before Floods Median Points Difference 2016: ',AstrosBF2016Points_Diff)
print('Astros Before Floods Home Games Median Points Difference 2016: ',AstrosBF2016Points_DiffHome)
print('Astros Before Floods Away Games Points Difference 2016: ',AstrosBF2016Points_DiffAway)
print('Astros After Floods Median Points Difference 2016: ',AstrosAF2016Points_Diff)
print('Astros After Floods Home Games Median Points Difference 2016: ',AstrosAF2016Points_DiffHome)
print('Astros After Floods Away Games Median Points Difference 2016: ',AstrosAF2016Points_DiffAway)
print('Astros During Floods Median Points Difference 2016: ',AstrosDF2016Points_Diff)
print('Astros During Floods Home Games Median Points Difference 2016: ',AstrosDF2016Points_DiffHome)
print('Astros During Floods Away Games Median Points Difference 2016: ',AstrosDF2016Points_DiffAway)
# Plotting the Win/Loss Ratios for the Astros 2016 Season Compare Home vs. Away
n_groups = 1
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.05
opacity = 0.8
FSALL = plt.bar(index,AstrosFS2016Points_Diff,bar_width, 
alpha = opacity,
color = 'royalblue',
label = 'Full Season')
FSHome = plt.bar(index + bar_width,AstrosFS2016Points_DiffHome,bar_width, 
alpha = opacity,
color = 'navy',
label = 'Full Season Home Games')
FSAway = plt.bar(index + 2*bar_width,AstrosFS2016Points_DiffAway,bar_width, 
alpha = opacity,
color = 'cornflowerblue',
label = 'Full Season Away Games')
BFALL = plt.bar(index + 3.5*bar_width,AstrosBF2016Points_Diff,bar_width, 
alpha = opacity,
color = 'orange',
label = 'During Floods')
BFHome = plt.bar(index + 4.5*bar_width,AstrosBF2016Points_DiffHome,bar_width, 
alpha = opacity,
color = 'darkorange',
label = 'Before Floods Home Games')
BFAway = plt.bar(index + 5.5*bar_width,AstrosBF2016Points_DiffAway,bar_width,
alpha = opacity,
color = 'moccasin',
label = 'Before Floods Away Games')
AFALL = plt.bar(index + 7*bar_width,AstrosAF2016Points_Diff,bar_width, 
alpha = opacity,
color = 'cadetblue',
label = 'After Floods')
AFHome = plt.bar(index + 8*bar_width,AstrosAF2016Points_DiffHome,bar_width, 
alpha = opacity,
color = 'steelblue',
label = 'After Floods Home Games')
AFAway = plt.bar(index + 9*bar_width,AstrosAF2016Points_DiffAway,bar_width, 
alpha = opacity,
color = 'lightsteelblue',
label = 'After Floods Away Games')
DFALL = plt.bar(index + 10.5*bar_width,AstrosDF2016Points_Diff,bar_width, 
alpha = opacity,
color = 'salmon',
label = 'During Floods')
DFHome = plt.bar(index + 11.5*bar_width,AstrosDF2016Points_DiffHome,bar_width, 
alpha = opacity,
color = 'darksalmon',
label = 'During Floods Home Games')
DFAway = plt.bar(index + 12.5*bar_width,AstrosDF2016Points_DiffAway,bar_width, 
alpha = opacity,
color = 'lightsalmon',
label = 'During Floods Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Median Points Differences')
plt.title('Astros 2016 Median Points Differences by Segment of the Season')
plt.xticks([.05,.225,.4,.575],['Full Season','Before Floods','After Floods','During Floods'])
plt.legend(loc = 0,fontsize='x-small')
plt.tight_layout()
plt.show()
# Team Earned Run Average for the Astros full season, Before Floods, After Floods, During Floods, then Home vs. away FS, BF, AF, DF
AstrosFS2016teamERA = sum(Astros2016['EarnedRunsbyHOU'])/len(Astros2016['EarnedRunsbyHOU'])
AstrosBF2016teamERA = sum(Astros2016BF['EarnedRunsbyHOU'])/len(Astros2016BF['EarnedRunsbyHOU'])
AstrosAF2016teamERA = sum(Astros2016AF['EarnedRunsbyHOU'])/len(Astros2016AF['EarnedRunsbyHOU'])
AstrosDF2016teamERA = sum(Astros2016DF['EarnedRunsbyHOU'])/len(Astros2016DF['EarnedRunsbyHOU'])
print('Astros Full Season Team Earned Run Average 2016: ',AstrosFS2016teamERA)
print('Astros Before Floods Team Earned Run Average 2016: ',AstrosBF2016teamERA)
print('Astros After Floods Team Earned Run Average 2016: ',AstrosAF2016teamERA)
print('Astros During Floods Team Earned Run Average 2016: ',AstrosDF2016teamERA)
AstrosFS2016teamERAhome = sum(Astros2016FShome['EarnedRunsbyHOU'])/len(Astros2016FShome['EarnedRunsbyHOU'])
AstrosBF2016teamERAhome = sum(Astros2016BFhome['EarnedRunsbyHOU'])/len(Astros2016BFhome['EarnedRunsbyHOU'])
AstrosAF2016teamERAhome = sum(Astros2016AFhome['EarnedRunsbyHOU'])/len(Astros2016AFhome['EarnedRunsbyHOU'])
AstrosDF2016teamERAhome = sum(Astros2016DFhome['EarnedRunsbyHOU'])/len(Astros2016DFhome['EarnedRunsbyHOU'])
print('Astros Full Season Home Games Team Earned Run Average 2016: ',AstrosFS2016teamERAhome)
print('Astros Before Floods Home Games Team Earned Run Average 2016: ',AstrosBF2016teamERAhome)
print('Astros After Floods Home Games Team Earned Run Average 2016: ',AstrosAF2016teamERAhome)
print('Astros During Floods Home Games Team Earned Run Average 2016 : ',AstrosDF2016teamERAhome)
AstrosFS2016teamERAaway = sum(Astros2016FSaway['EarnedRunsbyHOU'])/len(Astros2016FSaway['EarnedRunsbyHOU'])
AstrosBF2016teamERAaway = sum(Astros2016BFaway['EarnedRunsbyHOU'])/len(Astros2016BFaway['EarnedRunsbyHOU'])
AstrosAF2016teamERAaway = sum(Astros2016AFaway['EarnedRunsbyHOU'])/len(Astros2016AFaway['EarnedRunsbyHOU'])
AstrosDF2016teamERAaway = sum(Astros2016DFaway['EarnedRunsbyHOU'])/len(Astros2016DFaway['EarnedRunsbyHOU'])
print('Astros Full Season Away Games Team Earned Run Average 2016: ',AstrosFS2016teamERAaway)
print('Astros Before Floods Away Games Team Earned Run Average 2016: ',AstrosBF2016teamERAaway)
print('Astros After Floods Away Games Team Earned Run Average 2016: ',AstrosAF2016teamERAaway)
print('Astros During Floods Away Games Team Earned Run Average 2016: ',AstrosDF2016teamERAaway)
# Plotting team ERA by segment of the season
n_groups = 1
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.05
opacity = 0.8
FSALL = plt.bar(index,AstrosFS2016teamERA,bar_width, 
alpha = opacity,
color = 'royalblue',
label = 'Full Season')
FSHome = plt.bar(index + bar_width,AstrosFS2016teamERAhome,bar_width, 
alpha = opacity,
color = 'navy',
label = 'Full Season Home Games')
FSAway = plt.bar(index + 2*bar_width,AstrosFS2016teamERAaway,bar_width, 
alpha = opacity,
color = 'cornflowerblue',
label = 'Full Season Away Games')
BFALL = plt.bar(index + 3.5*bar_width,AstrosBF2016teamERA,bar_width, 
alpha = opacity,
color = 'orange',
label = 'During Floods')
BFHome = plt.bar(index + 4.5*bar_width,AstrosBF2016teamERAhome,bar_width, 
alpha = opacity,
color = 'darkorange',
label = 'Before Floods Home Games')
BFAway = plt.bar(index + 5.5*bar_width,AstrosBF2016teamERAaway,bar_width,
alpha = opacity,
color = 'moccasin',
label = 'Before Floods Away Games')
AFALL = plt.bar(index + 7*bar_width,AstrosAF2016teamERA,bar_width, 
alpha = opacity,
color = 'cadetblue',
label = 'After Floods')
AFHome = plt.bar(index + 8*bar_width,AstrosAF2016teamERAhome,bar_width, 
alpha = opacity,
color = 'steelblue',
label = 'After Floods Home Games')
AFAway = plt.bar(index + 9*bar_width,AstrosAF2016teamERAaway,bar_width, 
alpha = opacity,
color = 'lightsteelblue',
label = 'After Floods Away Games')
DFALL = plt.bar(index + 10.5*bar_width,AstrosDF2016teamERA,bar_width, 
alpha = opacity,
color = 'salmon',
label = 'During Floods')
DFHome = plt.bar(index + 11.5*bar_width,AstrosDF2016teamERAhome,bar_width, 
alpha = opacity,
color = 'darksalmon',
label = 'During Floods Home Games')
DFAway = plt.bar(index + 12.5*bar_width,AstrosDF2016teamERAaway,bar_width, 
alpha = opacity,
color = 'lightsalmon',
label = 'During Floods Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Median Points Differences')
plt.title('Astros 2016 Team ERA by Segment of the Season')
plt.xticks([.05,.225,.4,.575],['Full Season','Before Floods','After Floods','During Floods'])
plt.legend(loc = 0,fontsize='xx-small',ncol=3)
plt.tight_layout()
plt.show()
# Create a dataframe of only games the Rockies were playing and reset the index
Rockies2015 = pd.DataFrame(columns=MLBgames15.columns)
Rockies2015 = MLBgames15.loc[(MLBgames15['V_Team']=='COL')|(MLBgames15['H_Team']=='COL')] 
Rockies2015 = Rockies2015.reset_index(drop=True)
# Add columns to the Rockies dataframe for hits when the Rockies are visitors, hits when the Rockies are at home and hits by Rockies total.
Rockies2015['HitsbyCOLasV'] = pd.to_numeric(Rockies2015.apply(lambda row: row.V_Hits if row.V_Team == 'COL' else 0,axis=1))
Rockies2015['HitsbyCOLasH'] = pd.to_numeric(Rockies2015.apply(lambda row: row.H_Hits if row.H_Team == 'COL' else 0,axis=1))
Rockies2015['HitsbyCOL'] = Rockies2015['HitsbyCOLasV'] + Rockies2015['HitsbyCOLasH']
# Add columns to the Rockies dataframe for at bats when the Rockies are visitors, at bats when the Rockies are at home and at bats by Rockies total.
Rockies2015['ABbyCOLasV'] = pd.to_numeric(Rockies2015.apply(lambda row: row.V_AB if row.V_Team == 'COL' else 0,axis=1))
Rockies2015['ABbyCOLasH'] = pd.to_numeric(Rockies2015.apply(lambda row: row.H_AB if row.H_Team == 'COL' else 0,axis=1))
Rockies2015['ABbyCOL'] = Rockies2015['ABbyCOLasV'] + Rockies2015['ABbyCOLasH']
Rockies2015.head
# Add columns to the Rockies dataframe for at bats when the Rockies are visitors, at bats when the Rockies are at home and at bats by Rockies total.
Rockies2015['EarnedRunsbyCOLasV'] = pd.to_numeric(Rockies2015.apply(lambda row: row.V_TeamEarnedRuns if row.V_Team == 'COL' else 0,axis=1))
Rockies2015['EarnedRunsbyCOLasH'] = pd.to_numeric(Rockies2015.apply(lambda row: row.H_TeamEarnedRuns if row.H_Team == 'COL' else 0,axis=1))
Rockies2015['EarnedRunsbyCOL'] = Rockies2015['EarnedRunsbyCOLasV'] + Rockies2015['EarnedRunsbyCOLasH']
Rockies2015.head
# Converts score columns to numbers
Rockies2015['V_Score'] = pd.to_numeric(Rockies2015['V_Score'])
Rockies2015['H_Score'] = pd.to_numeric(Rockies2015['H_Score'])
# Code below adapted from optimumsportsperformance.com/blog/python-pivot-tables/
# This code creates a Point Difference column, sets conditions and choices for 
# the created Winner column which tells if the home or visitor is the winner, 
# sets conditions and choices to return the winning team abbreviation to the WTeam column,
# and a W or L to the WinLoss column on the basis of COL being in the WTeam field for that row.
Rockies2015['Point_Diff'] =0
Rockies2015['Point_Diff'] = np.where((Rockies2015.H_Team == 'COL'),Rockies2015['H_Score'] - Rockies2015['V_Score'],Rockies2015.Point_Diff)
Rockies2015['Point_Diff'] = np.where((Rockies2015.H_Team != 'COL'),Rockies2015['V_Score'] - Rockies2015['H_Score'],Rockies2015.Point_Diff)
conditions = [(Rockies2015['H_Score'] > Rockies2015['V_Score']),(Rockies2015['H_Score'] < Rockies2015['V_Score'])]
choices = ['home','visitor']
Rockies2015['Winner'] = np.select(conditions,choices,default = 'null')
cond_for_winner = [(Rockies2015['Winner']=='home'),(Rockies2015['Winner']=='visitor')]
choices_for_winner = [Rockies2015['H_Team'],Rockies2015['V_Team']]
Rockies2015['WTeam'] = np.select(cond_for_winner,choices_for_winner,default='null')
Rockies2015['WinLoss'] = Rockies2015.apply(lambda row: 'W' if row.WTeam == 'COL' else 'L',axis=1)
# Creates individual dataframes for Before Floods (games played prior to 5/4/2015), 
# During Floods (between 5/4-6/17/2015 based on the dates of FEMA disaster declarations),
# After Floods (games played from 6/18/2015 to the end of the regular season.)
Rockies2015BF = Rockies2015.loc[(Rockies2015['Date']<'2015-05-04')]
Rockies2015AF = Rockies2015.loc[(Rockies2015['Date']>='2015-06-18')]
Rockies2015DF = Rockies2015.loc[(Rockies2015['Date']>='2015-05-04')&(Rockies2015['Date']<'2015-06-18')]
# Creates dataframes for full season home, full season away, Before Floods home, Before Floods away, After Floods home, 
# After Floods away, During Floods home, and During Floods away
Rockies2015FShome = Rockies2015.loc[(Rockies2015['H_Team']=='COL')]
Rockies2015FShome['Point_Diff'] = Rockies2015FShome['H_Score'] - Rockies2015FShome['V_Score']
Rockies2015FSaway = Rockies2015.loc[(Rockies2015['V_Team']=='COL')]
Rockies2015FSaway['Point_Diff'] = Rockies2015FSaway['V_Score'] - Rockies2015FSaway['H_Score']
Rockies2015BFhome = Rockies2015FShome.loc[(Rockies2015FShome['Date']<'2015-05-04')]
Rockies2015BFhome['Point_Diff'] = Rockies2015BFhome['H_Score'] - Rockies2015BFhome['V_Score']
Rockies2015AFhome = Rockies2015FShome.loc[(Rockies2015FShome['Date']>='2015-06-18')]
Rockies2015AFhome['Point_Diff'] = Rockies2015AFhome['H_Score'] - Rockies2015AFhome['V_Score']
Rockies2015DFhome = Rockies2015FShome.loc[(Rockies2015FShome['Date']>='2015-05-04')&(Rockies2015FShome['Date']<'2015-06-18')]
Rockies2015DFhome['Point_Diff'] = Rockies2015DFhome['H_Score'] - Rockies2015DFhome['V_Score']
Rockies2015BFaway = Rockies2015FSaway.loc[(Rockies2015FSaway['Date']<'2015-05-04')]
Rockies2015BFaway['Point_Diff'] = Rockies2015BFaway['V_Score'] - Rockies2015BFaway['H_Score']
Rockies2015AFaway = Rockies2015FSaway.loc[(Rockies2015FSaway['Date']>='2015-06-18')]
Rockies2015AFaway['Point_Diff'] = Rockies2015AFaway['V_Score'] - Rockies2015AFaway['H_Score']
Rockies2015DFaway = Rockies2015FSaway.loc[(Rockies2015FSaway['Date']>='2015-05-04')&(Rockies2015FSaway['Date']<'2015-06-18')]
Rockies2015DFaway['Point_Diff'] = Rockies2015DFaway['V_Score'] - Rockies2015DFaway['H_Score']
# Win/Loss Records by Full Season, Before Floods, After Floods, During Floods.
RockiesFullSeason2015 = Rockies2015.groupby(['WinLoss']).size()
RockiesBefore_Floods2015 = Rockies2015BF.groupby(['WinLoss']).size()
RockiesAfter_Floods2015 = Rockies2015AF.groupby(['WinLoss']).size()
RockiesDuring_Floods2015 = Rockies2015DF.groupby(['WinLoss']).size()
print('Rockies Full Season Win/Loss Records 2015: ', RockiesFullSeason2015)
print('Rockies Before Floods Win/Loss Records 2015: ',RockiesBefore_Floods2015)
print('Rockies After Floods Win/Loss Records 2015:',RockiesAfter_Floods2015)
print('Rockies During Floods Win/Loss Records 2015: ',RockiesDuring_Floods2015)
RockiesFullSeason2015 = np.array(RockiesFullSeason2015)
RockiesBefore_Floods2015 = np.array(RockiesBefore_Floods2015)
RockiesAfter_Floods2015 = np.array(RockiesAfter_Floods2015)
RockiesDuring_Floods2015 = np.array(RockiesDuring_Floods2015)
n_groups = 2
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.2
opacity = 0.8
rects1 = plt.bar(index,RockiesFullSeason2015,bar_width, 
alpha = opacity,
color = 'black',
label = 'Full Season')
rects2 = plt.bar(index + bar_width,RockiesBefore_Floods2015,bar_width, 
alpha = opacity,
color = 'darkorchid',
label = 'Before Floods')
rects3 = plt.bar(index + 2*bar_width,RockiesAfter_Floods2015,bar_width, 
alpha = opacity,
color = 'silver',
label = 'After Floods')
rects4 = plt.bar(index + 3*bar_width,RockiesDuring_Floods2015,bar_width, 
alpha = opacity,
color = 'plum',
label = 'During Floods')
plt.xlabel('Segment of the Season')
plt.ylabel('Games')
plt.title('Rockies 2015 Win/loss Records by Segment of the Season')
plt.xticks(index + 1.5*bar_width,('Losses','Wins'))
plt.legend(loc = 0,fontsize='xx-small',ncol=3)
plt.tight_layout()
plt.show()
# Percentages for Full Season, Before Floods, After Floods, During Floods
RockiesFSPercentWin2015 = Rockies2015.groupby(['WinLoss']).size()/len(Rockies2015.index)
RockiesBFPercentWin2015 = Rockies2015BF.groupby(['WinLoss']).size()/len(Rockies2015BF.index)
RockiesAFPercentWin2015 = Rockies2015AF.groupby(['WinLoss']).size()/len(Rockies2015AF.index)
RockiesDFPercentWin2015 = Rockies2015DF.groupby(['WinLoss']).size()/len(Rockies2015DF.index)
print('Rockies Full Season Win/Loss Percentages 2015: ',RockiesFSPercentWin2015)
print('Rockies Before Floods Win/Loss Percentages 2015: ',RockiesBFPercentWin2015)
print('Rockies After Floods Win/Loss Percentages 2015: ',RockiesAFPercentWin2015)
print('Rockies During Floods Win/Loss Percentages 2015: ',RockiesDFPercentWin2015)

# Plotting the Win/Loss Ratios for the Rockies 2015 Season
n_groups = 2
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.2
opacity = 0.8
rects1 = plt.bar(index,RockiesFSPercentWin2015,bar_width, 
alpha = opacity,
color = 'black',
label = 'Full Season')
rects2 = plt.bar(index + bar_width,RockiesBFPercentWin2015,bar_width, 
alpha = opacity,
color = 'darkorchid',
label = 'Before Floods')
rects3 = plt.bar(index + 2*bar_width,RockiesAFPercentWin2015,bar_width, 
alpha = opacity,
color = 'silver',
label = 'After Floods')
rects4 = plt.bar(index + 3*bar_width,RockiesDFPercentWin2015,bar_width, 
alpha = opacity,
color = 'plum',
label = 'During Floods')
plt.xlabel('Segment of the Season')
plt.ylabel('Percentages')
plt.title('Rockies 2015 Win/loss Percentages by Segment of the Season')
plt.xticks(index + 1.5*bar_width,('Losses','Wins'))
plt.legend(loc = 0,fontsize='xx-small',ncol=3)
plt.tight_layout()
plt.show()
# Win/Loss Records for Home vs. Away for Full Season, Before Floods, After Floods, During Floods
RockiesFullSeason2015Home = Rockies2015FShome.groupby(['WinLoss']).size()
RockiesBefore_Floods2015Home = Rockies2015BFhome.groupby(['WinLoss']).size()
RockiesAfter_Floods2015Home = Rockies2015AFhome.groupby(['WinLoss']).size()
RockiesDuring_Floods2015Home = Rockies2015DFhome.groupby(['WinLoss']).size()
print('Rockies Full Season Home Win/Loss Records 2015', RockiesFullSeason2015Home)
print('Rockies Before Floods Home Win/Loss Records 2015',RockiesBefore_Floods2015Home)
print('Rockies After Floods Home Win/Loss Records 2015',RockiesAfter_Floods2015Home)
print('Rockies During Floods Home Win/Loss Records 2015',RockiesDuring_Floods2015Home)
RockiesFullSeason2015Away = Rockies2015FSaway.groupby(['WinLoss']).size()
RockiesBefore_Floods2015Away = Rockies2015BFaway.groupby(['WinLoss']).size()
RockiesAfter_Floods2015Away = Rockies2015AFaway.groupby(['WinLoss']).size()
RockiesDuring_Floods2015Away = Rockies2015DFaway.groupby(['WinLoss']).size()
print('Rockies Full Season AwayWin/Loss Records 2015', RockiesFullSeason2015Away)
print('Rockies Before Floods Away Win/Loss Records 2015',RockiesBefore_Floods2015Away)
print('Rockies After Floods Away Win/Loss Records 2015',RockiesAfter_Floods2015Away)
print('Rockies During Floods Away Win/Loss Records 2015',RockiesDuring_Floods2015Away)
# Percentages for home vs. away Full Season, Before Floods, After Floods, During Floods
RockiesFSPercentWin2015home = Rockies2015FShome.groupby(['WinLoss']).size()/len(Rockies2015FShome.index)
RockiesBFPercentWin2015home = Rockies2015BFhome.groupby(['WinLoss']).size()/len(Rockies2015BFhome.index)
RockiesAFPercentWin2015home = Rockies2015AFhome.groupby(['WinLoss']).size()/len(Rockies2015AFhome.index)
RockiesDFPercentWin2015home = Rockies2015DFhome.groupby(['WinLoss']).size()/len(Rockies2015DFhome.index)
print('Rockies Full Season Home Win/Loss Percentages',RockiesFSPercentWin2015home)
print('Rockies Before Floods Home Win/Loss Percentages',RockiesBFPercentWin2015home)
print('Rockies After Floods Home Win/Loss Percentages',RockiesAFPercentWin2015home)
print('Rockies During Floods Home Win/Loss Percentages',RockiesDFPercentWin2015home)
RockiesFSPercentWin2015away = Rockies2015FSaway.groupby(['WinLoss']).size()/len(Rockies2015FSaway.index)
RockiesBFPercentWin2015away = Rockies2015BFaway.groupby(['WinLoss']).size()/len(Rockies2015BFaway.index)
RockiesAFPercentWin2015away = Rockies2015AFaway.groupby(['WinLoss']).size()/len(Rockies2015AFaway.index)
RockiesDFPercentWin2015away = Rockies2015DFaway.groupby(['WinLoss']).size()/len(Rockies2015DFaway.index)
print('Rockies Full Season Away Win/Loss Percentages 2015',RockiesFSPercentWin2015away)
print('Rockies Before Floods Away Win/Loss Percentages 2015',RockiesBFPercentWin2015away)
print('Rockies After Floods Away Win/Loss Percentages 2015',RockiesAFPercentWin2015away)
print('Rockies During Floods Away Win/Loss Percentages 2015',RockiesDFPercentWin2015away)
# Plotting the Win/Loss Ratios for the Rockies 2015 Season Compare Home vs. Away
n_groups = 2
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.1
opacity = 0.8
FSHome = plt.bar(index,RockiesFSPercentWin2015home,bar_width, 
alpha = opacity,
color = 'black',
label = 'Full Season Home Games')
FSAway = plt.bar(index + bar_width,RockiesFSPercentWin2015away,bar_width, 
alpha = opacity,
color = 'gainsboro',
label = 'Full Season Away Games')
BFHome = plt.bar(index + 2*bar_width,RockiesBFPercentWin2015home,bar_width, 
alpha = opacity,
color = 'darkorchid',
label = 'Before Floods Home Games')
BFAway = plt.bar(index + 3*bar_width,RockiesBFPercentWin2015away,bar_width,
alpha = opacity,
color = 'thistle',
label = 'Before Floods Away Games')
AFHome = plt.bar(index + 4*bar_width,RockiesAFPercentWin2015home,bar_width, 
alpha = opacity,
color = 'silver',
label = 'After Floods Home Games')
AFAway = plt.bar(index + 5*bar_width,RockiesAFPercentWin2015away,bar_width, 
alpha = opacity,
color = 'lightgray',
label = 'After Floods Away Games')
DFHome = plt.bar(index + 6*bar_width,RockiesDFPercentWin2015home,bar_width, 
alpha = opacity,
color = 'darkviolet',
label = 'During Floods Home Games')
DFAway = plt.bar(index + 7*bar_width,RockiesDFPercentWin2015away,bar_width, 
alpha = opacity,
color = 'plum',
label = 'During Floods Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Percentages')
plt.title('Rockies 2015 Win/loss Percentages by Segment of the Season and Home vs Away')
plt.xticks(index + 2*bar_width,('Losses','Wins'))
plt.legend(loc = 0,fontsize='x-small')
plt.tight_layout()
plt.show()
# Hits Records by Full Season, Before Floods, After Floods, During Floods
RockiesFS2015Hits = sum(Rockies2015['HitsbyCOL'])
RockiesBF2015Hits = sum(Rockies2015BF['HitsbyCOL'])
RockiesAF2015Hits = sum(Rockies2015AF['HitsbyCOL'])
RockiesDF2015Hits = sum(Rockies2015DF['HitsbyCOL'])
RockiesFS2015Hitshome = sum(Rockies2015FShome['HitsbyCOL'])
RockiesBF2015Hitshome = sum(Rockies2015BFhome['HitsbyCOL'])
RockiesAF2015Hitshome = sum(Rockies2015AFhome['HitsbyCOL'])
RockiesDF2015Hitshome = sum(Rockies2015DFhome['HitsbyCOL'])
RockiesFS2015Hitsaway = sum(Rockies2015FSaway['HitsbyCOL'])
RockiesBF2015Hitsaway = sum(Rockies2015BFaway['HitsbyCOL'])
RockiesAF2015Hitsaway = sum(Rockies2015AFaway['HitsbyCOL'])
RockiesDF2015Hitsaway = sum(Rockies2015DFaway['HitsbyCOL'])
print('Rockies Full Season Hits 2015: ',RockiesFS2015Hits)
print('Rockies Full Season Hits 2015 Home Games: ',RockiesFS2015Hitshome)
print('Rockies Full Season Hits 2015 Away Games: ',RockiesFS2015Hitsaway)
print('Rockies Before Floods Hits 2015: ',RockiesBF2015Hits)
print('Rockies Before Floods Hits 2015 Away Games: ',RockiesBF2015Hitshome)
print('Rockies Before Floods Hits 2015 Home Games: ',RockiesBF2015Hitsaway)
print('Rockies After Floods Hits 2015: ',RockiesAF2015Hits)
print('Rockies After Floods Hits 2015 Home Games: ',RockiesAF2015Hitshome)
print('Rockies After Floods Hits 2015 Away Games: ',RockiesAF2015Hitsaway)
print('Rockies During Floods Hits 2015: ',RockiesDF2015Hits)
print('Rockies During Floods Hits 2015 Home Games: ',RockiesDF2015Hitshome)
print('Rockies During Floods Hits 2015 Away Games: ',RockiesDF2015Hitsaway)
# At Bats Records by Full Season, Before Floods, After Floods, During Floods
RockiesFS2015AtBats = sum(Rockies2015['ABbyCOL'])
RockiesBF2015AtBats = sum(Rockies2015BF['ABbyCOL'])
RockiesAF2015AtBats = sum(Rockies2015AF['ABbyCOL'])
RockiesDF2015AtBats = sum(Rockies2015DF['ABbyCOL'])
RockiesFS2015AtBatshome = sum(Rockies2015FShome['ABbyCOL'])
RockiesBF2015AtBatshome = sum(Rockies2015BFhome['ABbyCOL'])
RockiesAF2015AtBatshome = sum(Rockies2015AFhome['ABbyCOL'])
RockiesDF2015AtBatshome = sum(Rockies2015DFhome['ABbyCOL'])
RockiesFS2015AtBatsaway = sum(Rockies2015FSaway['ABbyCOL'])
RockiesBF2015AtBatsaway = sum(Rockies2015BFaway['ABbyCOL'])
RockiesAF2015AtBatsaway = sum(Rockies2015AFaway['ABbyCOL'])
RockiesDF2015AtBatsaway = sum(Rockies2015DFaway['ABbyCOL'])
print('Rockies Full Season At Bats 2015: ',RockiesFS2015AtBats)
print('Rockies Full Season At Bats 2015 Home Games: ',RockiesFS2015AtBatshome)
print('Rockies Full Season At Bats 2015 Away Games: ',RockiesFS2015AtBatsaway)
print('Rockies Before Floods At Bats 2015: ',RockiesBF2015AtBats)
print('Rockies Before Floods At Bats 2015 Home Games: ',RockiesBF2015AtBatshome)
print('Rockies Before Floods At Bats 2015 Away Games: ',RockiesBF2015AtBatsaway)
print('Rockies After Floods At Bats 2015: ',RockiesAF2015AtBats)
print('Rockies After Floods At Bats 2015 Home Games: ',RockiesAF2015AtBatshome)
print('Rockies After Floods At Bats 2015 Away games: ',RockiesAF2015AtBatsaway)
print('Rockies During Floods At Bats 2015: ',RockiesDF2015AtBats)
print('Rockies During Floods At Bats 2015 Home Games: ',RockiesDF2015AtBatshome)
print('Rockies During Floods At Bats 2015 Away Games: ',RockiesDF2015AtBatsaway)
# Percent of At Bats resulting in hits by Full Season, Before Floods, After Floods, During Floods
RockiesFS2015Hpercent = RockiesFS2015Hits/RockiesFS2015AtBats
RockiesBF2015Hpercent = RockiesBF2015Hits/RockiesBF2015AtBats
RockiesAF2015Hpercent = RockiesAF2015Hits/RockiesAF2015AtBats
RockiesDF2015Hpercent = RockiesDF2015Hits/RockiesDF2015AtBats
RockiesFS2015Hpercenthome = RockiesFS2015Hitshome/RockiesFS2015AtBatshome
RockiesBF2015Hpercenthome = RockiesBF2015Hitshome/RockiesBF2015AtBatshome
RockiesAF2015Hpercenthome = RockiesAF2015Hitshome/RockiesAF2015AtBatshome
RockiesDF2015Hpercenthome = RockiesDF2015Hitshome/RockiesDF2015AtBatshome
RockiesFS2015Hpercentaway = RockiesFS2015Hitsaway/RockiesFS2015AtBatsaway
RockiesBF2015Hpercentaway = RockiesBF2015Hitsaway/RockiesBF2015AtBatsaway
RockiesAF2015Hpercentaway = RockiesAF2015Hitsaway/RockiesAF2015AtBatsaway
RockiesDF2015Hpercentaway = RockiesDF2015Hitsaway/RockiesDF2015AtBatsaway
print('Rockies Full Season Percentage of At Bats resulting in Hits 2015: ',"{:.2%}".format(RockiesFS2015Hpercent))
print('Rockies Full Season Percentage of At Bats resulting in Hits 2015 Home Games: ',"{:.2%}".format(RockiesFS2015Hpercenthome))
print('Rockies Full Season Percentage of At Bats resulting in Hits 2015 Away Games: ',"{:.2%}".format(RockiesFS2015Hpercentaway))
print('Rockies Before Floods Percentage of At Bats resulting in Hits 2015: ',"{:.2%}".format(RockiesBF2015Hpercent))
print('Rockies Before Floods Percentage of At Bats resulting in Hits 2015 Home Games: ',"{:.2%}".format(RockiesBF2015Hpercenthome))
print('Rockies Before Floods Percentage of At Bats resulting in Hits 2015 Away Games: ',"{:.2%}".format(RockiesBF2015Hpercentaway))
print('Rockies After Floods Percentage of At Bats resulting in Hits 2015: ',"{:.2%}".format(RockiesAF2015Hpercent))
print('Rockies After Floods Percentage of At Bats resulting in Hits 2015 Home Games: ',"{:.2%}".format(RockiesAF2015Hpercenthome))
print('Rockies After Floods Percentage of At Bats resulting in Hits 2015 Away Games: ',"{:.2%}".format(RockiesAF2015Hpercentaway))
print('Rockies During Floods Percentage of At Bats resulting in Hits 2015: ',"{:.2%}".format(RockiesDF2015Hpercent))
print('Rockies During Floods Percentage of At Bats resulting in Hits 2015 Home Games: ',"{:.2%}".format(RockiesDF2015Hpercenthome))
print('Rockies During Floods Percentage of At Bats resulting in Hits 2015 Away Games: ',"{:.2%}".format(RockiesDF2015Hpercentaway))
# Create a CSV for At Bats resulting in Hits based on Full Season, Before Floods, After Floods, and During Floods 
row_list1 = [['Portion of Season','Home vs Away','Hits','At Bats','Percent of At Bats resulting in Hits'],
['Full Season','ALL',RockiesFS2015Hits,RockiesFS2015AtBats,"{:.2%}".format(RockiesFS2015Hpercent)],
['Full Season','Home',RockiesFS2015Hitshome,RockiesFS2015AtBatshome,"{:.2%}".format(RockiesFS2015Hpercenthome)],
['Full Season','Away',RockiesFS2015Hitsaway,RockiesFS2015AtBatsaway,"{:.2%}".format(RockiesFS2015Hpercentaway)],
['Before Floods','ALL',RockiesBF2015Hits,RockiesBF2015AtBats,"{:.2%}".format(RockiesBF2015Hpercent)],
['Before Floods','Home',RockiesBF2015Hitshome,RockiesBF2015AtBatshome,"{:.2%}".format(RockiesBF2015Hpercenthome)],
['Before Floods','Away',RockiesBF2015Hitsaway,RockiesBF2015AtBatsaway,"{:.2%}".format(RockiesBF2015Hpercentaway)],
['After Floods','All',RockiesAF2015Hits,RockiesAF2015AtBats,"{:.2%}".format(RockiesAF2015Hpercent)],
['After Floods','Home',RockiesAF2015Hitshome,RockiesAF2015AtBatshome,"{:.2%}".format(RockiesAF2015Hpercenthome)],
['After Floods','Away',RockiesAF2015Hitsaway,RockiesAF2015AtBatsaway,"{:.2%}".format(RockiesAF2015Hpercentaway)],
['During Floods','ALL',RockiesDF2015Hits,RockiesDF2015AtBats,"{:.2%}".format(RockiesDF2015Hpercent)],
['During Floods','Home',RockiesDF2015Hits,RockiesDF2015AtBatshome,"{:.2%}".format(RockiesDF2015Hpercenthome)],
['During Floods','Away',RockiesDF2015Hits,RockiesDF2015AtBatsaway,"{:.2%}".format(RockiesDF2015Hpercentaway)]]
with open ('Rockies-Hits-AtBats2015.csv','w',newline='') as file:
    writer = csv.writer(file)
    writer.writerows(row_list1) 
# Plotting Hits to At Bat Ratios by Segment of the season
n_groups = 1
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.05
opacity = 0.8
FSALL = plt.bar(index,RockiesFS2015Hpercent,bar_width, 
alpha = opacity,
color = 'dimgray',
label = 'Full Season')
FSHome = plt.bar(index + bar_width,RockiesFS2015Hpercenthome,bar_width, 
alpha = opacity,
color = 'black',
label = 'Full Season Home Games')
FSAway = plt.bar(index + 2*bar_width,RockiesFS2015Hpercentaway,bar_width, 
alpha = opacity,
color = 'gainsboro',
label = 'Full Season Away Games')
BFALL = plt.bar(index + 3.5*bar_width,RockiesBF2015Hpercent,bar_width, 
alpha = opacity,
color = 'orchid',
label = 'During Floods')
BFHome = plt.bar(index + 4.5*bar_width,RockiesBF2015Hpercenthome,bar_width, 
alpha = opacity,
color = 'darkorchid',
label = 'Before Floods Home Games')
BFAway = plt.bar(index + 5.5*bar_width,RockiesBF2015Hpercentaway,bar_width,
alpha = opacity,
color = 'thistle',
label = 'Before Floods Away Games')
AFALL = plt.bar(index + 7*bar_width,RockiesAF2015Hpercent,bar_width, 
alpha = opacity,
color = 'darkgray',
label = 'After Floods')
AFHome = plt.bar(index + 8*bar_width,RockiesAF2015Hpercenthome,bar_width, 
alpha = opacity,
color = 'silver',
label = 'After Floods Home Games')
AFAway = plt.bar(index + 9*bar_width,RockiesAF2015Hpercentaway,bar_width, 
alpha = opacity,
color = 'lightgray',
label = 'After Floods Away Games')
DFALL = plt.bar(index + 10.5*bar_width,RockiesDF2015Hpercent,bar_width, 
alpha = opacity,
color = 'violet',
label = 'During Floods')
DFHome = plt.bar(index + 11.5*bar_width,RockiesDF2015Hpercenthome,bar_width, 
alpha = opacity,
color = 'darkviolet',
label = 'During Floods Home Games')
DFAway = plt.bar(index + 12.5*bar_width,RockiesDF2015Hpercentaway,bar_width, 
alpha = opacity,
color = 'plum',
label = 'During Floods Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Hits to At Bats Ratio')
plt.title('Rockies 2015 Hits to At Bats Ratio by Segment of the Season')
plt.xticks([.05,.225,.4,.575],['Full Season','Before Floods','After Floods','During Floods'])
plt.legend(loc = 0,fontsize='xx-small',ncol = 3)
plt.tight_layout()
plt.show()

# Median Points Difference in games where Rockies were at home vs. away Full Season, Before Floods, After Floods, During Floods and full season both home and away
RockiesFS2015Points_Diff = Rockies2015.loc[:,'Point_Diff'].median()
RockiesBF2015Points_Diff = Rockies2015BF.loc[:,'Point_Diff'].median()
RockiesAF2015Points_Diff = Rockies2015AF.loc[:,'Point_Diff'].median()
RockiesDF2015Points_Diff = Rockies2015DF.loc[:,'Point_Diff'].median()
RockiesFS2015Points_DiffHome = Rockies2015FShome.loc[:,'Point_Diff'].median()
RockiesFS2015Points_DiffAway = Rockies2015FSaway.loc[:,'Point_Diff'].median()
RockiesBF2015Points_DiffHome = Rockies2015BFhome.loc[:,'Point_Diff'].median()
RockiesBF2015Points_DiffAway = Rockies2015BFaway.loc[:,'Point_Diff'].median()
RockiesAF2015Points_DiffHome = Rockies2015AFhome.loc[:,'Point_Diff'].median()
RockiesAF2015Points_DiffAway = Rockies2015AFaway.loc[:,'Point_Diff'].median()
RockiesDF2015Points_DiffHome = Rockies2015DFhome.loc[:,'Point_Diff'].median()
RockiesDF2015Points_DiffAway = Rockies2015DFaway.loc[:,'Point_Diff'].median()
print('Rockies Full Season Median Points Difference 2015: ',RockiesFS2015Points_Diff)
print('Rockies Full Season Home Games Median Points Difference 2015: ',RockiesFS2015Points_DiffHome)
print('Rockies Full Season Away Games Median Points Difference 2015: ',RockiesFS2015Points_DiffAway)
print('Rockies Before Floods Median Points Difference 2015: ',RockiesBF2015Points_Diff)
print('Rockies Before Floods Home Games Median Points Difference 2015: ',RockiesBF2015Points_DiffHome)
print('Rockies Before Floods Away Games Points Difference 2015: ',RockiesBF2015Points_DiffAway)
print('Rockies After Floods Median Points Difference 2015: ',RockiesAF2015Points_Diff)
print('Rockies After Floods Home Games Median Points Difference 2015: ',RockiesAF2015Points_DiffHome)
print('Rockies After Floods Away Games Median Points Difference 2015: ',RockiesAF2015Points_DiffAway)
print('Rockies During Floods Median Points Difference 2015: ',RockiesDF2015Points_Diff)
print('Rockies During Floods Home Games Median Points Difference 2015: ',RockiesDF2015Points_DiffHome)
print('Rockies During Floods Away Games Median Points Difference 2015: ',RockiesDF2015Points_DiffAway)
# Plotting the Win/Loss Ratios for the Rockies 2015 Season Compare Home vs. Away
n_groups = 1
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.05
opacity = 0.8
FSALL = plt.bar(index,RockiesFS2015Points_Diff,bar_width, 
alpha = opacity,
color = 'dimgray',
label = 'Full Season')
FSHome = plt.bar(index + bar_width,RockiesFS2015Points_DiffHome,bar_width, 
alpha = opacity,
color = 'black',
label = 'Full Season Home Games')
FSAway = plt.bar(index + 2*bar_width,RockiesFS2015Points_DiffAway,bar_width, 
alpha = opacity,
color = 'gainsboro',
label = 'Full Season Away Games')
BFALL = plt.bar(index + 3.5*bar_width,RockiesBF2015Points_Diff,bar_width, 
alpha = opacity,
color = 'orchid',
label = 'During Floods')
BFHome = plt.bar(index + 4.5*bar_width,RockiesBF2015Points_DiffHome,bar_width, 
alpha = opacity,
color = 'darkorchid',
label = 'Before Floods Home Games')
BFAway = plt.bar(index + 5.5*bar_width,RockiesBF2015Points_DiffAway,bar_width,
alpha = opacity,
color = 'thistle',
label = 'Before Floods Away Games')
AFALL = plt.bar(index + 7*bar_width,RockiesAF2015Points_Diff,bar_width, 
alpha = opacity,
color = 'darkgray',
label = 'After Floods')
AFHome = plt.bar(index + 8*bar_width,RockiesAF2015Points_DiffHome,bar_width, 
alpha = opacity,
color = 'silver',
label = 'After Floods Home Games')
AFAway = plt.bar(index + 9*bar_width,RockiesAF2015Points_DiffAway,bar_width, 
alpha = opacity,
color = 'lightgray',
label = 'After Floods Away Games')
DFALL = plt.bar(index + 10.5*bar_width,RockiesDF2015Points_Diff,bar_width, 
alpha = opacity,
color = 'violet',
label = 'During Floods')
DFHome = plt.bar(index + 11.5*bar_width,RockiesDF2015Points_DiffHome,bar_width, 
alpha = opacity,
color = 'darkviolet',
label = 'During Floods Home Games')
DFAway = plt.bar(index + 12.5*bar_width,RockiesDF2015Points_DiffAway,bar_width, 
alpha = opacity,
color = 'plum',
label = 'During Floods Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Median Points Differences')
plt.title('Rockies 2015 Median Points Differences by Segment of the Season')
plt.xticks([.05,.225,.4,.575],['Full Season','Before Floods','After Floods','During Floods'])
plt.legend(loc = 0,fontsize='x-small')
plt.tight_layout()
plt.show()
# Team Earned Run Average for the Rockies full season, Before Floods, After Floods, During Floods, then Home vs. away FS, BF, AF, DF
RockiesFS2015teamERA = sum(Rockies2015['EarnedRunsbyCOL'])/len(Rockies2015['EarnedRunsbyCOL'])
RockiesBF2015teamERA = sum(Rockies2015BF['EarnedRunsbyCOL'])/len(Rockies2015BF['EarnedRunsbyCOL'])
RockiesAF2015teamERA = sum(Rockies2015AF['EarnedRunsbyCOL'])/len(Rockies2015AF['EarnedRunsbyCOL'])
RockiesDF2015teamERA = sum(Rockies2015DF['EarnedRunsbyCOL'])/len(Rockies2015DF['EarnedRunsbyCOL'])
print('Rockies Full Season Team Earned Run Average 2015: ',RockiesFS2015teamERA)
print('Rockies Before Floods Team Earned Run Average 2015: ',RockiesBF2015teamERA)
print('Rockies After Floods Team Earned Run Average 2015: ',RockiesAF2015teamERA)
print('Rockies During Floods Team Earned Run Average 2015: ',RockiesDF2015teamERA)
RockiesFS2015teamERAhome = sum(Rockies2015FShome['EarnedRunsbyCOL'])/len(Rockies2015FShome['EarnedRunsbyCOL'])
RockiesBF2015teamERAhome = sum(Rockies2015BFhome['EarnedRunsbyCOL'])/len(Rockies2015BFhome['EarnedRunsbyCOL'])
RockiesAF2015teamERAhome = sum(Rockies2015AFhome['EarnedRunsbyCOL'])/len(Rockies2015AFhome['EarnedRunsbyCOL'])
RockiesDF2015teamERAhome = sum(Rockies2015DFhome['EarnedRunsbyCOL'])/len(Rockies2015DFhome['EarnedRunsbyCOL'])
print('Rockies Full Season Home Games Team Earned Run Average 2015: ',RockiesFS2015teamERAhome)
print('Rockies Before Floods Home Games Team Earned Run Average 2015: ',RockiesBF2015teamERAhome)
print('Rockies After Floods Home Games Team Earned Run Average 2015: ',RockiesAF2015teamERAhome)
print('Rockies During Floods Home Games Team Earned Run Average 2015 : ',RockiesDF2015teamERAhome)
RockiesFS2015teamERAaway = sum(Rockies2015FSaway['EarnedRunsbyCOL'])/len(Rockies2015FSaway['EarnedRunsbyCOL'])
RockiesBF2015teamERAaway = sum(Rockies2015BFaway['EarnedRunsbyCOL'])/len(Rockies2015BFaway['EarnedRunsbyCOL'])
RockiesAF2015teamERAaway = sum(Rockies2015AFaway['EarnedRunsbyCOL'])/len(Rockies2015AFaway['EarnedRunsbyCOL'])
RockiesDF2015teamERAaway = sum(Rockies2015DFaway['EarnedRunsbyCOL'])/len(Rockies2015DFaway['EarnedRunsbyCOL'])
print('Rockies Full Season Away Games Team Earned Run Average 2015: ',RockiesFS2015teamERAaway)
print('Rockies Before Floods Away Games Team Earned Run Average 2015: ',RockiesBF2015teamERAaway)
print('Rockies After Floods Away Games Team Earned Run Average 2015: ',RockiesAF2015teamERAaway)
print('Rockies During Floods Away Games Team Earned Run Average 2015: ',RockiesDF2015teamERAaway)
# Plotting team ERA by segment of the season
n_groups = 1
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.05
opacity = 0.8
FSALL = plt.bar(index,RockiesFS2015teamERA,bar_width, 
alpha = opacity,
color = 'dimgray',
label = 'Full Season')
FSHome = plt.bar(index + bar_width,RockiesFS2015teamERAhome,bar_width, 
alpha = opacity,
color = 'black',
label = 'Full Season Home Games')
FSAway = plt.bar(index + 2*bar_width,RockiesFS2015teamERAaway,bar_width, 
alpha = opacity,
color = 'gainsboro',
label = 'Full Season Away Games')
BFALL = plt.bar(index + 3.5*bar_width,RockiesBF2015teamERA,bar_width, 
alpha = opacity,
color = 'orchid',
label = 'During Floods')
BFHome = plt.bar(index + 4.5*bar_width,RockiesBF2015teamERAhome,bar_width, 
alpha = opacity,
color = 'darkorchid',
label = 'Before Floods Home Games')
BFAway = plt.bar(index + 5.5*bar_width,RockiesBF2015teamERAaway,bar_width,
alpha = opacity,
color = 'thistle',
label = 'Before Floods Away Games')
AFALL = plt.bar(index + 7*bar_width,RockiesAF2015teamERA,bar_width, 
alpha = opacity,
color = 'darkgray',
label = 'After Floods')
AFHome = plt.bar(index + 8*bar_width,RockiesAF2015teamERAhome,bar_width, 
alpha = opacity,
color = 'silver',
label = 'After Floods Home Games')
AFAway = plt.bar(index + 9*bar_width,RockiesAF2015teamERAaway,bar_width, 
alpha = opacity,
color = 'lightgray',
label = 'After Floods Away Games')
DFALL = plt.bar(index + 10.5*bar_width,RockiesDF2015teamERA,bar_width, 
alpha = opacity,
color = 'violet',
label = 'During Floods')
DFHome = plt.bar(index + 11.5*bar_width,RockiesDF2015teamERAhome,bar_width, 
alpha = opacity,
color = 'darkviolet',
label = 'During Floods Home Games')
DFAway = plt.bar(index + 12.5*bar_width,RockiesDF2015teamERAaway,bar_width, 
alpha = opacity,
color = 'plum',
label = 'During Floods Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Median Points Differences')
plt.title('Rockies 2015 Team ERA by Segment of the Season')
plt.xticks([.05,.225,.4,.575],['Full Season','Before Floods','After Floods','During Floods'])
plt.legend(loc = 0,fontsize='xx-small',ncol=3)
plt.tight_layout()
plt.show()
# Create a dataframe of only games the Rangers were playing and reset the index
Rangers2015 = pd.DataFrame(columns=MLBgames15.columns)
Rangers2015 = MLBgames15.loc[(MLBgames15['V_Team']=='TEX')|(MLBgames15['H_Team']=='TEX')] 
Rangers2015 = Rangers2015.reset_index(drop=True)
# Add columns to the Rangers dataframe for hits when the Rangers are visitors, hits when the Rangers are at home and hits by Rangers total.
Rangers2015['HitsbyTEXasV'] = pd.to_numeric(Rangers2015.apply(lambda row: row.V_Hits if row.V_Team == 'TEX' else 0,axis=1))
Rangers2015['HitsbyTEXasH'] = pd.to_numeric(Rangers2015.apply(lambda row: row.H_Hits if row.H_Team == 'TEX' else 0,axis=1))
Rangers2015['HitsbyTEX'] = Rangers2015['HitsbyTEXasV'] + Rangers2015['HitsbyTEXasH']

# Add columns to the Rangers dataframe for at bats when the Rangers are visitors, at bats when the Rangers are at home and at bats by Rangers total.
Rangers2015['ABbyTEXasV'] = pd.to_numeric(Rangers2015.apply(lambda row: row.V_AB if row.V_Team == 'TEX' else 0,axis=1))
Rangers2015['ABbyTEXasH'] = pd.to_numeric(Rangers2015.apply(lambda row: row.H_AB if row.H_Team == 'TEX' else 0,axis=1))
Rangers2015['ABbyTEX'] = Rangers2015['ABbyTEXasV'] + Rangers2015['ABbyTEXasH']
Rangers2015.head
# Add columns to the Rangers dataframe for at bats when the Rangers are visitors, at bats when the Rangers are at home and at bats by Rangers total.
Rangers2015['EarnedRunsbyTEXasV'] = pd.to_numeric(Rangers2015.apply(lambda row: row.V_TeamEarnedRuns if row.V_Team == 'TEX' else 0,axis=1))
Rangers2015['EarnedRunsbyTEXasH'] = pd.to_numeric(Rangers2015.apply(lambda row: row.H_TeamEarnedRuns if row.H_Team == 'TEX' else 0,axis=1))
Rangers2015['EarnedRunsbyTEX'] = Rangers2015['EarnedRunsbyTEXasV'] + Rangers2015['EarnedRunsbyTEXasH']
Rangers2015.head
# Converts score columns to numbers
Rangers2015['V_Score'] = pd.to_numeric(Rangers2015['V_Score'])
Rangers2015['H_Score'] = pd.to_numeric(Rangers2015['H_Score'])
# Code below adapted from optimumsportsperformance.com/blog/python-pivot-tables/
# This code creates a Point Difference column, sets conditions and choices for 
# the created Winner column which tells if the home or visitor is the winner, 
# sets conditions and choices to return the winning team abbreviation to the WTeam column,
# and a W or L to the WinLoss column on the basis of TEX being in the WTeam field for that row.
Rangers2015['Point_Diff'] =0
Rangers2015['Point_Diff'] = np.where((Rangers2015.H_Team == 'TEX'),Rangers2015['H_Score'] - Rangers2015['V_Score'],Rangers2015.Point_Diff)
Rangers2015['Point_Diff'] = np.where((Rangers2015.H_Team != 'TEX'),Rangers2015['V_Score'] - Rangers2015['H_Score'],Rangers2015.Point_Diff)
conditions = [(Rangers2015['H_Score'] > Rangers2015['V_Score']),(Rangers2015['H_Score'] < Rangers2015['V_Score'])]
choices = ['home','visitor']
Rangers2015['Winner'] = np.select(conditions,choices,default = 'null')
cond_for_winner = [(Rangers2015['Winner']=='home'),(Rangers2015['Winner']=='visitor')]
choices_for_winner = [Rangers2015['H_Team'],Rangers2015['V_Team']]
Rangers2015['WTeam'] = np.select(cond_for_winner,choices_for_winner,default='null')
Rangers2015['WinLoss'] = Rangers2015.apply(lambda row: 'W' if row.WTeam == 'TEX' else 'L',axis=1)
# Creates individual dataframes for Before Severe Storms (games played prior to 5/4/2015), 
# During Severe Storms (between 5/4-6/23/2015 based on the dates of FEMA disaster declarations),
# After Severe Storms (games played from 6/24/2015 to the end of the regular season.)
Rangers2015BSS = Rangers2015.loc[(Rangers2015['Date']<'2015-05-04')]
Rangers2015ASS = Rangers2015.loc[(Rangers2015['Date']>='2015-06-24')]
Rangers2015DSS = Rangers2015.loc[(Rangers2015['Date']>='2015-05-04')&(Rangers2015['Date']<'2015-06-24')]
# Creates dataframes for full season home, full season away, Before Severe Storms home, Before Severe Storms away, After Severe Storms home, 
# After Severe Storms away, During Severe Storms home, and During Severe Storms away
Rangers2015FShome = Rangers2015.loc[(Rangers2015['H_Team']=='TEX')]
Rangers2015FShome['Point_Diff'] = Rangers2015FShome['H_Score'] - Rangers2015FShome['V_Score']
Rangers2015FSaway = Rangers2015.loc[(Rangers2015['V_Team']=='TEX')]
Rangers2015FSaway['Point_Diff'] = Rangers2015FSaway['V_Score'] - Rangers2015FSaway['H_Score']
Rangers2015BSShome = Rangers2015FShome.loc[(Rangers2015FShome['Date']<'2015-04-17')]
Rangers2015BSShome['Point_Diff'] = Rangers2015BSShome['H_Score'] - Rangers2015BSShome['V_Score']
Rangers2015ASShome = Rangers2015FShome.loc[(Rangers2015FShome['Date']>='2015-06-26')]
Rangers2015ASShome['Point_Diff'] = Rangers2015ASShome['H_Score'] - Rangers2015ASShome['V_Score']
Rangers2015DSShome = Rangers2015FShome.loc[(Rangers2015FShome['Date']>='2015-04-17')&(Rangers2015FShome['Date']<'2015-06-26')]
Rangers2015DSShome['Point_Diff'] = Rangers2015DSShome['H_Score'] - Rangers2015DSShome['V_Score']
Rangers2015BSSaway = Rangers2015FSaway.loc[(Rangers2015FSaway['Date']<'2015-04-17')]
Rangers2015BSSaway['Point_Diff'] = Rangers2015BSSaway['V_Score'] - Rangers2015BSSaway['H_Score']
Rangers2015ASSaway = Rangers2015FSaway.loc[(Rangers2015FSaway['Date']>='2015-06-26')]
Rangers2015ASSaway['Point_Diff'] = Rangers2015ASSaway['V_Score'] - Rangers2015ASSaway['H_Score']
Rangers2015DSSaway = Rangers2015FSaway.loc[(Rangers2015FSaway['Date']>='2015-04-17')&(Rangers2015FSaway['Date']<'2015-06-26')]
Rangers2015DSSaway['Point_Diff'] = Rangers2015DSSaway['V_Score'] - Rangers2015DSSaway['H_Score']
# Win/Loss Records by Full Season, Before Severe Storms, After Severe Storms, During Severe Storms.
RangersFullSeason2015 = Rangers2015.groupby(['WinLoss']).size()
RangersBefore_SevereStorms2015 = Rangers2015BSS.groupby(['WinLoss']).size()
RangersAfter_SevereStorms2015 = Rangers2015ASS.groupby(['WinLoss']).size()
RangersDuring_SevereStorms2015 = Rangers2015DSS.groupby(['WinLoss']).size()
print('Rangers Full Season Win/Loss Records 2015: ', RangersFullSeason2015)
print('Rangers Before Severe Storms Win/Loss Records 2015: ',RangersBefore_SevereStorms2015)
print('Rangers After Severe Storms Win/Loss Records 2015:',RangersAfter_SevereStorms2015)
print('Rangers During Severe Storms Win/Loss Records 2015: ',RangersDuring_SevereStorms2015)
RangersFullSeason2015 = np.array(RangersFullSeason2015)
RangersBefore_SevereStorms2015 = np.array(RangersBefore_SevereStorms2015)
RangersAfter_SevereStorms2015 = np.array(RangersAfter_SevereStorms2015)
RangersDuring_SevereStorms2015 = np.array(RangersDuring_SevereStorms2015)
n_groups = 2
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.2
opacity = 0.8
rects1 = plt.bar(index,RangersFullSeason2015,bar_width, 
                 alpha = opacity,
                 color = 'navy',
                 label = 'Full Season')
rects2 = plt.bar(index + bar_width,RangersBefore_SevereStorms2015,bar_width, 
                 alpha = opacity,
                 color = 'firebrick',
                 label = 'Before SevStorms')
rects3 = plt.bar(index + 2*bar_width,RangersAfter_SevereStorms2015,bar_width, 
                 alpha = opacity,
                 color = 'steelblue',
                 label = 'After SevStorms')
rects4 = plt.bar(index + 3*bar_width,RangersDuring_SevereStorms2015,bar_width, 
                 alpha = opacity,
                 color = 'lightcoral',
                 label = 'During SevStorms')
plt.xlabel('Segment of the Season')
plt.ylabel('Games')
plt.title('Rangers 2015 Win/loss Records by Segment of the Season')
plt.xticks(index + 1.5*bar_width,('Losses','Wins'))
plt.legend(loc = 0,fontsize='xx-small',ncol=3)
plt.tight_layout()
plt.show()
# Percentages for Full Season, Before Severe Storms, After Severe Storms, During Severe Storms
RangersFSPercentWin2015 = Rangers2015.groupby(['WinLoss']).size()/len(Rangers2015.index)
RangersBSSPercentWin2015 = Rangers2015BSS.groupby(['WinLoss']).size()/len(Rangers2015BSS.index)
RangersASSPercentWin2015 = Rangers2015ASS.groupby(['WinLoss']).size()/len(Rangers2015ASS.index)
RangersDSSPercentWin2015 = Rangers2015DSS.groupby(['WinLoss']).size()/len(Rangers2015DSS.index)
print('Rangers Full Season Win/Loss Percentages 2015: ',RangersFSPercentWin2015)
print('Rangers Before Severe Storms Win/Loss Percentages 2015: ',RangersBSSPercentWin2015)
print('Rangers After Severe Storms Win/Loss Percentages 2015: ',RangersASSPercentWin2015)
print('Rangers During Severe Storms Win/Loss Percentages 2015: ',RangersDSSPercentWin2015)
# Plotting the Win/Loss Ratios for the Rangers 2015 Season
n_groups = 2
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.2
opacity = 0.8
rects1 = plt.bar(index,RangersFSPercentWin2015,bar_width, 
                 alpha = opacity,
                 color = 'navy',
                 label = 'Full Season')
rects2 = plt.bar(index + bar_width,RangersBSSPercentWin2015,bar_width, 
                 alpha = opacity,
                 color = 'firebrick',
                 label = 'Before SevStorms')
rects3 = plt.bar(index + 2*bar_width,RangersASSPercentWin2015,bar_width, 
                 alpha = opacity,
                 color = 'steelblue',
                 label = 'After SevStorms')
rects4 = plt.bar(index + 3*bar_width,RangersDSSPercentWin2015,bar_width, 
                 alpha = opacity,
                 color = 'lightcoral',
                 label = 'During SevStorms')
plt.xlabel('Segment of the Season')
plt.ylabel('Percentages')
plt.title('Rangers 2015 Win/loss Percentages by Segment of the Season')
plt.xticks(index + 1.5*bar_width,('Losses','Wins'))
plt.legend(loc = 0,fontsize='xx-small',ncol=3)
plt.tight_layout()
plt.show()
# Win/Loss Records for Home vs. Away for Full Season, Before Severe Storms, After Severe Storms, During Severe Storms
RangersFullSeason2015Home = Rangers2015FShome.groupby(['WinLoss']).size()
RangersBefore_SevereStorms2015Home = Rangers2015BSShome.groupby(['WinLoss']).size()
RangersAfter_SevereStorms2015Home = Rangers2015ASShome.groupby(['WinLoss']).size()
RangersDuring_SevereStorms2015Home = Rangers2015DSShome.groupby(['WinLoss']).size()
print('Rangers Full Season Home Win/Loss Records 2015', RangersFullSeason2015Home)
print('Rangers Before Severe Storms Home Win/Loss Records 2015',RangersBefore_SevereStorms2015Home)
print('Rangers After Severe Storms Home Win/Loss Records 2015',RangersAfter_SevereStorms2015Home)
print('Rangers During Severe Storms Home Win/Loss Records 2015',RangersDuring_SevereStorms2015Home)
RangersFullSeason2015Away = Rangers2015FSaway.groupby(['WinLoss']).size()
RangersBefore_SevereStorms2015Away = Rangers2015BSSaway.groupby(['WinLoss']).size()
RangersAfter_SevereStorms2015Away = Rangers2015ASSaway.groupby(['WinLoss']).size()
RangersDuring_SevereStorms2015Away = Rangers2015DSSaway.groupby(['WinLoss']).size()
print('Rangers Full Season AwayWin/Loss Records 2015', RangersFullSeason2015Away)
print('Rangers Before Severe Storms Away Win/Loss Records 2015',RangersBefore_SevereStorms2015Away)
print('Rangers After Severe Storms Away Win/Loss Records 2015',RangersAfter_SevereStorms2015Away)
print('Rangers During Severe Storms Away Win/Loss Records 2015',RangersDuring_SevereStorms2015Away)
# Percentages for home vs. away Full Season, Before Severe Storms, After Severe Storms, During Severe Storms
RangersFSPercentWin2015home = Rangers2015FShome.groupby(['WinLoss']).size()/len(Rangers2015FShome.index)
RangersBSSPercentWin2015home = Rangers2015BSShome.groupby(['WinLoss']).size()/len(Rangers2015BSShome.index)
RangersASSPercentWin2015home = Rangers2015ASShome.groupby(['WinLoss']).size()/len(Rangers2015ASShome.index)
RangersDSSPercentWin2015home = Rangers2015DSShome.groupby(['WinLoss']).size()/len(Rangers2015DSShome.index)
print('Rangers Full Season Home Win/Loss Percentages',RangersFSPercentWin2015home)
print('Rangers Before Severe Storms Home Win/Loss Percentages',RangersBSSPercentWin2015home)
print('Rangers After Severe Storms Home Win/Loss Percentages',RangersASSPercentWin2015home)
print('Rangers During Severe Storms Home Win/Loss Percentages',RangersDSSPercentWin2015home)
RangersFSPercentWin2015away = Rangers2015FSaway.groupby(['WinLoss']).size()/len(Rangers2015FSaway.index)
RangersBSSPercentWin2015away = Rangers2015BSSaway.groupby(['WinLoss']).size()/len(Rangers2015BSSaway.index)
RangersASSPercentWin2015away = Rangers2015ASSaway.groupby(['WinLoss']).size()/len(Rangers2015ASSaway.index)
RangersDSSPercentWin2015away = Rangers2015DSSaway.groupby(['WinLoss']).size()/len(Rangers2015DSSaway.index)
print('Rangers Full Season Away Win/Loss Percentages 2015',RangersFSPercentWin2015away)
print('Rangers Before Severe Storms Away Win/Loss Percentages 2015',RangersBSSPercentWin2015away)
print('Rangers After Severe Storms Away Win/Loss Percentages 2015',RangersASSPercentWin2015away)
print('Rangers During Severe Storms Away Win/Loss Percentages 2015',RangersDSSPercentWin2015away)
# Plotting the Win/Loss Ratios for the Rangers 2015 Season Compare Home vs. Away
n_groups = 2
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.1
opacity = 0.8
FSHome = plt.bar(index,RangersFSPercentWin2015home,bar_width, 
                 alpha = opacity,
                 color = 'navy',
                 label = 'Full Season Home Games')
FSAway = plt.bar(index + bar_width,RangersFSPercentWin2015away,bar_width, 
                 alpha = opacity,
                 color = 'cornflowerblue',
                 label = 'Full Season Away Games')
BSSHome = plt.bar(index + 2*bar_width,RangersBSSPercentWin2015home,bar_width, 
                 alpha = opacity,
                 color = 'firebrick',
                 label = 'Before SevStorms Home Games')
BSSAway = plt.bar(index + 3*bar_width,RangersBSSPercentWin2015away,bar_width,
                 alpha = opacity,
                 color = 'indianred',
                 label = 'Before SevStorms Away Games')
ASSHome = plt.bar(index + 4*bar_width,RangersASSPercentWin2015home,bar_width, 
                 alpha = opacity,
                 color = 'steelblue',
                 label = 'After SevStorms Home Games')
ASSAway = plt.bar(index + 5*bar_width,RangersASSPercentWin2015away,bar_width, 
                 alpha = opacity,
                 color = 'lightsteelblue',
                 label = 'After SevStorms Away Games')
DSSHome = plt.bar(index + 6*bar_width,RangersDSSPercentWin2015home,bar_width, 
                 alpha = opacity,
                 color = 'maroon',
                 label = 'During SevStorms Home Games')
DSSAway = plt.bar(index + 7*bar_width,RangersDSSPercentWin2015away,bar_width, 
                 alpha = opacity,
                 color = 'lightcoral',
                 label = 'During SevStorms Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Percentages')
plt.title('Rangers 2015 Win/loss Percentages by Segment of the Season and Home vs Away')
plt.xticks(index + 2*bar_width,('Losses','Wins'))
plt.legend(loc = 0,fontsize='x-small')
plt.tight_layout()
plt.show()
# Hits Records by Full Season, Before Severe Storms, After Severe Storms, During Severe Storms
RangersFS2015Hits = sum(Rangers2015['HitsbyTEX'])
RangersBSS2015Hits = sum(Rangers2015BSS['HitsbyTEX'])
RangersASS2015Hits = sum(Rangers2015ASS['HitsbyTEX'])
RangersDSS2015Hits = sum(Rangers2015DSS['HitsbyTEX'])
RangersFS2015Hitshome = sum(Rangers2015FShome['HitsbyTEX'])
RangersBSS2015Hitshome = sum(Rangers2015BSShome['HitsbyTEX'])
RangersASS2015Hitshome = sum(Rangers2015ASShome['HitsbyTEX'])
RangersDSS2015Hitshome = sum(Rangers2015DSShome['HitsbyTEX'])
RangersFS2015Hitsaway = sum(Rangers2015FSaway['HitsbyTEX'])
RangersBSS2015Hitsaway = sum(Rangers2015BSSaway['HitsbyTEX'])
RangersASS2015Hitsaway = sum(Rangers2015ASSaway['HitsbyTEX'])
RangersDSS2015Hitsaway = sum(Rangers2015DSSaway['HitsbyTEX'])
print('Rangers Full Season Hits 2015: ',RangersFS2015Hits)
print('Rangers Full Season Hits 2015 Home Games: ',RangersFS2015Hitshome)
print('Rangers Full Season Hits 2015 Away Games: ',RangersFS2015Hitsaway)
print('Rangers Before Severe Storms Hits 2015: ',RangersBSS2015Hits)
print('Rangers Before Severe Storms Hits 2015 Away Games: ',RangersBSS2015Hitshome)
print('Rangers Before Severe Storms Hits 2015 Home Games: ',RangersBSS2015Hitsaway)
print('Rangers After Severe Storms Hits 2015: ',RangersASS2015Hits)
print('Rangers After Severe Storms Hits 2015 Home Games: ',RangersASS2015Hitshome)
print('Rangers After Severe Storms Hits 2015 Away Games: ',RangersASS2015Hitsaway)
print('Rangers During Severe Storms Hits 2015: ',RangersDSS2015Hits)
print('Rangers During Severe Storms Hits 2015 Home Games: ',RangersDSS2015Hitshome)
print('Rangers During Severe Storms Hits 2015 Away Games: ',RangersDSS2015Hitsaway)
# At Bats Records by Full Season, Before Severe Storms, After Severe Storms, During Severe Storms
RangersFS2015AtBats = sum(Rangers2015['ABbyTEX'])
RangersBSS2015AtBats = sum(Rangers2015BSS['ABbyTEX'])
RangersASS2015AtBats = sum(Rangers2015ASS['ABbyTEX'])
RangersDSS2015AtBats = sum(Rangers2015DSS['ABbyTEX'])
RangersFS2015AtBatshome = sum(Rangers2015FShome['ABbyTEX'])
RangersBSS2015AtBatshome = sum(Rangers2015BSShome['ABbyTEX'])
RangersASS2015AtBatshome = sum(Rangers2015ASShome['ABbyTEX'])
RangersDSS2015AtBatshome = sum(Rangers2015DSShome['ABbyTEX'])
RangersFS2015AtBatsaway = sum(Rangers2015FSaway['ABbyTEX'])
RangersBSS2015AtBatsaway = sum(Rangers2015BSSaway['ABbyTEX'])
RangersASS2015AtBatsaway = sum(Rangers2015ASSaway['ABbyTEX'])
RangersDSS2015AtBatsaway = sum(Rangers2015DSSaway['ABbyTEX'])
print('Rangers Full Season At Bats 2015: ',RangersFS2015AtBats)
print('Rangers Full Season At Bats 2015 Home Games: ',RangersFS2015AtBatshome)
print('Rangers Full Season At Bats 2015 Away Games: ',RangersFS2015AtBatsaway)
print('Rangers Before Severe Storms At Bats 2015: ',RangersBSS2015AtBats)
print('Rangers Before Severe Storms At Bats 2015 Home Games: ',RangersBSS2015AtBatshome)
print('Rangers Before Severe Storms At Bats 2015 Away Games: ',RangersBSS2015AtBatsaway)
print('Rangers After Severe Storms At Bats 2015: ',RangersASS2015AtBats)
print('Rangers After Severe Storms At Bats 2015 Home Games: ',RangersASS2015AtBatshome)
print('Rangers After Severe Storms At Bats 2015 Away games: ',RangersASS2015AtBatsaway)
print('Rangers During Severe Storms At Bats 2015: ',RangersDSS2015AtBats)
print('Rangers During Severe Storms At Bats 2015 Home Games: ',RangersDSS2015AtBatshome)
print('Rangers During Severe Storms At Bats 2015 Away Games: ',RangersDSS2015AtBatsaway)
# Percent of At Bats resulting in hits by Full Season, Before Severe Storms, After Severe Storms, During Severe Storms
RangersFS2015Hpercent = RangersFS2015Hits/RangersFS2015AtBats
RangersBSS2015Hpercent = RangersBSS2015Hits/RangersBSS2015AtBats
RangersASS2015Hpercent = RangersASS2015Hits/RangersASS2015AtBats
RangersDSS2015Hpercent = RangersDSS2015Hits/RangersDSS2015AtBats
RangersFS2015Hpercenthome = RangersFS2015Hitshome/RangersFS2015AtBatshome
RangersBSS2015Hpercenthome = RangersBSS2015Hitshome/RangersBSS2015AtBatshome
RangersASS2015Hpercenthome = RangersASS2015Hitshome/RangersASS2015AtBatshome
RangersDSS2015Hpercenthome = RangersDSS2015Hitshome/RangersDSS2015AtBatshome
RangersFS2015Hpercentaway = RangersFS2015Hitsaway/RangersFS2015AtBatsaway
RangersBSS2015Hpercentaway = RangersBSS2015Hitsaway/RangersBSS2015AtBatsaway
RangersASS2015Hpercentaway = RangersASS2015Hitsaway/RangersASS2015AtBatsaway
RangersDSS2015Hpercentaway = RangersDSS2015Hitsaway/RangersDSS2015AtBatsaway
print('Rangers Full Season Percentage of At Bats resulting in Hits 2015: ',"{:.2%}".format(RangersFS2015Hpercent))
print('Rangers Full Season Percentage of At Bats resulting in Hits 2015 Home Games: ',"{:.2%}".format(RangersFS2015Hpercenthome))
print('Rangers Full Season Percentage of At Bats resulting in Hits 2015 Away Games: ',"{:.2%}".format(RangersFS2015Hpercentaway))
print('Rangers Before Severe Storms Percentage of At Bats resulting in Hits 2015: ',"{:.2%}".format(RangersBSS2015Hpercent))
print('Rangers Before Severe Storms Percentage of At Bats resulting in Hits 2015 Home Games: ',"{:.2%}".format(RangersBSS2015Hpercenthome))
print('Rangers Before Severe Storms Percentage of At Bats resulting in Hits 2015 Away Games: ',"{:.2%}".format(RangersBSS2015Hpercentaway))
print('Rangers After Severe Storms Percentage of At Bats resulting in Hits 2015: ',"{:.2%}".format(RangersASS2015Hpercent))
print('Rangers After Severe Storms Percentage of At Bats resulting in Hits 2015 Home Games: ',"{:.2%}".format(RangersASS2015Hpercenthome))
print('Rangers After Severe Storms Percentage of At Bats resulting in Hits 2015 Away Games: ',"{:.2%}".format(RangersASS2015Hpercentaway))
print('Rangers During Severe Storms Percentage of At Bats resulting in Hits 2015: ',"{:.2%}".format(RangersDSS2015Hpercent))
print('Rangers During Severe Storms Percentage of At Bats resulting in Hits 2015 Home Games: ',"{:.2%}".format(RangersDSS2015Hpercenthome))
print('Rangers During Severe Storms Percentage of At Bats resulting in Hits 2015 Away Games: ',"{:.2%}".format(RangersDSS2015Hpercentaway))
# Create a CSV for At Bats resulting in Hits based on Full Season, Before Severe Storms, After Severe Storms, and During Severe Storms    
row_list1 = [['Portion of Season','Home vs Away','Hits','At Bats','Percent of At Bats resulting in Hits'],
             ['Full Season','ALL',RangersFS2015Hits,RangersFS2015AtBats,"{:.2%}".format(RangersFS2015Hpercent)],
             ['Full Season','Home',RangersFS2015Hitshome,RangersFS2015AtBatshome,"{:.2%}".format(RangersFS2015Hpercenthome)],
             ['Full Season','Away',RangersFS2015Hitsaway,RangersFS2015AtBatsaway,"{:.2%}".format(RangersFS2015Hpercentaway)],
             ['Before Severe Storms','ALL',RangersBSS2015Hits,RangersBSS2015AtBats,"{:.2%}".format(RangersBSS2015Hpercent)],
             ['Before Severe Storms','Home',RangersBSS2015Hitshome,RangersBSS2015AtBatshome,"{:.2%}".format(RangersBSS2015Hpercenthome)],
             ['Before Severe Storms','Away',RangersBSS2015Hitsaway,RangersBSS2015AtBatsaway,"{:.2%}".format(RangersBSS2015Hpercentaway)],
             ['After Severe Storms','All',RangersASS2015Hits,RangersASS2015AtBats,"{:.2%}".format(RangersASS2015Hpercent)],
             ['After Severe Storms','Home',RangersASS2015Hitshome,RangersASS2015AtBatshome,"{:.2%}".format(RangersASS2015Hpercenthome)],
             ['After Severe Storms','Away',RangersASS2015Hitsaway,RangersASS2015AtBatsaway,"{:.2%}".format(RangersASS2015Hpercentaway)],
             ['During Severe Storms','ALL',RangersDSS2015Hits,RangersDSS2015AtBats,"{:.2%}".format(RangersDSS2015Hpercent)],
             ['During Severe Storms','Home',RangersDSS2015Hits,RangersDSS2015AtBatshome,"{:.2%}".format(RangersDSS2015Hpercenthome)],
             ['During Severe Storms','Away',RangersDSS2015Hits,RangersDSS2015AtBatsaway,"{:.2%}".format(RangersDSS2015Hpercentaway)]]
with open ('Rangers-Hits-AtBats2015.csv','w',newline='') as file:
    writer = csv.writer(file)
    writer.writerows(row_list1) 
# Plotting Hits to At Bat Ratios by Segment of the season
n_groups = 1
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.05
opacity = 0.8
FSALL = plt.bar(index,RangersFS2015Hpercent,bar_width, 
                 alpha = opacity,
                 color = 'royalblue',
                 label = 'Full Season')
FSHome = plt.bar(index + bar_width,RangersFS2015Hpercenthome,bar_width, 
                 alpha = opacity,
                 color = 'navy',
                 label = 'Full Season Home Games')
FSAway = plt.bar(index + 2*bar_width,RangersFS2015Hpercentaway,bar_width, 
                 alpha = opacity,
                 color = 'cornflowerblue',
                 label = 'Full Season Away Games')
BSSALL = plt.bar(index + 3.5*bar_width,RangersBSS2015Hpercent,bar_width, 
                 alpha = opacity,
                 color = 'red',
                 label = 'During SevStorms')
BSSHome = plt.bar(index + 4.5*bar_width,RangersBSS2015Hpercenthome,bar_width, 
                 alpha = opacity,
                 color = 'firebrick',
                 label = 'Before SevStorms Home Games')
BSSAway = plt.bar(index + 5.5*bar_width,RangersBSS2015Hpercentaway,bar_width,
                 alpha = opacity,
                 color = 'indianred',
                 label = 'Before SevStorms Away Games')
ASSALL = plt.bar(index + 7*bar_width,RangersASS2015Hpercent,bar_width, 
                 alpha = opacity,
                 color = 'cadetblue',
                 label = 'After SevStorms')
ASSHome = plt.bar(index + 8*bar_width,RangersASS2015Hpercenthome,bar_width, 
                 alpha = opacity,
                 color = 'steelblue',
                 label = 'After SevStorms Home Games')
ASSAway = plt.bar(index + 9*bar_width,RangersASS2015Hpercentaway,bar_width, 
                 alpha = opacity,
                 color = 'lightsteelblue',
                 label = 'After SevStorms Away Games')
DSSALL = plt.bar(index + 10.5*bar_width,RangersDSS2015Hpercent,bar_width, 
                 alpha = opacity,
                 color = 'tomato',
                 label = 'During SevStorms')
DSSHome = plt.bar(index + 11.5*bar_width,RangersDSS2015Hpercenthome,bar_width, 
                 alpha = opacity,
                 color = 'maroon',
                 label = 'During SevStorms Home Games')
DSSAway = plt.bar(index + 12.5*bar_width,RangersDSS2015Hpercentaway,bar_width, 
                 alpha = opacity,
                 color = 'lightcoral',
                 label = 'During SevStorms Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Hits to At Bats Ratio')
plt.title('Rangers 2015 Hits to At Bats Ratio by Segment of the Season')
plt.xticks([.05,.225,.4,.575],['Full Season','Before SevStorms','After SevStorms','During SevStorms'])
plt.legend(loc = 0,fontsize='xx-small',ncol = 3)
plt.tight_layout()
plt.show()
# Median Points Difference in games where Rangers were at home vs. away Full Season, Before Severe Storms, After Severe Storms, During Severe Storms and full season both home and away
RangersFS2015Points_Diff = Rangers2015.loc[:,'Point_Diff'].median()
RangersBSS2015Points_Diff = Rangers2015BSS.loc[:,'Point_Diff'].median()
RangersASS2015Points_Diff = Rangers2015ASS.loc[:,'Point_Diff'].median()
RangersDSS2015Points_Diff = Rangers2015DSS.loc[:,'Point_Diff'].median()
RangersFS2015Points_DiffHome = Rangers2015FShome.loc[:,'Point_Diff'].median()
RangersFS2015Points_DiffAway = Rangers2015FSaway.loc[:,'Point_Diff'].median()
RangersBSS2015Points_DiffHome = Rangers2015BSShome.loc[:,'Point_Diff'].median()
RangersBSS2015Points_DiffAway = Rangers2015BSSaway.loc[:,'Point_Diff'].median()
RangersASS2015Points_DiffHome = Rangers2015ASShome.loc[:,'Point_Diff'].median()
RangersASS2015Points_DiffAway = Rangers2015ASSaway.loc[:,'Point_Diff'].median()
RangersDSS2015Points_DiffHome = Rangers2015DSShome.loc[:,'Point_Diff'].median()
RangersDSS2015Points_DiffAway = Rangers2015DSSaway.loc[:,'Point_Diff'].median()
print('Rangers Full Season Median Points Difference 2015: ',RangersFS2015Points_Diff)
print('Rangers Full Season Home Games Median Points Difference 2015: ',RangersFS2015Points_DiffHome)
print('Rangers Full Season Away Games Median Points Difference 2015: ',RangersFS2015Points_DiffAway)
print('Rangers Before Severe Storms Median Points Difference 2015: ',RangersBSS2015Points_Diff)
print('Rangers Before Severe Storms Home Games Median Points Difference 2015: ',RangersBSS2015Points_DiffHome)
print('Rangers Before Severe Storms Away Games Points Difference 2015: ',RangersBSS2015Points_DiffAway)
print('Rangers After Severe Storms Median Points Difference 2015: ',RangersASS2015Points_Diff)
print('Rangers After Severe Storms Home Games Median Points Difference 2015: ',RangersASS2015Points_DiffHome)
print('Rangers After Severe Storms Away Games Median Points Difference 2015: ',RangersASS2015Points_DiffAway)
print('Rangers During Severe Storms Median Points Difference 2015: ',RangersDSS2015Points_Diff)
print('Rangers During Severe Storms Home Games Median Points Difference 2015: ',RangersDSS2015Points_DiffHome)
print('Rangers During Severe Storms Away Games Median Points Difference 2015: ',RangersDSS2015Points_DiffAway)
# Plotting the Win/Loss Ratios for the Rangers 2015 Season Compare Home vs. Away
n_groups = 1
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.05
opacity = 0.8
FSALL = plt.bar(index,RangersFS2015Points_Diff,bar_width, 
                 alpha = opacity,
                 color = 'royalblue',
                 label = 'Full Season')
FSHome = plt.bar(index + bar_width,RangersFS2015Points_DiffHome,bar_width, 
                 alpha = opacity,
                 color = 'navy',
                 label = 'Full Season Home Games')
FSAway = plt.bar(index + 2*bar_width,RangersFS2015Points_DiffAway,bar_width, 
                 alpha = opacity,
                 color = 'cornflowerblue',
                 label = 'Full Season Away Games')
BSSALL = plt.bar(index + 3.5*bar_width,RangersBSS2015Points_Diff,bar_width, 
                 alpha = opacity,
                 color = 'red',
                 label = 'During SevStorms')
BSSHome = plt.bar(index + 4.5*bar_width,RangersBSS2015Points_DiffHome,bar_width, 
                 alpha = opacity,
                 color = 'firebrick',
                 label = 'Before SevStorms Home Games')
BSSAway = plt.bar(index + 5.5*bar_width,RangersBSS2015Points_DiffAway,bar_width,
                 alpha = opacity,
                 color = 'indianred',
                 label = 'Before SevStorms Away Games')
ASSALL = plt.bar(index + 7*bar_width,RangersASS2015Points_Diff,bar_width, 
                 alpha = opacity,
                 color = 'cadetblue',
                 label = 'After SevStorms')
ASSHome = plt.bar(index + 8*bar_width,RangersASS2015Points_DiffHome,bar_width, 
                 alpha = opacity,
                 color = 'steelblue',
                 label = 'After SevStorms Home Games')
ASSAway = plt.bar(index + 9*bar_width,RangersASS2015Points_DiffAway,bar_width, 
                 alpha = opacity,
                 color = 'lightsteelblue',
                 label = 'After SevStorms Away Games')
DSSALL = plt.bar(index + 10.5*bar_width,RangersDSS2015Points_Diff,bar_width, 
                 alpha = opacity,
                 color = 'tomato',
                 label = 'During SevStorms')
DSSHome = plt.bar(index + 11.5*bar_width,RangersDSS2015Points_DiffHome,bar_width, 
                 alpha = opacity,
                 color = 'maroon',
                 label = 'During SevStorms Home Games')
DSSAway = plt.bar(index + 12.5*bar_width,RangersDSS2015Points_DiffAway,bar_width, 
                 alpha = opacity,
                 color = 'lightcoral',
                 label = 'During SevStorms Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Median Points Differences')
plt.title('Rangers 2015 Median Points Differences by Segment of the Season')
plt.xticks([.05,.225,.4,.575],['Full Season','Before SevStorms','After SevStorms','During SevStorms'])
plt.legend(loc = 0,fontsize='x-small')
plt.tight_layout()
plt.show()
# Team Earned Run Average for the Rangers full season, Before Severe Storms, After Severe Storms, During Severe Storms, then Home vs. away FS, BSS, ASS, DSS
RangersFS2015teamERA = sum(Rangers2015['EarnedRunsbyTEX'])/len(Rangers2015['EarnedRunsbyTEX'])
RangersBSS2015teamERA = sum(Rangers2015BSS['EarnedRunsbyTEX'])/len(Rangers2015BSS['EarnedRunsbyTEX'])
RangersASS2015teamERA = sum(Rangers2015ASS['EarnedRunsbyTEX'])/len(Rangers2015ASS['EarnedRunsbyTEX'])
RangersDSS2015teamERA = sum(Rangers2015DSS['EarnedRunsbyTEX'])/len(Rangers2015DSS['EarnedRunsbyTEX'])
print('Rangers Full Season Team Earned Run Average 2015: ',RangersFS2015teamERA)
print('Rangers Before Severe Storms Team Earned Run Average 2015: ',RangersBSS2015teamERA)
print('Rangers After Severe Storms Team Earned Run Average 2015: ',RangersASS2015teamERA)
print('Rangers During Severe Storms Team Earned Run Average 2015: ',RangersDSS2015teamERA)
RangersFS2015teamERAhome = sum(Rangers2015FShome['EarnedRunsbyTEX'])/len(Rangers2015FShome['EarnedRunsbyTEX'])
RangersBSS2015teamERAhome = sum(Rangers2015BSShome['EarnedRunsbyTEX'])/len(Rangers2015BSShome['EarnedRunsbyTEX'])
RangersASS2015teamERAhome = sum(Rangers2015ASShome['EarnedRunsbyTEX'])/len(Rangers2015ASShome['EarnedRunsbyTEX'])
RangersDSS2015teamERAhome = sum(Rangers2015DSShome['EarnedRunsbyTEX'])/len(Rangers2015DSShome['EarnedRunsbyTEX'])
print('Rangers Full Season Home Games Team Earned Run Average 2015: ',RangersFS2015teamERAhome)
print('Rangers Before Severe Storms Home Games Team Earned Run Average 2015: ',RangersBSS2015teamERAhome)
print('Rangers After Severe Storms Home Games Team Earned Run Average 2015: ',RangersASS2015teamERAhome)
print('Rangers During Severe Storms Home Games Team Earned Run Average 2015 : ',RangersDSS2015teamERAhome)
RangersFS2015teamERAaway = sum(Rangers2015FSaway['EarnedRunsbyTEX'])/len(Rangers2015FSaway['EarnedRunsbyTEX'])
RangersBSS2015teamERAaway = sum(Rangers2015BSSaway['EarnedRunsbyTEX'])/len(Rangers2015BSSaway['EarnedRunsbyTEX'])
RangersASS2015teamERAaway = sum(Rangers2015ASSaway['EarnedRunsbyTEX'])/len(Rangers2015ASSaway['EarnedRunsbyTEX'])
RangersDSS2015teamERAaway = sum(Rangers2015DSSaway['EarnedRunsbyTEX'])/len(Rangers2015DSSaway['EarnedRunsbyTEX'])
print('Rangers Full Season Away Games Team Earned Run Average 2015: ',RangersFS2015teamERAaway)
print('Rangers Before Severe Storms Away Games Team Earned Run Average 2015: ',RangersBSS2015teamERAaway)
print('Rangers After Severe Storms Away Games Team Earned Run Average 2015: ',RangersASS2015teamERAaway)
print('Rangers During Severe Storms Away Games Team Earned Run Average 2015: ',RangersDSS2015teamERAaway)
# Plotting team ERA by segment of the season
n_groups = 1
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.05
opacity = 0.8
FSALL = plt.bar(index,RangersFS2015teamERA,bar_width, 
                 alpha = opacity,
                 color = 'royalblue',
                 label = 'Full Season')
FSHome = plt.bar(index + bar_width,RangersFS2015teamERAhome,bar_width, 
                 alpha = opacity,
                 color = 'navy',
                 label = 'Full Season Home Games')
FSAway = plt.bar(index + 2*bar_width,RangersFS2015teamERAaway,bar_width, 
                 alpha = opacity,
                 color = 'cornflowerblue',
                 label = 'Full Season Away Games')
BSSALL = plt.bar(index + 3.5*bar_width,RangersBSS2015teamERA,bar_width, 
                 alpha = opacity,
                 color = 'red',
                 label = 'During SevStorms')
BSSHome = plt.bar(index + 4.5*bar_width,RangersBSS2015teamERAhome,bar_width, 
                 alpha = opacity,
                 color = 'firebrick',
                 label = 'Before SevStorms Home Games')
BSSAway = plt.bar(index + 5.5*bar_width,RangersBSS2015teamERAaway,bar_width,
                 alpha = opacity,
                 color = 'indianred',
                 label = 'Before SevStorms Away Games')
ASSALL = plt.bar(index + 7*bar_width,RangersASS2015teamERA,bar_width, 
                 alpha = opacity,
                 color = 'cadetblue',
                 label = 'After SevStorms')
ASSHome = plt.bar(index + 8*bar_width,RangersASS2015teamERAhome,bar_width, 
                 alpha = opacity,
                 color = 'steelblue',
                 label = 'After SevStorms Home Games')
ASSAway = plt.bar(index + 9*bar_width,RangersASS2015teamERAaway,bar_width, 
                 alpha = opacity,
                 color = 'lightsteelblue',
                 label = 'After SevStorms Away Games')
DSSALL = plt.bar(index + 10.5*bar_width,RangersDSS2015teamERA,bar_width, 
                 alpha = opacity,
                 color = 'tomato',
                 label = 'During SevStorms')
DSSHome = plt.bar(index + 11.5*bar_width,RangersDSS2015teamERAhome,bar_width, 
                 alpha = opacity,
                 color = 'maroon',
                 label = 'During SevStorms Home Games')
DSSAway = plt.bar(index + 12.5*bar_width,RangersDSS2015teamERAaway,bar_width, 
                 alpha = opacity,
                 color = 'lightcoral',
                 label = 'During SevStorms Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Median Points Differences')
plt.title('Rangers 2015 Team ERA by Segment of the Season')
plt.xticks([.05,.225,.4,.575],['Full Season','Before SevStorms','After SevStorms','During SevStorms'])
plt.legend(loc = 0,fontsize='xx-small',ncol=3)
plt.tight_layout()
plt.show()
# Create a dataframe of only games the Astros were playing and reset the index
Astros2015 = pd.DataFrame(columns=MLBgames15.columns)
Astros2015 = MLBgames15.loc[(MLBgames15['V_Team']=='HOU')|(MLBgames15['H_Team']=='HOU')] 
Astros2015 = Astros2015.reset_index(drop=True)
# Add columns to the Astros dataframe for hits when the Astros are visitors, hits when the Astros are at home and hits by Astros total.
Astros2015['HitsbyHOUasV'] = pd.to_numeric(Astros2015.apply(lambda row: row.V_Hits if row.V_Team == 'HOU' else 0,axis=1))
Astros2015['HitsbyHOUasH'] = pd.to_numeric(Astros2015.apply(lambda row: row.H_Hits if row.H_Team == 'HOU' else 0,axis=1))
Astros2015['HitsbyHOU'] = Astros2015['HitsbyHOUasV'] + Astros2015['HitsbyHOUasH']
# Add columns to the Astros dataframe for at bats when the Astros are visitors, at bats when the Astros are at home and at bats by Astros total.
Astros2015['ABbyHOUasV'] = pd.to_numeric(Astros2015.apply(lambda row: row.V_AB if row.V_Team == 'HOU' else 0,axis=1))
Astros2015['ABbyHOUasH'] = pd.to_numeric(Astros2015.apply(lambda row: row.H_AB if row.H_Team == 'HOU' else 0,axis=1))
Astros2015['ABbyHOU'] = Astros2015['ABbyHOUasV'] + Astros2015['ABbyHOUasH']
Astros2015.head
# Add columns to the Astros dataframe for at bats when the Astros are visitors, at bats when the Astros are at home and at bats by Astros total.
Astros2015['EarnedRunsbyHOUasV'] = pd.to_numeric(Astros2015.apply(lambda row: row.V_TeamEarnedRuns if row.V_Team == 'HOU' else 0,axis=1))
Astros2015['EarnedRunsbyHOUasH'] = pd.to_numeric(Astros2015.apply(lambda row: row.H_TeamEarnedRuns if row.H_Team == 'HOU' else 0,axis=1))
Astros2015['EarnedRunsbyHOU'] = Astros2015['EarnedRunsbyHOUasV'] + Astros2015['EarnedRunsbyHOUasH']
Astros2015.head
# Converts score columns to numbers
Astros2015['V_Score'] = pd.to_numeric(Astros2015['V_Score'])
Astros2015['H_Score'] = pd.to_numeric(Astros2015['H_Score'])
# Code below adapted from optimumsportsperformance.com/blog/python-pivot-tables/
# This code creates a Point Difference column, sets conditions and choices for 
# the created Winner column which tells if the home or visitor is the winner, 
# sets conditions and choices to return the winning team abbreviation to the WTeam column,
# and a W or L to the WinLoss column on the basis of HOU being in the WTeam field for that row.
Astros2015['Point_Diff'] =0
Astros2015['Point_Diff'] = np.where((Astros2015.H_Team == 'HOU'),Astros2015['H_Score'] - Astros2015['V_Score'],Astros2015.Point_Diff)
Astros2015['Point_Diff'] = np.where((Astros2015.H_Team != 'HOU'),Astros2015['V_Score'] - Astros2015['H_Score'],Astros2015.Point_Diff)
conditions = [(Astros2015['H_Score'] > Astros2015['V_Score']),(Astros2015['H_Score'] < Astros2015['V_Score'])]
choices = ['home','visitor']
Astros2015['Winner'] = np.select(conditions,choices,default = 'null')
cond_for_winner = [(Astros2015['Winner']=='home'),(Astros2015['Winner']=='visitor')]
choices_for_winner = [Astros2015['H_Team'],Astros2015['V_Team']]
Astros2015['WTeam'] = np.select(cond_for_winner,choices_for_winner,default='null')
Astros2015['WinLoss'] = Astros2015.apply(lambda row: 'W' if row.WTeam == 'HOU' else 'L',axis=1)
# Creates individual dataframes for Before Severe Storms (games played prior to 5/4/2015), 
# During Severe Storms (between 5/4-6/23/2015 based on the dates of FEMA disaster declarations),
# After Severe Storms (games played from 6/24/2015 to the end of the regular season.)
Astros2015BSS = Astros2015.loc[(Astros2015['Date']<'2015-05-04')]
Astros2015ASS = Astros2015.loc[(Astros2015['Date']>='2015-06-24')]
Astros2015DSS = Astros2015.loc[(Astros2015['Date']>='2015-05-04')&(Astros2015['Date']<'2015-06-24')]
# Creates dataframes for full season home, full season away, Before Severe Storms home, Before Severe Storms away, After Severe Storms home, 
# After Severe Storms away, During Severe Storms home, and During Severe Storms away
Astros2015FShome = Astros2015.loc[(Astros2015['H_Team']=='HOU')]
Astros2015FShome['Point_Diff'] = Astros2015FShome['H_Score'] - Astros2015FShome['V_Score']
Astros2015FSaway = Astros2015.loc[(Astros2015['V_Team']=='HOU')]
Astros2015FSaway['Point_Diff'] = Astros2015FSaway['V_Score'] - Astros2015FSaway['H_Score']
Astros2015BSShome = Astros2015FShome.loc[(Astros2015FShome['Date']<'2015-04-17')]
Astros2015BSShome['Point_Diff'] = Astros2015BSShome['H_Score'] - Astros2015BSShome['V_Score']
Astros2015ASShome = Astros2015FShome.loc[(Astros2015FShome['Date']>='2015-06-26')]
Astros2015ASShome['Point_Diff'] = Astros2015ASShome['H_Score'] - Astros2015ASShome['V_Score']
Astros2015DSShome = Astros2015FShome.loc[(Astros2015FShome['Date']>='2015-04-17')&(Astros2015FShome['Date']<'2015-06-26')]
Astros2015DSShome['Point_Diff'] = Astros2015DSShome['H_Score'] - Astros2015DSShome['V_Score']
Astros2015BSSaway = Astros2015FSaway.loc[(Astros2015FSaway['Date']<'2015-04-17')]
Astros2015BSSaway['Point_Diff'] = Astros2015BSSaway['V_Score'] - Astros2015BSSaway['H_Score']
Astros2015ASSaway = Astros2015FSaway.loc[(Astros2015FSaway['Date']>='2015-06-26')]
Astros2015ASSaway['Point_Diff'] = Astros2015ASSaway['V_Score'] - Astros2015ASSaway['H_Score']
Astros2015DSSaway = Astros2015FSaway.loc[(Astros2015FSaway['Date']>='2015-04-17')&(Astros2015FSaway['Date']<'2015-06-26')]
Astros2015DSSaway['Point_Diff'] = Astros2015DSSaway['V_Score'] - Astros2015DSSaway['H_Score']
# Win/Loss Records by Full Season, Before Severe Storms, After Severe Storms, During Severe Storms.
AstrosFullSeason2015 = Astros2015.groupby(['WinLoss']).size()
AstrosBefore_SevereStorms2015 = Astros2015BSS.groupby(['WinLoss']).size()
AstrosAfter_SevereStorms2015 = Astros2015ASS.groupby(['WinLoss']).size()
AstrosDuring_SevereStorms2015 = Astros2015DSS.groupby(['WinLoss']).size()
print('Astros Full Season Win/Loss Records 2015: ', AstrosFullSeason2015)
print('Astros Before Severe Storms Win/Loss Records 2015: ',AstrosBefore_SevereStorms2015)
print('Astros After Severe Storms Win/Loss Records 2015:',AstrosAfter_SevereStorms2015)
print('Astros During Severe Storms Win/Loss Records 2015: ',AstrosDuring_SevereStorms2015)
AstrosFullSeason2015 = np.array(AstrosFullSeason2015)
AstrosBefore_SevereStorms2015 = np.array(AstrosBefore_SevereStorms2015)
AstrosAfter_SevereStorms2015 = np.array(AstrosAfter_SevereStorms2015)
AstrosDuring_SevereStorms2015 = np.array(AstrosDuring_SevereStorms2015)
n_groups = 2
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.2
opacity = 0.8
rects1 = plt.bar(index,AstrosFullSeason2015,bar_width, 
                 alpha = opacity,
                 color = 'navy',
                 label = 'Full Season')
rects2 = plt.bar(index + bar_width,AstrosBefore_SevereStorms2015,bar_width, 
                 alpha = opacity,
                 color = 'darkorange',
                 label = 'Before SevStorms')
rects3 = plt.bar(index + 2*bar_width,AstrosAfter_SevereStorms2015,bar_width, 
                 alpha = opacity,
                 color = 'steelblue',
                 label = 'After SevStorms')
rects4 = plt.bar(index + 3*bar_width,AstrosDuring_SevereStorms2015,bar_width, 
                 alpha = opacity,
                 color = 'lightsalmon',
                 label = 'During SevStorms')
plt.xlabel('Segment of the Season')
plt.ylabel('Games')
plt.title('Astros 2015 Win/loss Records by Segment of the Season')
plt.xticks(index + 1.5*bar_width,('Losses','Wins'))
plt.legend(loc = 0,fontsize='xx-small',ncol=3)
plt.tight_layout()
plt.show()
# Percentages for Full Season, Before Severe Storms, After Severe Storms, During Severe Storms
AstrosFSPercentWin2015 = Astros2015.groupby(['WinLoss']).size()/len(Astros2015.index)
AstrosBSSPercentWin2015 = Astros2015BSS.groupby(['WinLoss']).size()/len(Astros2015BSS.index)
AstrosASSPercentWin2015 = Astros2015ASS.groupby(['WinLoss']).size()/len(Astros2015ASS.index)
AstrosDSSPercentWin2015 = Astros2015DSS.groupby(['WinLoss']).size()/len(Astros2015DSS.index)
print('Astros Full Season Win/Loss Percentages 2015: ',AstrosFSPercentWin2015)
print('Astros Before Severe Storms Win/Loss Percentages 2015: ',AstrosBSSPercentWin2015)
print('Astros After Severe Storms Win/Loss Percentages 2015: ',AstrosASSPercentWin2015)
print('Astros During Severe Storms Win/Loss Percentages 2015: ',AstrosDSSPercentWin2015)
# Plotting the Win/Loss Ratios for the Astros 2015 Season
n_groups = 2
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.2
opacity = 0.8
rects1 = plt.bar(index,AstrosFSPercentWin2015,bar_width, 
                 alpha = opacity,
                 color = 'navy',
                 label = 'Full Season')
rects2 = plt.bar(index + bar_width,AstrosBSSPercentWin2015,bar_width, 
                 alpha = opacity,
                 color = 'darkorange',
                 label = 'Before SevStorms')
rects3 = plt.bar(index + 2*bar_width,AstrosASSPercentWin2015,bar_width, 
                 alpha = opacity,
                 color = 'steelblue',
                 label = 'After SevStorms')
rects4 = plt.bar(index + 3*bar_width,AstrosDSSPercentWin2015,bar_width, 
                 alpha = opacity,
                 color = 'lightsalmon',
                 label = 'During SevStorms')
plt.xlabel('Segment of the Season')
plt.ylabel('Percentages')
plt.title('Astros 2015 Win/loss Percentages by Segment of the Season')
plt.xticks(index + 1.5*bar_width,('Losses','Wins'))
plt.legend(loc = 0,fontsize='xx-small',ncol=3)
plt.tight_layout()
plt.show()
# Win/Loss Records for Home vs. Away for Full Season, Before Severe Storms, After Severe Storms, During Severe Storms
AstrosFullSeason2015Home = Astros2015FShome.groupby(['WinLoss']).size()
AstrosBefore_SevereStorms2015Home = Astros2015BSShome.groupby(['WinLoss']).size()
AstrosAfter_SevereStorms2015Home = Astros2015ASShome.groupby(['WinLoss']).size()
AstrosDuring_SevereStorms2015Home = Astros2015DSShome.groupby(['WinLoss']).size()
print('Astros Full Season Home Win/Loss Records 2015', AstrosFullSeason2015Home)
print('Astros Before Severe Storms Home Win/Loss Records 2015',AstrosBefore_SevereStorms2015Home)
print('Astros After Severe Storms Home Win/Loss Records 2015',AstrosAfter_SevereStorms2015Home)
print('Astros During Severe Storms Home Win/Loss Records 2015',AstrosDuring_SevereStorms2015Home)
AstrosFullSeason2015Away = Astros2015FSaway.groupby(['WinLoss']).size()
AstrosBefore_SevereStorms2015Away = Astros2015BSSaway.groupby(['WinLoss']).size()
AstrosAfter_SevereStorms2015Away = Astros2015ASSaway.groupby(['WinLoss']).size()
AstrosDuring_SevereStorms2015Away = Astros2015DSSaway.groupby(['WinLoss']).size()
print('Astros Full Season AwayWin/Loss Records 2015', AstrosFullSeason2015Away)
print('Astros Before Severe Storms Away Win/Loss Records 2015',AstrosBefore_SevereStorms2015Away)
print('Astros After Severe Storms Away Win/Loss Records 2015',AstrosAfter_SevereStorms2015Away)
print('Astros During Severe Storms Away Win/Loss Records 2015',AstrosDuring_SevereStorms2015Away)
# Percentages for home vs. away Full Season, Before Severe Storms, After Severe Storms, During Severe Storms
AstrosFSPercentWin2015home = Astros2015FShome.groupby(['WinLoss']).size()/len(Astros2015FShome.index)
AstrosBSSPercentWin2015home = Astros2015BSShome.groupby(['WinLoss']).size()/len(Astros2015BSShome.index)
AstrosASSPercentWin2015home = Astros2015ASShome.groupby(['WinLoss']).size()/len(Astros2015ASShome.index)
AstrosDSSPercentWin2015home = Astros2015DSShome.groupby(['WinLoss']).size()/len(Astros2015DSShome.index)
print('Astros Full Season Home Win/Loss Percentages',AstrosFSPercentWin2015home)
print('Astros Before Severe Storms Home Win/Loss Percentages',AstrosBSSPercentWin2015home)
print('Astros After Severe Storms Home Win/Loss Percentages',AstrosASSPercentWin2015home)
print('Astros During Severe Storms Home Win/Loss Percentages',AstrosDSSPercentWin2015home)
AstrosFSPercentWin2015away = Astros2015FSaway.groupby(['WinLoss']).size()/len(Astros2015FSaway.index)
AstrosBSSPercentWin2015away = Astros2015BSSaway.groupby(['WinLoss']).size()/len(Astros2015BSSaway.index)
AstrosASSPercentWin2015away = Astros2015ASSaway.groupby(['WinLoss']).size()/len(Astros2015ASSaway.index)
AstrosDSSPercentWin2015away = Astros2015DSSaway.groupby(['WinLoss']).size()/len(Astros2015DSSaway.index)
print('Astros Full Season Away Win/Loss Percentages 2015',AstrosFSPercentWin2015away)
print('Astros Before Severe Storms Away Win/Loss Percentages 2015',AstrosBSSPercentWin2015away)
print('Astros After Severe Storms Away Win/Loss Percentages 2015',AstrosASSPercentWin2015away)
print('Astros During Severe Storms Away Win/Loss Percentages 2015',AstrosDSSPercentWin2015away)
# Plotting the Win/Loss Ratios for the Astros 2015 Season Compare Home vs. Away
n_groups = 2
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.1
opacity = 0.8
FSHome = plt.bar(index,AstrosFSPercentWin2015home,bar_width, 
                 alpha = opacity,
                 color = 'navy',
                 label = 'Full Season Home Games')
FSAway = plt.bar(index + bar_width,AstrosFSPercentWin2015away,bar_width, 
                 alpha = opacity,
                 color = 'cornflowerblue',
                 label = 'Full Season Away Games')
BSSHome = plt.bar(index + 2*bar_width,AstrosBSSPercentWin2015home,bar_width, 
                 alpha = opacity,
                 color = 'darkorange',
                 label = 'Before SevStorms Home Games')
BSSAway = plt.bar(index + 3*bar_width,AstrosBSSPercentWin2015away,bar_width,
                 alpha = opacity,
                 color = 'moccasin',
                 label = 'Before SevStorms Away Games')
ASSHome = plt.bar(index + 4*bar_width,AstrosASSPercentWin2015home,bar_width, 
                 alpha = opacity,
                 color = 'steelblue',
                 label = 'After SevStorms Home Games')
ASSAway = plt.bar(index + 5*bar_width,AstrosASSPercentWin2015away,bar_width, 
                 alpha = opacity,
                 color = 'lightsteelblue',
                 label = 'After SevStorms Away Games')
DSSHome = plt.bar(index + 6*bar_width,AstrosDSSPercentWin2015home,bar_width, 
                 alpha = opacity,
                 color = 'darksalmon',
                 label = 'During SevStorms Home Games')
DSSAway = plt.bar(index + 7*bar_width,AstrosDSSPercentWin2015away,bar_width, 
                 alpha = opacity,
                 color = 'lightsalmon',
                 label = 'During SevStorms Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Percentages')
plt.title('Astros 2015 Win/loss Percentages by Segment of the Season and Home vs Away')
plt.xticks(index + 2*bar_width,('Losses','Wins'))
plt.legend(loc = 0,fontsize='x-small')
plt.tight_layout()
plt.show()
# Hits Records by Full Season, Before Severe Storms, After Severe Storms, During Severe Storms
AstrosFS2015Hits = sum(Astros2015['HitsbyHOU'])
AstrosBSS2015Hits = sum(Astros2015BSS['HitsbyHOU'])
AstrosASS2015Hits = sum(Astros2015ASS['HitsbyHOU'])
AstrosDSS2015Hits = sum(Astros2015DSS['HitsbyHOU'])
AstrosFS2015Hitshome = sum(Astros2015FShome['HitsbyHOU'])
AstrosBSS2015Hitshome = sum(Astros2015BSShome['HitsbyHOU'])
AstrosASS2015Hitshome = sum(Astros2015ASShome['HitsbyHOU'])
AstrosDSS2015Hitshome = sum(Astros2015DSShome['HitsbyHOU'])
AstrosFS2015Hitsaway = sum(Astros2015FSaway['HitsbyHOU'])
AstrosBSS2015Hitsaway = sum(Astros2015BSSaway['HitsbyHOU'])
AstrosASS2015Hitsaway = sum(Astros2015ASSaway['HitsbyHOU'])
AstrosDSS2015Hitsaway = sum(Astros2015DSSaway['HitsbyHOU'])
print('Astros Full Season Hits 2015: ',AstrosFS2015Hits)
print('Astros Full Season Hits 2015 Home Games: ',AstrosFS2015Hitshome)
print('Astros Full Season Hits 2015 Away Games: ',AstrosFS2015Hitsaway)
print('Astros Before Severe Storms Hits 2015: ',AstrosBSS2015Hits)
print('Astros Before Severe Storms Hits 2015 Away Games: ',AstrosBSS2015Hitshome)
print('Astros Before Severe Storms Hits 2015 Home Games: ',AstrosBSS2015Hitsaway)
print('Astros After Severe Storms Hits 2015: ',AstrosASS2015Hits)
print('Astros After Severe Storms Hits 2015 Home Games: ',AstrosASS2015Hitshome)
print('Astros After Severe Storms Hits 2015 Away Games: ',AstrosASS2015Hitsaway)
print('Astros During Severe Storms Hits 2015: ',AstrosDSS2015Hits)
print('Astros During Severe Storms Hits 2015 Home Games: ',AstrosDSS2015Hitshome)
print('Astros During Severe Storms Hits 2015 Away Games: ',AstrosDSS2015Hitsaway)

# At Bats Records by Full Season, Before Severe Storms, After Severe Storms, During Severe Storms
AstrosFS2015AtBats = sum(Astros2015['ABbyHOU'])
AstrosBSS2015AtBats = sum(Astros2015BSS['ABbyHOU'])
AstrosASS2015AtBats = sum(Astros2015ASS['ABbyHOU'])
AstrosDSS2015AtBats = sum(Astros2015DSS['ABbyHOU'])
AstrosFS2015AtBatshome = sum(Astros2015FShome['ABbyHOU'])
AstrosBSS2015AtBatshome = sum(Astros2015BSShome['ABbyHOU'])
AstrosASS2015AtBatshome = sum(Astros2015ASShome['ABbyHOU'])
AstrosDSS2015AtBatshome = sum(Astros2015DSShome['ABbyHOU'])
AstrosFS2015AtBatsaway = sum(Astros2015FSaway['ABbyHOU'])
AstrosBSS2015AtBatsaway = sum(Astros2015BSSaway['ABbyHOU'])
AstrosASS2015AtBatsaway = sum(Astros2015ASSaway['ABbyHOU'])
AstrosDSS2015AtBatsaway = sum(Astros2015DSSaway['ABbyHOU'])
print('Astros Full Season At Bats 2015: ',AstrosFS2015AtBats)
print('Astros Full Season At Bats 2015 Home Games: ',AstrosFS2015AtBatshome)
print('Astros Full Season At Bats 2015 Away Games: ',AstrosFS2015AtBatsaway)
print('Astros Before Severe Storms At Bats 2015: ',AstrosBSS2015AtBats)
print('Astros Before Severe Storms At Bats 2015 Home Games: ',AstrosBSS2015AtBatshome)
print('Astros Before Severe Storms At Bats 2015 Away Games: ',AstrosBSS2015AtBatsaway)
print('Astros After Severe Storms At Bats 2015: ',AstrosASS2015AtBats)
print('Astros After Severe Storms At Bats 2015 Home Games: ',AstrosASS2015AtBatshome)
print('Astros After Severe Storms At Bats 2015 Away games: ',AstrosASS2015AtBatsaway)
print('Astros During Severe Storms At Bats 2015: ',AstrosDSS2015AtBats)
print('Astros During Severe Storms At Bats 2015 Home Games: ',AstrosDSS2015AtBatshome)
print('Astros During Severe Storms At Bats 2015 Away Games: ',AstrosDSS2015AtBatsaway)
# Percent of At Bats resulting in hits by Full Season, Before Severe Storms, After Severe Storms, During Severe Storms
AstrosFS2015Hpercent = AstrosFS2015Hits/AstrosFS2015AtBats
AstrosBSS2015Hpercent = AstrosBSS2015Hits/AstrosBSS2015AtBats
AstrosASS2015Hpercent = AstrosASS2015Hits/AstrosASS2015AtBats
AstrosDSS2015Hpercent = AstrosDSS2015Hits/AstrosDSS2015AtBats
AstrosFS2015Hpercenthome = AstrosFS2015Hitshome/AstrosFS2015AtBatshome
AstrosBSS2015Hpercenthome = AstrosBSS2015Hitshome/AstrosBSS2015AtBatshome
AstrosASS2015Hpercenthome = AstrosASS2015Hitshome/AstrosASS2015AtBatshome
AstrosDSS2015Hpercenthome = AstrosDSS2015Hitshome/AstrosDSS2015AtBatshome
AstrosFS2015Hpercentaway = AstrosFS2015Hitsaway/AstrosFS2015AtBatsaway
AstrosBSS2015Hpercentaway = AstrosBSS2015Hitsaway/AstrosBSS2015AtBatsaway
AstrosASS2015Hpercentaway = AstrosASS2015Hitsaway/AstrosASS2015AtBatsaway
AstrosDSS2015Hpercentaway = AstrosDSS2015Hitsaway/AstrosDSS2015AtBatsaway
print('Astros Full Season Percentage of At Bats resulting in Hits 2015: ',"{:.2%}".format(AstrosFS2015Hpercent))
print('Astros Full Season Percentage of At Bats resulting in Hits 2015 Home Games: ',"{:.2%}".format(AstrosFS2015Hpercenthome))
print('Astros Full Season Percentage of At Bats resulting in Hits 2015 Away Games: ',"{:.2%}".format(AstrosFS2015Hpercentaway))
print('Astros Before Severe Storms Percentage of At Bats resulting in Hits 2015: ',"{:.2%}".format(AstrosBSS2015Hpercent))
print('Astros Before Severe Storms Percentage of At Bats resulting in Hits 2015 Home Games: ',"{:.2%}".format(AstrosBSS2015Hpercenthome))
print('Astros Before Severe Storms Percentage of At Bats resulting in Hits 2015 Away Games: ',"{:.2%}".format(AstrosBSS2015Hpercentaway))
print('Astros After Severe Storms Percentage of At Bats resulting in Hits 2015: ',"{:.2%}".format(AstrosASS2015Hpercent))
print('Astros After Severe Storms Percentage of At Bats resulting in Hits 2015 Home Games: ',"{:.2%}".format(AstrosASS2015Hpercenthome))
print('Astros After Severe Storms Percentage of At Bats resulting in Hits 2015 Away Games: ',"{:.2%}".format(AstrosASS2015Hpercentaway))
print('Astros During Severe Storms Percentage of At Bats resulting in Hits 2015: ',"{:.2%}".format(AstrosDSS2015Hpercent))
print('Astros During Severe Storms Percentage of At Bats resulting in Hits 2015 Home Games: ',"{:.2%}".format(AstrosDSS2015Hpercenthome))
print('Astros During Severe Storms Percentage of At Bats resulting in Hits 2015 Away Games: ',"{:.2%}".format(AstrosDSS2015Hpercentaway))
# Create a CSV for At Bats resulting in Hits based on Full Season, Before Severe Storms, After Severe Storms, and During Severe Storms    
row_list1 = [['Portion of Season','Home vs Away','Hits','At Bats','Percent of At Bats resulting in Hits'],
             ['Full Season','ALL',AstrosFS2015Hits,AstrosFS2015AtBats,"{:.2%}".format(AstrosFS2015Hpercent)],
             ['Full Season','Home',AstrosFS2015Hitshome,AstrosFS2015AtBatshome,"{:.2%}".format(AstrosFS2015Hpercenthome)],
             ['Full Season','Away',AstrosFS2015Hitsaway,AstrosFS2015AtBatsaway,"{:.2%}".format(AstrosFS2015Hpercentaway)],
             ['Before Severe Storms','ALL',AstrosBSS2015Hits,AstrosBSS2015AtBats,"{:.2%}".format(AstrosBSS2015Hpercent)],
             ['Before Severe Storms','Home',AstrosBSS2015Hitshome,AstrosBSS2015AtBatshome,"{:.2%}".format(AstrosBSS2015Hpercenthome)],
             ['Before Severe Storms','Away',AstrosBSS2015Hitsaway,AstrosBSS2015AtBatsaway,"{:.2%}".format(AstrosBSS2015Hpercentaway)],
             ['After Severe Storms','All',AstrosASS2015Hits,AstrosASS2015AtBats,"{:.2%}".format(AstrosASS2015Hpercent)],
             ['After Severe Storms','Home',AstrosASS2015Hitshome,AstrosASS2015AtBatshome,"{:.2%}".format(AstrosASS2015Hpercenthome)],
             ['After Severe Storms','Away',AstrosASS2015Hitsaway,AstrosASS2015AtBatsaway,"{:.2%}".format(AstrosASS2015Hpercentaway)],
             ['During Severe Storms','ALL',AstrosDSS2015Hits,AstrosDSS2015AtBats,"{:.2%}".format(AstrosDSS2015Hpercent)],
             ['During Severe Storms','Home',AstrosDSS2015Hits,AstrosDSS2015AtBatshome,"{:.2%}".format(AstrosDSS2015Hpercenthome)],
             ['During Severe Storms','Away',AstrosDSS2015Hits,AstrosDSS2015AtBatsaway,"{:.2%}".format(AstrosDSS2015Hpercentaway)]]
with open ('Astros-Hits-AtBats2015.csv','w',newline='') as file:
    writer = csv.writer(file)
    writer.writerows(row_list1) 
# Plotting Hits to At Bat Ratios by Segment of the season
n_groups = 1
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.05
opacity = 0.8
FSALL = plt.bar(index,AstrosFS2015Hpercent,bar_width, 
                 alpha = opacity,
                 color = 'royalblue',
                 label = 'Full Season')
FSHome = plt.bar(index + bar_width,AstrosFS2015Hpercenthome,bar_width, 
                 alpha = opacity,
                 color = 'navy',
                 label = 'Full Season Home Games')
FSAway = plt.bar(index + 2*bar_width,AstrosFS2015Hpercentaway,bar_width, 
                 alpha = opacity,
                 color = 'cornflowerblue',
                 label = 'Full Season Away Games')
BSSALL = plt.bar(index + 3.5*bar_width,AstrosBSS2015Hpercent,bar_width, 
                 alpha = opacity,
                 color = 'orange',
                 label = 'During SevStorms')
BSSHome = plt.bar(index + 4.5*bar_width,AstrosBSS2015Hpercenthome,bar_width, 
                 alpha = opacity,
                 color = 'darkorange',
                 label = 'Before SevStorms Home Games')
BSSAway = plt.bar(index + 5.5*bar_width,AstrosBSS2015Hpercentaway,bar_width,
                 alpha = opacity,
                 color = 'moccasin',
                 label = 'Before SevStorms Away Games')
ASSALL = plt.bar(index + 7*bar_width,AstrosASS2015Hpercent,bar_width, 
                 alpha = opacity,
                 color = 'cadetblue',
                 label = 'After SevStorms')
ASSHome = plt.bar(index + 8*bar_width,AstrosASS2015Hpercenthome,bar_width, 
                 alpha = opacity,
                 color = 'steelblue',
                 label = 'After SevStorms Home Games')
ASSAway = plt.bar(index + 9*bar_width,AstrosASS2015Hpercentaway,bar_width, 
                 alpha = opacity,
                 color = 'lightsteelblue',
                 label = 'After SevStorms Away Games')
DSSALL = plt.bar(index + 10.5*bar_width,AstrosDSS2015Hpercent,bar_width, 
                 alpha = opacity,
                 color = 'salmon',
                 label = 'During SevStorms')
DSSHome = plt.bar(index + 11.5*bar_width,AstrosDSS2015Hpercenthome,bar_width, 
                 alpha = opacity,
                 color = 'darksalmon',
                 label = 'During SevStorms Home Games')
DSSAway = plt.bar(index + 12.5*bar_width,AstrosDSS2015Hpercentaway,bar_width, 
                 alpha = opacity,
                 color = 'lightsalmon',
                 label = 'During SevStorms Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Hits to At Bats Ratio')
plt.title('Astros 2015 Hits to At Bats Ratio by Segment of the Season')
plt.xticks([.05,.225,.4,.575],['Full Season','Before SevStorms','After SevStorms','During SevStorms'])
plt.legend(loc = 0,fontsize='xx-small',ncol = 3)
plt.tight_layout()
plt.show()
# Median Points Difference in games where Astros were at home vs. away Full Season, Before Severe Storms, After Severe Storms, During Severe Storms and full season both home and away
AstrosFS2015Points_Diff = Astros2015.loc[:,'Point_Diff'].median()
AstrosBSS2015Points_Diff = Astros2015BSS.loc[:,'Point_Diff'].median()
AstrosASS2015Points_Diff = Astros2015ASS.loc[:,'Point_Diff'].median()
AstrosDSS2015Points_Diff = Astros2015DSS.loc[:,'Point_Diff'].median()
AstrosFS2015Points_DiffHome = Astros2015FShome.loc[:,'Point_Diff'].median()
AstrosFS2015Points_DiffAway = Astros2015FSaway.loc[:,'Point_Diff'].median()
AstrosBSS2015Points_DiffHome = Astros2015BSShome.loc[:,'Point_Diff'].median()
AstrosBSS2015Points_DiffAway = Astros2015BSSaway.loc[:,'Point_Diff'].median()
AstrosASS2015Points_DiffHome = Astros2015ASShome.loc[:,'Point_Diff'].median()
AstrosASS2015Points_DiffAway = Astros2015ASSaway.loc[:,'Point_Diff'].median()
AstrosDSS2015Points_DiffHome = Astros2015DSShome.loc[:,'Point_Diff'].median()
AstrosDSS2015Points_DiffAway = Astros2015DSSaway.loc[:,'Point_Diff'].median()
print('Astros Full Season Median Points Difference 2015: ',AstrosFS2015Points_Diff)
print('Astros Full Season Home Games Median Points Difference 2015: ',AstrosFS2015Points_DiffHome)
print('Astros Full Season Away Games Median Points Difference 2015: ',AstrosFS2015Points_DiffAway)
print('Astros Before Severe Storms Median Points Difference 2015: ',AstrosBSS2015Points_Diff)
print('Astros Before Severe Storms Home Games Median Points Difference 2015: ',AstrosBSS2015Points_DiffHome)
print('Astros Before Severe Storms Away Games Points Difference 2015: ',AstrosBSS2015Points_DiffAway)
print('Astros After Severe Storms Median Points Difference 2015: ',AstrosASS2015Points_Diff)
print('Astros After Severe Storms Home Games Median Points Difference 2015: ',AstrosASS2015Points_DiffHome)
print('Astros After Severe Storms Away Games Median Points Difference 2015: ',AstrosASS2015Points_DiffAway)
print('Astros During Severe Storms Median Points Difference 2015: ',AstrosDSS2015Points_Diff)
print('Astros During Severe Storms Home Games Median Points Difference 2015: ',AstrosDSS2015Points_DiffHome)
print('Astros During Severe Storms Away Games Median Points Difference 2015: ',AstrosDSS2015Points_DiffAway)
# Plotting the Win/Loss Ratios for the Astros 2015 Season Compare Home vs. Away
n_groups = 1
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.05
opacity = 0.8
FSALL = plt.bar(index,AstrosFS2015Points_Diff,bar_width, 
                 alpha = opacity,
                 color = 'royalblue',
                 label = 'Full Season')
FSHome = plt.bar(index + bar_width,AstrosFS2015Points_DiffHome,bar_width, 
                 alpha = opacity,
                 color = 'navy',
                 label = 'Full Season Home Games')
FSAway = plt.bar(index + 2*bar_width,AstrosFS2015Points_DiffAway,bar_width, 
                 alpha = opacity,
                 color = 'cornflowerblue',
                 label = 'Full Season Away Games')
BSSALL = plt.bar(index + 3.5*bar_width,AstrosBSS2015Points_Diff,bar_width, 
                 alpha = opacity,
                 color = 'orange',
                 label = 'During SevStorms')
BSSHome = plt.bar(index + 4.5*bar_width,AstrosBSS2015Points_DiffHome,bar_width, 
                 alpha = opacity,
                 color = 'darkorange',
                 label = 'Before SevStorms Home Games')
BSSAway = plt.bar(index + 5.5*bar_width,AstrosBSS2015Points_DiffAway,bar_width,
                 alpha = opacity,
                 color = 'moccasin',
                 label = 'Before SevStorms Away Games')
ASSALL = plt.bar(index + 7*bar_width,AstrosASS2015Points_Diff,bar_width, 
                 alpha = opacity,
                 color = 'cadetblue',
                 label = 'After SevStorms')
ASSHome = plt.bar(index + 8*bar_width,AstrosASS2015Points_DiffHome,bar_width, 
                 alpha = opacity,
                 color = 'steelblue',
                 label = 'After SevStorms Home Games')
ASSAway = plt.bar(index + 9*bar_width,AstrosASS2015Points_DiffAway,bar_width, 
                 alpha = opacity,
                 color = 'lightsteelblue',
                 label = 'After SevStorms Away Games')
DSSALL = plt.bar(index + 10.5*bar_width,AstrosDSS2015Points_Diff,bar_width, 
                 alpha = opacity,
                 color = 'salmon',
                 label = 'During SevStorms')
DSSHome = plt.bar(index + 11.5*bar_width,AstrosDSS2015Points_DiffHome,bar_width, 
                 alpha = opacity,
                 color = 'darksalmon',
                 label = 'During SevStorms Home Games')
DSSAway = plt.bar(index + 12.5*bar_width,AstrosDSS2015Points_DiffAway,bar_width, 
                 alpha = opacity,
                 color = 'lightsalmon',
                 label = 'During SevStorms Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Median Points Differences')
plt.title('Astros 2015 Median Points Differences by Segment of the Season')
plt.xticks([.05,.225,.4,.575],['Full Season','Before SevStorms','After SevStorms','During SevStorms'])
plt.legend(loc = 0,fontsize='x-small')
plt.tight_layout()
plt.show()
# Team Earned Run Average for the Astros full season, Before Severe Storms, After Severe Storms, During Severe Storms, then Home vs. away FS, BSS, ASS, DSS
AstrosFS2015teamERA = sum(Astros2015['EarnedRunsbyHOU'])/len(Astros2015['EarnedRunsbyHOU'])
AstrosBSS2015teamERA = sum(Astros2015BSS['EarnedRunsbyHOU'])/len(Astros2015BSS['EarnedRunsbyHOU'])
AstrosASS2015teamERA = sum(Astros2015ASS['EarnedRunsbyHOU'])/len(Astros2015ASS['EarnedRunsbyHOU'])
AstrosDSS2015teamERA = sum(Astros2015DSS['EarnedRunsbyHOU'])/len(Astros2015DSS['EarnedRunsbyHOU'])
print('Astros Full Season Team Earned Run Average 2015: ',AstrosFS2015teamERA)
print('Astros Before Severe Storms Team Earned Run Average 2015: ',AstrosBSS2015teamERA)
print('Astros After Severe Storms Team Earned Run Average 2015: ',AstrosASS2015teamERA)
print('Astros During Severe Storms Team Earned Run Average 2015: ',AstrosDSS2015teamERA)
AstrosFS2015teamERAhome = sum(Astros2015FShome['EarnedRunsbyHOU'])/len(Astros2015FShome['EarnedRunsbyHOU'])
AstrosBSS2015teamERAhome = sum(Astros2015BSShome['EarnedRunsbyHOU'])/len(Astros2015BSShome['EarnedRunsbyHOU'])
AstrosASS2015teamERAhome = sum(Astros2015ASShome['EarnedRunsbyHOU'])/len(Astros2015ASShome['EarnedRunsbyHOU'])
AstrosDSS2015teamERAhome = sum(Astros2015DSShome['EarnedRunsbyHOU'])/len(Astros2015DSShome['EarnedRunsbyHOU'])
print('Astros Full Season Home Games Team Earned Run Average 2015: ',AstrosFS2015teamERAhome)
print('Astros Before Severe Storms Home Games Team Earned Run Average 2015: ',AstrosBSS2015teamERAhome)
print('Astros After Severe Storms Home Games Team Earned Run Average 2015: ',AstrosASS2015teamERAhome)
print('Astros During Severe Storms Home Games Team Earned Run Average 2015 : ',AstrosDSS2015teamERAhome)
AstrosFS2015teamERAaway = sum(Astros2015FSaway['EarnedRunsbyHOU'])/len(Astros2015FSaway['EarnedRunsbyHOU'])
AstrosBSS2015teamERAaway = sum(Astros2015BSSaway['EarnedRunsbyHOU'])/len(Astros2015BSSaway['EarnedRunsbyHOU'])
AstrosASS2015teamERAaway = sum(Astros2015ASSaway['EarnedRunsbyHOU'])/len(Astros2015ASSaway['EarnedRunsbyHOU'])
AstrosDSS2015teamERAaway = sum(Astros2015DSSaway['EarnedRunsbyHOU'])/len(Astros2015DSSaway['EarnedRunsbyHOU'])
print('Astros Full Season Away Games Team Earned Run Average 2015: ',AstrosFS2015teamERAaway)
print('Astros Before Severe Storms Away Games Team Earned Run Average 2015: ',AstrosBSS2015teamERAaway)
print('Astros After Severe Storms Away Games Team Earned Run Average 2015: ',AstrosASS2015teamERAaway)
print('Astros During Severe Storms Away Games Team Earned Run Average 2015: ',AstrosDSS2015teamERAaway)
# Plotting team ERA by segment of the season
n_groups = 1
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.05
opacity = 0.8
FSALL = plt.bar(index,AstrosFS2015teamERA,bar_width, 
                 alpha = opacity,
                 color = 'royalblue',
                 label = 'Full Season')
FSHome = plt.bar(index + bar_width,AstrosFS2015teamERAhome,bar_width, 
                 alpha = opacity,
                 color = 'navy',
                 label = 'Full Season Home Games')
FSAway = plt.bar(index + 2*bar_width,AstrosFS2015teamERAaway,bar_width, 
                 alpha = opacity,
                 color = 'cornflowerblue',
                 label = 'Full Season Away Games')
BSSALL = plt.bar(index + 3.5*bar_width,AstrosBSS2015teamERA,bar_width, 
                 alpha = opacity,
                 color = 'orange',
                 label = 'During SevStorms')
BSSHome = plt.bar(index + 4.5*bar_width,AstrosBSS2015teamERAhome,bar_width, 
                 alpha = opacity,
                 color = 'darkorange',
                 label = 'Before SevStorms Home Games')
BSSAway = plt.bar(index + 5.5*bar_width,AstrosBSS2015teamERAaway,bar_width,
                 alpha = opacity,
                 color = 'moccasin',
                 label = 'Before SevStorms Away Games')
ASSALL = plt.bar(index + 7*bar_width,AstrosASS2015teamERA,bar_width, 
                 alpha = opacity,
                 color = 'cadetblue',
                 label = 'After SevStorms')
ASSHome = plt.bar(index + 8*bar_width,AstrosASS2015teamERAhome,bar_width, 
                 alpha = opacity,
                 color = 'steelblue',
                 label = 'After SevStorms Home Games')
ASSAway = plt.bar(index + 9*bar_width,AstrosASS2015teamERAaway,bar_width, 
                 alpha = opacity,
                 color = 'lightsteelblue',
                 label = 'After SevStorms Away Games')
DSSALL = plt.bar(index + 10.5*bar_width,AstrosDSS2015teamERA,bar_width, 
                 alpha = opacity,
                 color = 'salmon',
                 label = 'During SevStorms')
DSSHome = plt.bar(index + 11.5*bar_width,AstrosDSS2015teamERAhome,bar_width, 
                 alpha = opacity,
                 color = 'darksalmon',
                 label = 'During SevStorms Home Games')
DSSAway = plt.bar(index + 12.5*bar_width,AstrosDSS2015teamERAaway,bar_width, 
                 alpha = opacity,
                 color = 'lightsalmon',
                 label = 'During SevStorms Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Median Points Differences')
plt.title('Astros 2015 Team ERA by Segment of the Season')
plt.xticks([.05,.225,.4,.575],['Full Season','Before SevStorms','After SevStorms','During SevStorms'])
plt.legend(loc = 0,fontsize='xx-small',ncol=3)
plt.tight_layout()
plt.show()
# Create a dataframe of only games the Rockies were playing and reset the index
Rockies2013 = pd.DataFrame(columns=MLBgames13.columns)
Rockies2013 = MLBgames13.loc[(MLBgames13['V_Team']=='COL')|(MLBgames13['H_Team']=='COL')] 
Rockies2013 = Rockies2013.reset_index(drop=True)
# Add columns to the Rockies dataframe for hits when the Rockies are visitors, hits when the Rockies are at home and hits by Rockies total.
Rockies2013['HitsbyCOLasV'] = pd.to_numeric(Rockies2013.apply(lambda row: row.V_Hits if row.V_Team == 'COL' else 0,axis=1))
Rockies2013['HitsbyCOLasH'] = pd.to_numeric(Rockies2013.apply(lambda row: row.H_Hits if row.H_Team == 'COL' else 0,axis=1))
Rockies2013['HitsbyCOL'] = Rockies2013['HitsbyCOLasV'] + Rockies2013['HitsbyCOLasH']
# Add columns to the Rockies dataframe for at bats when the Rockies are visitors, at bats when the Rockies are at home and at bats by Rockies total.
Rockies2013['ABbyCOLasV'] = pd.to_numeric(Rockies2013.apply(lambda row: row.V_AB if row.V_Team == 'COL' else 0,axis=1))
Rockies2013['ABbyCOLasH'] = pd.to_numeric(Rockies2013.apply(lambda row: row.H_AB if row.H_Team == 'COL' else 0,axis=1))
Rockies2013['ABbyCOL'] = Rockies2013['ABbyCOLasV'] + Rockies2013['ABbyCOLasH']
Rockies2013.head
# Add columns to the Rockies dataframe for at bats when the Rockies are visitors, at bats when the Rockies are at home and at bats by Rockies total.
Rockies2013['EarnedRunsbyCOLasV'] = pd.to_numeric(Rockies2013.apply(lambda row: row.V_TeamEarnedRuns if row.V_Team == 'COL' else 0,axis=1))
Rockies2013['EarnedRunsbyCOLasH'] = pd.to_numeric(Rockies2013.apply(lambda row: row.H_TeamEarnedRuns if row.H_Team == 'COL' else 0,axis=1))
Rockies2013['EarnedRunsbyCOL'] = Rockies2013['EarnedRunsbyCOLasV'] + Rockies2013['EarnedRunsbyCOLasH']
Rockies2013.head
# Converts score columns to numbers
Rockies2013['V_Score'] = pd.to_numeric(Rockies2013['V_Score'])
Rockies2013['H_Score'] = pd.to_numeric(Rockies2013['H_Score'])
# Code below adapted from optimumsportsperformance.com/blog/python-pivot-tables/
# This code creates a Point Difference column, sets conditions and choices for 
# the created Winner column which tells if the home or visitor is the winner, 
# sets conditions and choices to return the winning team abbreviation to the WTeam column,
# and a W or L to the WinLoss column on the basis of COL being in the WTeam field for that row.
Rockies2013['Point_Diff'] =0
Rockies2013['Point_Diff'] = np.where((Rockies2013.H_Team == 'COL'),Rockies2013['H_Score'] - Rockies2013['V_Score'],Rockies2013.Point_Diff)
Rockies2013['Point_Diff'] = np.where((Rockies2013.H_Team != 'COL'),Rockies2013['V_Score'] - Rockies2013['H_Score'],Rockies2013.Point_Diff)
conditions = [(Rockies2013['H_Score'] > Rockies2013['V_Score']),(Rockies2013['H_Score'] < Rockies2013['V_Score'])]
choices = ['home','visitor']
Rockies2013['Winner'] = np.select(conditions,choices,default = 'null')
cond_for_winner = [(Rockies2013['Winner']=='home'),(Rockies2013['Winner']=='visitor')]
choices_for_winner = [Rockies2013['H_Team'],Rockies2013['V_Team']]
Rockies2013['WTeam'] = np.select(cond_for_winner,choices_for_winner,default='null')
Rockies2013['WinLoss'] = Rockies2013.apply(lambda row: 'W' if row.WTeam == 'COL' else 'L',axis=1)
# Creates individual dataframes for Before Floods (games played prior to 9/12/2013), 
# During Floods (between 9/12-10/1/2013 based on the dates of FEMA disaster declarations),
# After Floods (games played from 10/1/2013 to the end of the regular season.)
Rockies2013BF = Rockies2013.loc[(Rockies2013['Date']<'2013-09-12')]
Rockies2013DF = Rockies2013.loc[(Rockies2013['Date']>='2013-09-12')&(Rockies2013['Date']<'2013-10-02')]
# Creates dataframes for full season home, full season away, Before Floods home, Before Floods away, After Floods home, 
# After Floods away, During Floods home, and During Floods away
Rockies2013FShome = Rockies2013.loc[(Rockies2013['H_Team']=='COL')]
Rockies2013FShome['Point_Diff'] = Rockies2013FShome['H_Score'] - Rockies2013FShome['V_Score']
Rockies2013FSaway = Rockies2013.loc[(Rockies2013['V_Team']=='COL')]
Rockies2013FSaway['Point_Diff'] = Rockies2013FSaway['V_Score'] - Rockies2013FSaway['H_Score']
Rockies2013BFhome = Rockies2013FShome.loc[(Rockies2013FShome['Date']<'2013-09-12')]
Rockies2013BFhome['Point_Diff'] = Rockies2013BFhome['H_Score'] - Rockies2013BFhome['V_Score']
Rockies2013DFhome = Rockies2013FShome.loc[(Rockies2013FShome['Date']>='2013-09-12')&(Rockies2013FShome['Date']<'2013-10-02')]
Rockies2013DFhome['Point_Diff'] = Rockies2013DFhome['H_Score'] - Rockies2013DFhome['V_Score']
Rockies2013BFaway = Rockies2013FSaway.loc[(Rockies2013FSaway['Date']<'2013-09-12')]
Rockies2013BFaway['Point_Diff'] = Rockies2013BFaway['V_Score'] - Rockies2013BFaway['H_Score']
Rockies2013DFaway = Rockies2013FSaway.loc[(Rockies2013FSaway['Date']>='2013-09-12')&(Rockies2013FSaway['Date']<'2013-10-02')]
Rockies2013DFaway['Point_Diff'] = Rockies2013DFaway['V_Score'] - Rockies2013DFaway['H_Score']
# Win/Loss Records by Full Season, Before Floods, After Floods, During Floods.
# print(There is no After Floods data as the season ended before the FEMA disaster ended.)
RockiesFullSeason2013 = Rockies2013.groupby(['WinLoss']).size()
RockiesBefore_Floods2013 = Rockies2013BF.groupby(['WinLoss']).size()
RockiesDuring_Floods2013 = Rockies2013DF.groupby(['WinLoss']).size()
print('Rockies 2013 data does not include after floods grouping because the season ended prior to end of FEMA declared dates.')
print('Rockies Full Season Win/Loss Records 2013: ', RockiesFullSeason2013)
print('Rockies Before Floods Win/Loss Records 2013: ',RockiesBefore_Floods2013)
print('Rockies During Floods Win/Loss Records 2013: ',RockiesDuring_Floods2013)
RockiesFullSeason2013 = np.array(RockiesFullSeason2013)
RockiesBefore_Floods2013 = np.array(RockiesBefore_Floods2013)
RockiesDuring_Floods2013 = np.array(RockiesDuring_Floods2013)
n_groups = 2
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.2
opacity = 0.8
rects1 = plt.bar(index,RockiesFullSeason2013,bar_width, 
alpha = opacity,
color = 'black',
label = 'Full Season')
rects2 = plt.bar(index + bar_width,RockiesBefore_Floods2013,bar_width, 
alpha = opacity,
color = 'darkorchid',
label = 'Before Floods')
rects4 = plt.bar(index + 2*bar_width,RockiesDuring_Floods2013,bar_width, 
alpha = opacity,
color = 'plum',
label = 'During Floods')
plt.xlabel('Segment of the Season')
plt.ylabel('Games')
plt.title('Rockies 2013 Win/loss Records by Segment of the Season')
plt.xticks(index + 1.5*bar_width,('Losses','Wins'))
plt.legend(loc = 0,fontsize='xx-small',ncol=3)
plt.tight_layout()
plt.show()
# Percentages for Full Season, Before Floods, After Floods, During Floods
RockiesFSPercentWin2013 = Rockies2013.groupby(['WinLoss']).size()/len(Rockies2013.index)
RockiesBFPercentWin2013 = Rockies2013BF.groupby(['WinLoss']).size()/len(Rockies2013BF.index)
RockiesDFPercentWin2013 = Rockies2013DF.groupby(['WinLoss']).size()/len(Rockies2013DF.index)
print('Rockies Full Season Win/Loss Percentages 2013: ',RockiesFSPercentWin2013)
print('Rockies Before Floods Win/Loss Percentages 2013: ',RockiesBFPercentWin2013)
print('Rockies During Floods Win/Loss Percentages 2013: ',RockiesDFPercentWin2013)
# Plotting the Win/Loss Ratios for the Rockies 2013 Season
n_groups = 2
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.2
opacity = 0.8
rects1 = plt.bar(index,RockiesFSPercentWin2013,bar_width, 
alpha = opacity,
color = 'black',
label = 'Full Season')
rects2 = plt.bar(index + bar_width,RockiesBFPercentWin2013,bar_width, 
alpha = opacity,
color = 'darkorchid',
label = 'Before Floods')
rects4 = plt.bar(index + 2*bar_width,RockiesDFPercentWin2013,bar_width, 
alpha = opacity,
color = 'silver',
label = 'During Floods')
plt.xlabel('Segment of the Season')
plt.ylabel('Percentages')
plt.title('Rockies 2013 Win/loss Percentages by Segment of the Season')
plt.xticks(index + 1.5*bar_width,('Losses','Wins'))
plt.legend(loc = 0,fontsize='xx-small',ncol=3)
plt.tight_layout()
plt.show()
# Win/Loss Records for Home vs. Away for Full Season, Before Floods, After Floods, During Floods
RockiesFullSeason2013Home = Rockies2013FShome.groupby(['WinLoss']).size()
RockiesBefore_Floods2013Home = Rockies2013BFhome.groupby(['WinLoss']).size()
RockiesDuring_Floods2013Home = Rockies2013DFhome.groupby(['WinLoss']).size()
print('Rockies Full Season Home Win/Loss Records 2013', RockiesFullSeason2013Home)
print('Rockies Before Floods Home Win/Loss Records 2013',RockiesBefore_Floods2013Home)
print('Rockies During Floods Home Win/Loss Records 2013',RockiesDuring_Floods2013Home)
RockiesFullSeason2013Away = Rockies2013FSaway.groupby(['WinLoss']).size()
RockiesBefore_Floods2013Away = Rockies2013BFaway.groupby(['WinLoss']).size()
RockiesDuring_Floods2013Away = Rockies2013DFaway.groupby(['WinLoss']).size()
print('Rockies Full Season Away Win/Loss Records 2013', RockiesFullSeason2013Away)
print('Rockies Before Floods Away Win/Loss Records 2013',RockiesBefore_Floods2013Away)
print('Rockies During Floods Away Win/Loss Records 2013',RockiesDuring_Floods2013Away)

# Percentages for home vs. away Full Season, Before Floods, After Floods, During Floods
RockiesFSPercentWin2013home = Rockies2013FShome.groupby(['WinLoss']).size()/len(Rockies2013FShome.index)
RockiesBFPercentWin2013home = Rockies2013BFhome.groupby(['WinLoss']).size()/len(Rockies2013BFhome.index)
RockiesDFPercentWin2013home = Rockies2013DFhome.groupby(['WinLoss']).size()/len(Rockies2013DFhome.index)
print('Rockies Full Season Home Win/Loss Percentages',RockiesFSPercentWin2013home)
print('Rockies Before Floods Home Win/Loss Percentages',RockiesBFPercentWin2013home)
print('Rockies During Floods Home Win/Loss Percentages',RockiesDFPercentWin2013home)
RockiesFSPercentWin2013away = Rockies2013FSaway.groupby(['WinLoss']).size()/len(Rockies2013FSaway.index)
RockiesBFPercentWin2013away = Rockies2013BFaway.groupby(['WinLoss']).size()/len(Rockies2013BFaway.index)
RockiesDFPercentWin2013away = Rockies2013DFaway.groupby(['WinLoss']).size()/len(Rockies2013DFaway.index)
print('Rockies Full Season Away Win/Loss Percentages 2013',RockiesFSPercentWin2013away)
print('Rockies Before Floods Away Win/Loss Percentages 2013',RockiesBFPercentWin2013away)
print('Rockies During Floods Away Win/Loss Percentages 2013',RockiesDFPercentWin2013away)
# Plotting the Win/Loss Ratios for the Rockies 2013 Season Compare Home vs. Away
n_groups = 2
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.1
opacity = 0.8
FSHome = plt.bar(index,RockiesFSPercentWin2013home,bar_width, 
alpha = opacity,
color = 'black',
label = 'Full Season Home Games')
FSAway = plt.bar(index + bar_width,RockiesFSPercentWin2013away,bar_width, 
alpha = opacity,
color = 'gainsboro',
label = 'Full Season Away Games')
BFHome = plt.bar(index + 2*bar_width,RockiesBFPercentWin2013home,bar_width, 
alpha = opacity,
color = 'darkorchid',
label = 'Before Floods Home Games')
BFAway = plt.bar(index + 3*bar_width,RockiesBFPercentWin2013away,bar_width,
alpha = opacity,
color = 'thistle',
label = 'Before Floods Away Games')
DFHome = plt.bar(index + 4*bar_width,RockiesDFPercentWin2013home,bar_width, 
alpha = opacity,
color = 'darkviolet',
label = 'During Floods Home Games')
DFAway = plt.bar(index + 5*bar_width,RockiesDFPercentWin2013away,bar_width, 
alpha = opacity,
color = 'plum',
label = 'During Floods Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Percentages')
plt.title('Rockies 2013 Win/loss Percentages by Segment of the Season and Home vs Away')
plt.xticks(index + 2*bar_width,('Losses','Wins'))
plt.legend(loc = 0,fontsize='x-small')
plt.tight_layout()
plt.show()
# Hits Records by Full Season, Before Floods, After Floods, During Floods
RockiesFS2013Hits = sum(Rockies2013['HitsbyCOL'])
RockiesBF2013Hits = sum(Rockies2013BF['HitsbyCOL'])
RockiesDF2013Hits = sum(Rockies2013DF['HitsbyCOL'])
RockiesFS2013Hitshome = sum(Rockies2013FShome['HitsbyCOL'])
RockiesBF2013Hitshome = sum(Rockies2013BFhome['HitsbyCOL'])
RockiesDF2013Hitshome = sum(Rockies2013DFhome['HitsbyCOL'])
RockiesFS2013Hitsaway = sum(Rockies2013FSaway['HitsbyCOL'])
RockiesBF2013Hitsaway = sum(Rockies2013BFaway['HitsbyCOL'])
RockiesDF2013Hitsaway = sum(Rockies2013DFaway['HitsbyCOL'])
print('Rockies Full Season Hits 2013: ',RockiesFS2013Hits)
print('Rockies Full Season Hits 2013 Home Games: ',RockiesFS2013Hitshome)
print('Rockies Full Season Hits 2013 Away Games: ',RockiesFS2013Hitsaway)
print('Rockies Before Floods Hits 2013: ',RockiesBF2013Hits)
print('Rockies Before Floods Hits 2013 Away Games: ',RockiesBF2013Hitshome)
print('Rockies Before Floods Hits 2013 Home Games: ',RockiesBF2013Hitsaway)
print('Rockies During Floods Hits 2013: ',RockiesDF2013Hits)
print('Rockies During Floods Hits 2013 Home Games: ',RockiesDF2013Hitshome)
print('Rockies During Floods Hits 2013 Away Games: ',RockiesDF2013Hitsaway)
# At Bats Records by Full Season, Before Floods, After Floods, During Floods
RockiesFS2013AtBats = sum(Rockies2013['ABbyCOL'])
RockiesBF2013AtBats = sum(Rockies2013BF['ABbyCOL'])
RockiesDF2013AtBats = sum(Rockies2013DF['ABbyCOL'])
RockiesFS2013AtBatshome = sum(Rockies2013FShome['ABbyCOL'])
RockiesBF2013AtBatshome = sum(Rockies2013BFhome['ABbyCOL'])
RockiesDF2013AtBatshome = sum(Rockies2013DFhome['ABbyCOL'])
RockiesFS2013AtBatsaway = sum(Rockies2013FSaway['ABbyCOL'])
RockiesBF2013AtBatsaway = sum(Rockies2013BFaway['ABbyCOL'])
RockiesDF2013AtBatsaway = sum(Rockies2013DFaway['ABbyCOL'])
print('Rockies Full Season At Bats 2013: ',RockiesFS2013AtBats)
print('Rockies Full Season At Bats 2013 Home Games: ',RockiesFS2013AtBatshome)
print('Rockies Full Season At Bats 2013 Away Games: ',RockiesFS2013AtBatsaway)
print('Rockies Before Floods At Bats 2013: ',RockiesBF2013AtBats)
print('Rockies Before Floods At Bats 2013 Home Games: ',RockiesBF2013AtBatshome)
print('Rockies Before Floods At Bats 2013 Away Games: ',RockiesBF2013AtBatsaway)
print('Rockies During Floods At Bats 2013: ',RockiesDF2013AtBats)
print('Rockies During Floods At Bats 2013 Home Games: ',RockiesDF2013AtBatshome)
print('Rockies During Floods At Bats 2013 Away Games: ',RockiesDF2013AtBatsaway)
# Percent of At Bats resulting in hits by Full Season, Before Floods, After Floods, During Floods
RockiesFS2013Hpercent = RockiesFS2013Hits/RockiesFS2013AtBats
RockiesBF2013Hpercent = RockiesBF2013Hits/RockiesBF2013AtBats
RockiesDF2013Hpercent = RockiesDF2013Hits/RockiesDF2013AtBats
RockiesFS2013Hpercenthome = RockiesFS2013Hitshome/RockiesFS2013AtBatshome
RockiesBF2013Hpercenthome = RockiesBF2013Hitshome/RockiesBF2013AtBatshome
RockiesDF2013Hpercenthome = RockiesDF2013Hitshome/RockiesDF2013AtBatshome
RockiesFS2013Hpercentaway = RockiesFS2013Hitsaway/RockiesFS2013AtBatsaway
RockiesBF2013Hpercentaway = RockiesBF2013Hitsaway/RockiesBF2013AtBatsaway
RockiesDF2013Hpercentaway = RockiesDF2013Hitsaway/RockiesDF2013AtBatsaway
print('Rockies Full Season Percentage of At Bats resulting in Hits 2013: ',"{:.2%}".format(RockiesFS2013Hpercent))
print('Rockies Full Season Percentage of At Bats resulting in Hits 2013 Home Games: ',"{:.2%}".format(RockiesFS2013Hpercenthome))
print('Rockies Full Season Percentage of At Bats resulting in Hits 2013 Away Games: ',"{:.2%}".format(RockiesFS2013Hpercentaway))
print('Rockies Before Floods Percentage of At Bats resulting in Hits 2013: ',"{:.2%}".format(RockiesBF2013Hpercent))
print('Rockies Before Floods Percentage of At Bats resulting in Hits 2013 Home Games: ',"{:.2%}".format(RockiesBF2013Hpercenthome))
print('Rockies Before Floods Percentage of At Bats resulting in Hits 2013 Away Games: ',"{:.2%}".format(RockiesBF2013Hpercentaway))
print('Rockies During Floods Percentage of At Bats resulting in Hits 2013: ',"{:.2%}".format(RockiesDF2013Hpercent))
print('Rockies During Floods Percentage of At Bats resulting in Hits 2013 Home Games: ',"{:.2%}".format(RockiesDF2013Hpercenthome))
print('Rockies During Floods Percentage of At Bats resulting in Hits 2013 Away Games: ',"{:.2%}".format(RockiesDF2013Hpercentaway))
# Create a CSV for At Bats resulting in Hits based on Full Season, Before Floods, After Floods, and During Floods 
row_list1 = [['Portion of Season','Home vs Away','Hits','At Bats','Percent of At Bats resulting in Hits'],
['Full Season','ALL',RockiesFS2013Hits,RockiesFS2013AtBats,"{:.2%}".format(RockiesFS2013Hpercent)],
['Full Season','Home',RockiesFS2013Hitshome,RockiesFS2013AtBatshome,"{:.2%}".format(RockiesFS2013Hpercenthome)],
['Full Season','Away',RockiesFS2013Hitsaway,RockiesFS2013AtBatsaway,"{:.2%}".format(RockiesFS2013Hpercentaway)],
['Before Floods','ALL',RockiesBF2013Hits,RockiesBF2013AtBats,"{:.2%}".format(RockiesBF2013Hpercent)],
['Before Floods','Home',RockiesBF2013Hitshome,RockiesBF2013AtBatshome,"{:.2%}".format(RockiesBF2013Hpercenthome)],
['Before Floods','Away',RockiesBF2013Hitsaway,RockiesBF2013AtBatsaway,"{:.2%}".format(RockiesBF2013Hpercentaway)],
['During Floods','ALL',RockiesDF2013Hits,RockiesDF2013AtBats,"{:.2%}".format(RockiesDF2013Hpercent)],
['During Floods','Home',RockiesDF2013Hits,RockiesDF2013AtBatshome,"{:.2%}".format(RockiesDF2013Hpercenthome)],
['During Floods','Away',RockiesDF2013Hits,RockiesDF2013AtBatsaway,"{:.2%}".format(RockiesDF2013Hpercentaway)]]
with open ('Rockies-Hits-AtBats2013.csv','w',newline='') as file:
    writer = csv.writer(file)
    writer.writerows(row_list1) 
# Plotting Hits to At Bat Ratios by Segment of the season
n_groups = 1
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.05
opacity = 0.8
FSALL = plt.bar(index,RockiesFS2013Hpercent,bar_width, 
alpha = opacity,
color = 'dimgray',
label = 'Full Season')
FSHome = plt.bar(index + bar_width,RockiesFS2013Hpercenthome,bar_width, 
alpha = opacity,
color = 'black',
label = 'Full Season Home Games')
FSAway = plt.bar(index + 2*bar_width,RockiesFS2013Hpercentaway,bar_width, 
alpha = opacity,
color = 'gainsboro',
label = 'Full Season Away Games')
BFALL = plt.bar(index + 3.5*bar_width,RockiesBF2013Hpercent,bar_width, 
alpha = opacity,
color = 'orchid',
label = 'During Floods')
BFHome = plt.bar(index + 4.5*bar_width,RockiesBF2013Hpercenthome,bar_width, 
alpha = opacity,
color = 'darkorchid',
label = 'Before Floods Home Games')
BFAway = plt.bar(index + 5.5*bar_width,RockiesBF2013Hpercentaway,bar_width,
alpha = opacity,
color = 'thistle',
label = 'Before Floods Away Games')
DFALL = plt.bar(index + 7*bar_width,RockiesDF2013Hpercent,bar_width, 
alpha = opacity,
color = 'violet',
label = 'During Floods')
DFHome = plt.bar(index + 8*bar_width,RockiesDF2013Hpercenthome,bar_width, 
alpha = opacity,
color = 'darkviolet',
label = 'During Floods Home Games')
DFAway = plt.bar(index + 9*bar_width,RockiesDF2013Hpercentaway,bar_width, 
alpha = opacity,
color = 'plum',
label = 'During Floods Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Hits to At Bats Ratio')
plt.title('Rockies 2013 Hits to At Bats Ratio by Segment of the Season')
plt.xticks([.05,.225,.4],['Full Season','Before Floods', 'During Floods'])
plt.legend(loc = 0,fontsize='xx-small',ncol = 3)
plt.tight_layout()
plt.show()
# Median Points Difference in games where Rockies were at home vs. away Full Season, Before Floods, After Floods, During Floods and full season both home and away
RockiesFS2013Points_Diff = Rockies2013.loc[:,'Point_Diff'].median()
RockiesBF2013Points_Diff = Rockies2013BF.loc[:,'Point_Diff'].median()
RockiesDF2013Points_Diff = Rockies2013DF.loc[:,'Point_Diff'].median()
RockiesFS2013Points_DiffHome = Rockies2013FShome.loc[:,'Point_Diff'].median()
RockiesFS2013Points_DiffAway = Rockies2013FSaway.loc[:,'Point_Diff'].median()
RockiesBF2013Points_DiffHome = Rockies2013BFhome.loc[:,'Point_Diff'].median()
RockiesBF2013Points_DiffAway = Rockies2013BFaway.loc[:,'Point_Diff'].median()
RockiesDF2013Points_DiffHome = Rockies2013DFhome.loc[:,'Point_Diff'].median()
RockiesDF2013Points_DiffAway = Rockies2013DFaway.loc[:,'Point_Diff'].median()
print('Rockies Full Season Median Points Difference 2013: ',RockiesFS2013Points_Diff)
print('Rockies Full Season Home Games Median Points Difference 2013: ',RockiesFS2013Points_DiffHome)
print('Rockies Full Season Away Games Median Points Difference 2013: ',RockiesFS2013Points_DiffAway)
print('Rockies Before Floods Median Points Difference 2013: ',RockiesBF2013Points_Diff)
print('Rockies Before Floods Home Games Median Points Difference 2013: ',RockiesBF2013Points_DiffHome)
print('Rockies Before Floods Away Games Points Difference 2013: ',RockiesBF2013Points_DiffAway)
print('Rockies During Floods Median Points Difference 2013: ',RockiesDF2013Points_Diff)
print('Rockies During Floods Home Games Median Points Difference 2013: ',RockiesDF2013Points_DiffHome)
print('Rockies During Floods Away Games Median Points Difference 2013: ',RockiesDF2013Points_DiffAway)
# Plotting the Win/Loss Ratios for the Rockies 2013 Season Compare Home vs. Away
n_groups = 1
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.05
opacity = 0.8
FSALL = plt.bar(index,RockiesFS2013Points_Diff,bar_width, 
alpha = opacity,
color = 'dimgray',
label = 'Full Season')
FSHome = plt.bar(index + bar_width,RockiesFS2013Points_DiffHome,bar_width, 
alpha = opacity,
color = 'black',
label = 'Full Season Home Games')
FSAway = plt.bar(index + 2*bar_width,RockiesFS2013Points_DiffAway,bar_width, 
alpha = opacity,
color = 'gainsboro',
label = 'Full Season Away Games')
BFALL = plt.bar(index + 3.5*bar_width,RockiesBF2013Points_Diff,bar_width, 
alpha = opacity,
color = 'orchid',
label = 'During Floods')
BFHome = plt.bar(index + 4.5*bar_width,RockiesBF2013Points_DiffHome,bar_width, 
alpha = opacity,
color = 'darkorchid',
label = 'Before Floods Home Games')
BFAway = plt.bar(index + 5.5*bar_width,RockiesBF2013Points_DiffAway,bar_width,
alpha = opacity,
color = 'thistle',
label = 'Before Floods Away Games')
DFALL = plt.bar(index + 7*bar_width,RockiesDF2013Points_Diff,bar_width, 
alpha = opacity,
color = 'violet',
label = 'During Floods')
DFHome = plt.bar(index + 8*bar_width,RockiesDF2013Points_DiffHome,bar_width, 
alpha = opacity,
color = 'darkviolet',
label = 'During Floods Home Games')
DFAway = plt.bar(index + 9*bar_width,RockiesDF2013Points_DiffAway,bar_width, 
alpha = opacity,
color = 'plum',
label = 'During Floods Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Median Points Differences')
plt.title('Rockies 2013 Median Points Differences by Segment of the Season')
plt.xticks([.05,.225,.4],['Full Season','Before Floods', 'During Floods'])
plt.legend(loc = 0,fontsize='x-small')
plt.tight_layout()
plt.show()
# Team Earned Run Average for the Rockies full season, Before Floods, After Floods, During Floods, then Home vs. away FS, BF, DF
RockiesFS2013teamERA = sum(Rockies2013['EarnedRunsbyCOL'])/len(Rockies2013['EarnedRunsbyCOL'])
RockiesBF2013teamERA = sum(Rockies2013BF['EarnedRunsbyCOL'])/len(Rockies2013BF['EarnedRunsbyCOL'])
RockiesDF2013teamERA = sum(Rockies2013DF['EarnedRunsbyCOL'])/len(Rockies2013DF['EarnedRunsbyCOL'])
print('Rockies Full Season Team Earned Run Average 2013: ',RockiesFS2013teamERA)
print('Rockies Before Floods Team Earned Run Average 2013: ',RockiesBF2013teamERA)
print('Rockies During Floods Team Earned Run Average 2013: ',RockiesDF2013teamERA)
RockiesFS2013teamERAhome = sum(Rockies2013FShome['EarnedRunsbyCOL'])/len(Rockies2013FShome['EarnedRunsbyCOL'])
RockiesBF2013teamERAhome = sum(Rockies2013BFhome['EarnedRunsbyCOL'])/len(Rockies2013BFhome['EarnedRunsbyCOL'])
RockiesDF2013teamERAhome = sum(Rockies2013DFhome['EarnedRunsbyCOL'])/len(Rockies2013DFhome['EarnedRunsbyCOL'])
print('Rockies Full Season Home Games Team Earned Run Average 2013: ',RockiesFS2013teamERAhome)
print('Rockies Before Floods Home Games Team Earned Run Average 2013: ',RockiesBF2013teamERAhome)
print('Rockies During Floods Home Games Team Earned Run Average 2013 : ',RockiesDF2013teamERAhome)
RockiesFS2013teamERAaway = sum(Rockies2013FSaway['EarnedRunsbyCOL'])/len(Rockies2013FSaway['EarnedRunsbyCOL'])
RockiesBF2013teamERAaway = sum(Rockies2013BFaway['EarnedRunsbyCOL'])/len(Rockies2013BFaway['EarnedRunsbyCOL'])
RockiesDF2013teamERAaway = sum(Rockies2013DFaway['EarnedRunsbyCOL'])/len(Rockies2013DFaway['EarnedRunsbyCOL'])
print('Rockies Full Season Away Games Team Earned Run Average 2013: ',RockiesFS2013teamERAaway)
print('Rockies Before Floods Away Games Team Earned Run Average 2013: ',RockiesBF2013teamERAaway)
print('Rockies During Floods Away Games Team Earned Run Average 2013: ',RockiesDF2013teamERAaway)
# Plotting team ERA by segment of the season
n_groups = 1
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.05
opacity = 0.8
FSALL = plt.bar(index,RockiesFS2013teamERA,bar_width, 
alpha = opacity,
color = 'dimgray',
label = 'Full Season')
FSHome = plt.bar(index + bar_width,RockiesFS2013teamERAhome,bar_width, 
alpha = opacity,
color = 'black',
label = 'Full Season Home Games')
FSAway = plt.bar(index + 2*bar_width,RockiesFS2013teamERAaway,bar_width, 
alpha = opacity,
color = 'gainsboro',
label = 'Full Season Away Games')
BFALL = plt.bar(index + 3.5*bar_width,RockiesBF2013teamERA,bar_width, 
alpha = opacity,
color = 'orchid',
label = 'During Floods')
BFHome = plt.bar(index + 4.5*bar_width,RockiesBF2013teamERAhome,bar_width, 
alpha = opacity,
color = 'darkorchid',
label = 'Before Floods Home Games')
BFAway = plt.bar(index + 5.5*bar_width,RockiesBF2013teamERAaway,bar_width,
alpha = opacity,
color = 'thistle',
label = 'Before Floods Away Games')
DFALL = plt.bar(index + 7*bar_width,RockiesDF2013teamERA,bar_width, 
alpha = opacity,
color = 'violet',
label = 'During Floods')
DFHome = plt.bar(index + 8*bar_width,RockiesDF2013teamERAhome,bar_width, 
alpha = opacity,
color = 'darkviolet',
label = 'During Floods Home Games')
DFAway = plt.bar(index + 9*bar_width,RockiesDF2013teamERAaway,bar_width, 
alpha = opacity,
color = 'plum',
label = 'During Floods Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Median Points Differences')
plt.title('Rockies 2013 Team ERA by Segment of the Season')
plt.xticks([.05,.225,.4],['Full Season','Before Floods', 'During Floods'])
plt.legend(loc = 0,fontsize='xx-small',ncol=3)
plt.tight_layout()
plt.show()
# Create a dataframe of only games the RedSox were playing and reset the index
RedSox2013 = pd.DataFrame(columns=MLBgames13.columns)
RedSox2013 = MLBgames13.loc[(MLBgames13['V_Team']=='BOS')|(MLBgames13['H_Team']=='BOS')] 
RedSox2013 = RedSox2013.reset_index(drop=True)

# Add columns to the RedSox dataframe for hits when the RedSox are visitors, hits when the RedSox are at home and hits by RedSox total.
RedSox2013['HitsbyBOSasV'] = pd.to_numeric(RedSox2013.apply(lambda row: row.V_Hits if row.V_Team == 'BOS' else 0,axis=1))
RedSox2013['HitsbyBOSasH'] = pd.to_numeric(RedSox2013.apply(lambda row: row.H_Hits if row.H_Team == 'BOS' else 0,axis=1))
RedSox2013['HitsbyBOS'] = RedSox2013['HitsbyBOSasV'] + RedSox2013['HitsbyBOSasH']
# Add columns to the RedSox dataframe for at bats when the RedSox are visitors, at bats when the RedSox are at home and at bats by RedSox total.
RedSox2013['ABbyBOSasV'] = pd.to_numeric(RedSox2013.apply(lambda row: row.V_AB if row.V_Team == 'BOS' else 0,axis=1))
RedSox2013['ABbyBOSasH'] = pd.to_numeric(RedSox2013.apply(lambda row: row.H_AB if row.H_Team == 'BOS' else 0,axis=1))
RedSox2013['ABbyBOS'] = RedSox2013['ABbyBOSasV'] + RedSox2013['ABbyBOSasH']
RedSox2013.head
# Add columns to the RedSox dataframe for at bats when the RedSox are visitors, at bats when the RedSox are at home and at bats by RedSox total.
RedSox2013['EarnedRunsbyBOSasV'] = pd.to_numeric(RedSox2013.apply(lambda row: row.V_TeamEarnedRuns if row.V_Team == 'BOS' else 0,axis=1))
RedSox2013['EarnedRunsbyBOSasH'] = pd.to_numeric(RedSox2013.apply(lambda row: row.H_TeamEarnedRuns if row.H_Team == 'BOS' else 0,axis=1))
RedSox2013['EarnedRunsbyBOS'] = RedSox2013['EarnedRunsbyBOSasV'] + RedSox2013['EarnedRunsbyBOSasH']
RedSox2013.head
# Converts score columns to numbers
RedSox2013['V_Score'] = pd.to_numeric(RedSox2013['V_Score'])
RedSox2013['H_Score'] = pd.to_numeric(RedSox2013['H_Score'])
# Code below adapted from optimumsportsperformance.com/blog/python-pivot-tables/
# This code creates a Point Difference column, sets conditions and choices for 
# the created Winner column which tells if the home or visitor is the winner, 
# sets conditions and choices to return the winning team abbreviation to the WTeam column,
# and a W or L to the WinLoss column on the basis of BOS being in the WTeam field for that row.
RedSox2013['Point_Diff'] =0
RedSox2013['Point_Diff'] = np.where((RedSox2013.H_Team == 'BOS'),RedSox2013['H_Score'] - RedSox2013['V_Score'],RedSox2013.Point_Diff)
RedSox2013['Point_Diff'] = np.where((RedSox2013.H_Team != 'BOS'),RedSox2013['V_Score'] - RedSox2013['H_Score'],RedSox2013.Point_Diff)
conditions = [(RedSox2013['H_Score'] > RedSox2013['V_Score']),(RedSox2013['H_Score'] < RedSox2013['V_Score'])]
choices = ['home','visitor']
RedSox2013['Winner'] = np.select(conditions,choices,default = 'null')
cond_for_winner = [(RedSox2013['Winner']=='home'),(RedSox2013['Winner']=='visitor')]
choices_for_winner = [RedSox2013['H_Team'],RedSox2013['V_Team']]
RedSox2013['WTeam'] = np.select(cond_for_winner,choices_for_winner,default='null')
RedSox2013['WinLoss'] = RedSox2013.apply(lambda row: 'W' if row.WTeam == 'BOS' else 'L',axis=1)
# Creates individual dataframes for Before Ter Att (games played prior to 5/4/2013), 
# During Ter Att (between 5/4-6/23/2013 based on the dates of FEMA disaster declarations),
# After Ter Att (games played from 6/24/2013 to the end of the regular season.)
RedSox2013BTA = RedSox2013.loc[(RedSox2013['Date']<'2013-05-04')]
RedSox2013ATA = RedSox2013.loc[(RedSox2013['Date']>='2013-06-24')]
RedSox2013DTA = RedSox2013.loc[(RedSox2013['Date']>='2013-05-04')&(RedSox2013['Date']<'2013-06-24')]
# Creates dataframes for full season home, full season away, Before Ter Att home, Before Ter Att away, After Ter Att home, 
# After Ter Att away, During Ter Att home, and During Ter Att away
RedSox2013FShome = RedSox2013.loc[(RedSox2013['H_Team']=='BOS')]
RedSox2013FShome['Point_Diff'] = RedSox2013FShome['H_Score'] - RedSox2013FShome['V_Score']
RedSox2013FSaway = RedSox2013.loc[(RedSox2013['V_Team']=='BOS')]
RedSox2013FSaway['Point_Diff'] = RedSox2013FSaway['V_Score'] - RedSox2013FSaway['H_Score']
RedSox2013BTAhome = RedSox2013FShome.loc[(RedSox2013FShome['Date']<'2013-04-17')]
RedSox2013BTAhome['Point_Diff'] = RedSox2013BTAhome['H_Score'] - RedSox2013BTAhome['V_Score']
RedSox2013ATAhome = RedSox2013FShome.loc[(RedSox2013FShome['Date']>='2013-06-26')]
RedSox2013ATAhome['Point_Diff'] = RedSox2013ATAhome['H_Score'] - RedSox2013ATAhome['V_Score']
RedSox2013DTAhome = RedSox2013FShome.loc[(RedSox2013FShome['Date']>='2013-04-17')&(RedSox2013FShome['Date']<'2013-06-26')]
RedSox2013DTAhome['Point_Diff'] = RedSox2013DTAhome['H_Score'] - RedSox2013DTAhome['V_Score']
RedSox2013BTAaway = RedSox2013FSaway.loc[(RedSox2013FSaway['Date']<'2013-04-17')]
RedSox2013BTAaway['Point_Diff'] = RedSox2013BTAaway['V_Score'] - RedSox2013BTAaway['H_Score']
RedSox2013ATAaway = RedSox2013FSaway.loc[(RedSox2013FSaway['Date']>='2013-06-26')]
RedSox2013ATAaway['Point_Diff'] = RedSox2013ATAaway['V_Score'] - RedSox2013ATAaway['H_Score']
RedSox2013DTAaway = RedSox2013FSaway.loc[(RedSox2013FSaway['Date']>='2013-04-17')&(RedSox2013FSaway['Date']<'2013-06-26')]
RedSox2013DTAaway['Point_Diff'] = RedSox2013DTAaway['V_Score'] - RedSox2013DTAaway['H_Score']
# Win/Loss Records by Full Season, Before Ter Att, After Ter Att, During Ter Att.
RedSoxFullSeason2013 = RedSox2013.groupby(['WinLoss']).size()
RedSoxBefore_TerAtt2013 = RedSox2013BTA.groupby(['WinLoss']).size()
RedSoxAfter_TerAtt2013 = RedSox2013ATA.groupby(['WinLoss']).size()
RedSoxDuring_TerAtt2013 = RedSox2013DTA.groupby(['WinLoss']).size()
print('RedSox Full Season Win/Loss Records 2013: ', RedSoxFullSeason2013)
print('RedSox Before Ter Att Win/Loss Records 2013: ',RedSoxBefore_TerAtt2013)
print('RedSox After Ter Att Win/Loss Records 2013:',RedSoxAfter_TerAtt2013)
print('RedSox During Ter Att Win/Loss Records 2013: ',RedSoxDuring_TerAtt2013)
RedSoxFullSeason2013 = np.array(RedSoxFullSeason2013)
RedSoxBefore_TerAtt2013 = np.array(RedSoxBefore_TerAtt2013)
RedSoxAfter_TerAtt2013 = np.array(RedSoxAfter_TerAtt2013)
RedSoxDuring_TerAtt2013 = np.array(RedSoxDuring_TerAtt2013)
n_groups = 2
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.2
opacity = 0.8
rects1 = plt.bar(index,RedSoxFullSeason2013,bar_width, 
                 alpha = opacity,
                 color = 'navy',
                 label = 'Full Season')
rects2 = plt.bar(index + bar_width,RedSoxBefore_TerAtt2013,bar_width, 
                 alpha = opacity,
                 color = 'firebrick',
                 label = 'Before Ter Att')
rects3 = plt.bar(index + 2*bar_width,RedSoxAfter_TerAtt2013,bar_width, 
                 alpha = opacity,
                 color = 'steelblue',
                 label = 'After Ter Att')
rects4 = plt.bar(index + 3*bar_width,RedSoxDuring_TerAtt2013,bar_width, 
                 alpha = opacity,
                 color = 'lightcoral',
                 label = 'During Ter Att')
plt.xlabel('Segment of the Season')
plt.ylabel('Games')
plt.title('RedSox 2013 Win/loss Records by Segment of the Season')
plt.xticks(index + 1.5*bar_width,('Losses','Wins'))
plt.legend(loc = 0,fontsize='xx-small',ncol=3)
plt.tight_layout()
plt.show()
# Percentages for Full Season, Before Ter Att, After Ter Att, During Ter Att
RedSoxFSPercentWin2013 = RedSox2013.groupby(['WinLoss']).size()/len(RedSox2013.index)
RedSoxBTAPercentWin2013 = RedSox2013BTA.groupby(['WinLoss']).size()/len(RedSox2013BTA.index)
RedSoxATAPercentWin2013 = RedSox2013ATA.groupby(['WinLoss']).size()/len(RedSox2013ATA.index)
RedSoxDTAPercentWin2013 = RedSox2013DTA.groupby(['WinLoss']).size()/len(RedSox2013DTA.index)
print('RedSox Full Season Win/Loss Percentages 2013: ',RedSoxFSPercentWin2013)
print('RedSox Before Ter Att Win/Loss Percentages 2013: ',RedSoxBTAPercentWin2013)
print('RedSox After Ter Att Win/Loss Percentages 2013: ',RedSoxATAPercentWin2013)
print('RedSox During Ter Att Win/Loss Percentages 2013: ',RedSoxDTAPercentWin2013)
# Plotting the Win/Loss Ratios for the RedSox 2013 Season
n_groups = 2
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.2
opacity = 0.8
rects1 = plt.bar(index,RedSoxFSPercentWin2013,bar_width, 
                 alpha = opacity,
                 color = 'navy',
                 label = 'Full Season')
rects2 = plt.bar(index + bar_width,RedSoxBTAPercentWin2013,bar_width, 
                 alpha = opacity,
                 color = 'firebrick',
                 label = 'Before Ter Att')
rects3 = plt.bar(index + 2*bar_width,RedSoxATAPercentWin2013,bar_width, 
                 alpha = opacity,
                 color = 'steelblue',
                 label = 'After Ter Att')
rects4 = plt.bar(index + 3*bar_width,RedSoxDTAPercentWin2013,bar_width, 
                 alpha = opacity,
                 color = 'lightcoral',
                 label = 'During Ter Att')
plt.xlabel('Segment of the Season')
plt.ylabel('Percentages')
plt.title('RedSox 2013 Win/loss Percentages by Segment of the Season')
plt.xticks(index + 1.5*bar_width,('Losses','Wins'))
plt.legend(loc = 0,fontsize='xx-small',ncol=3)
plt.tight_layout()
plt.show()
# Win/Loss Records for Home vs. Away for Full Season, Before Ter Att, After Ter Att, During Ter Att
RedSoxFullSeason2013Home = RedSox2013FShome.groupby(['WinLoss']).size()
RedSoxBefore_TerAtt2013Home = RedSox2013BTAhome.groupby(['WinLoss']).size()
RedSoxAfter_TerAtt2013Home = RedSox2013ATAhome.groupby(['WinLoss']).size()
RedSoxDuring_TerAtt2013Home = RedSox2013DTAhome.groupby(['WinLoss']).size()
print('RedSox Full Season Home Win/Loss Records 2013', RedSoxFullSeason2013Home)
print('RedSox Before Ter Att Home Win/Loss Records 2013',RedSoxBefore_TerAtt2013Home)
print('RedSox After Ter Att Home Win/Loss Records 2013',RedSoxAfter_TerAtt2013Home)
print('RedSox During Ter Att Home Win/Loss Records 2013',RedSoxDuring_TerAtt2013Home)
RedSoxFullSeason2013Away = RedSox2013FSaway.groupby(['WinLoss']).size()
RedSoxBefore_TerAtt2013Away = RedSox2013BTAaway.groupby(['WinLoss']).size()
RedSoxAfter_TerAtt2013Away = RedSox2013ATAaway.groupby(['WinLoss']).size()
RedSoxDuring_TerAtt2013Away = RedSox2013DTAaway.groupby(['WinLoss']).size()
print('RedSox Full Season AwayWin/Loss Records 2013', RedSoxFullSeason2013Away)
print('RedSox Before Ter Att Away Win/Loss Records 2013',RedSoxBefore_TerAtt2013Away)
print('RedSox After Ter Att Away Win/Loss Records 2013',RedSoxAfter_TerAtt2013Away)
print('RedSox During Ter Att Away Win/Loss Records 2013',RedSoxDuring_TerAtt2013Away)
# Percentages for home vs. away Full Season, Before Ter Att, After Ter Att, During Ter Att
RedSoxFSPercentWin2013home = RedSox2013FShome.groupby(['WinLoss']).size()/len(RedSox2013FShome.index)
RedSoxBTAPercentWin2013home = RedSox2013BTAhome.groupby(['WinLoss']).size()/len(RedSox2013BTAhome.index)
RedSoxATAPercentWin2013home = RedSox2013ATAhome.groupby(['WinLoss']).size()/len(RedSox2013ATAhome.index)
RedSoxDTAPercentWin2013home = RedSox2013DTAhome.groupby(['WinLoss']).size()/len(RedSox2013DTAhome.index)
print('RedSox Full Season Home Win/Loss Percentages',RedSoxFSPercentWin2013home)
print('RedSox Before Ter Att Home Win/Loss Percentages',RedSoxBTAPercentWin2013home)
print('RedSox After Ter Att Home Win/Loss Percentages',RedSoxATAPercentWin2013home)
print('RedSox During Ter Att Home Win/Loss Percentages',RedSoxDTAPercentWin2013home)
RedSoxFSPercentWin2013away = RedSox2013FSaway.groupby(['WinLoss']).size()/len(RedSox2013FSaway.index)
RedSoxBTAPercentWin2013away = RedSox2013BTAaway.groupby(['WinLoss']).size()/len(RedSox2013BTAaway.index)
RedSoxATAPercentWin2013away = RedSox2013ATAaway.groupby(['WinLoss']).size()/len(RedSox2013ATAaway.index)
RedSoxDTAPercentWin2013away = RedSox2013DTAaway.groupby(['WinLoss']).size()/len(RedSox2013DTAaway.index)
print('RedSox Full Season Away Win/Loss Percentages 2013',RedSoxFSPercentWin2013away)
print('RedSox Before Ter Att Away Win/Loss Percentages 2013',RedSoxBTAPercentWin2013away)
print('RedSox After Ter Att Away Win/Loss Percentages 2013',RedSoxATAPercentWin2013away)
print('RedSox During Ter Att Away Win/Loss Percentages 2013',RedSoxDTAPercentWin2013away)
# Plotting the Win/Loss Ratios for the RedSox 2013 Season Compare Home vs. Away
n_groups = 2
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.1
opacity = 0.8
FSHome = plt.bar(index,RedSoxFSPercentWin2013home,bar_width, 
                 alpha = opacity,
                 color = 'navy',
                 label = 'Full Season Home Games')
FSAway = plt.bar(index + bar_width,RedSoxFSPercentWin2013away,bar_width, 
                 alpha = opacity,
                 color = 'cornflowerblue',
                 label = 'Full Season Away Games')
BTAHome = plt.bar(index + 2*bar_width,RedSoxBTAPercentWin2013home,bar_width, 
                 alpha = opacity,
                 color = 'firebrick',
                 label = 'Before Ter Att Home Games')
BTAAway = plt.bar(index + 3*bar_width,RedSoxBTAPercentWin2013away,bar_width,
                 alpha = opacity,
                 color = 'indianred',
                 label = 'Before Ter Att Away Games')
ATAHome = plt.bar(index + 4*bar_width,RedSoxATAPercentWin2013home,bar_width, 
                 alpha = opacity,
                 color = 'steelblue',
                 label = 'After Ter Att Home Games')
ATAAway = plt.bar(index + 5*bar_width,RedSoxATAPercentWin2013away,bar_width, 
                 alpha = opacity,
                 color = 'lightsteelblue',
                 label = 'After Ter Att Away Games')
DTAHome = plt.bar(index + 6*bar_width,RedSoxDTAPercentWin2013home,bar_width, 
                 alpha = opacity,
                 color = 'maroon',
                 label = 'During Ter Att Home Games')
DTAAway = plt.bar(index + 7*bar_width,RedSoxDTAPercentWin2013away,bar_width, 
                 alpha = opacity,
                 color = 'lightcoral',
                 label = 'During Ter Att Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Percentages')
plt.title('RedSox 2013 Win/loss Percentages by Segment of the Season and Home vs Away')
plt.xticks(index + 2*bar_width,('Losses','Wins'))
plt.legend(loc = 0,fontsize='x-small')
plt.tight_layout()
plt.show()
# Hits Records by Full Season, Before Ter Att, After Ter Att, During Ter Att
RedSoxFS2013Hits = sum(RedSox2013['HitsbyBOS'])
RedSoxBTA2013Hits = sum(RedSox2013BTA['HitsbyBOS'])
RedSoxATA2013Hits = sum(RedSox2013ATA['HitsbyBOS'])
RedSoxDTA2013Hits = sum(RedSox2013DTA['HitsbyBOS'])
RedSoxFS2013Hitshome = sum(RedSox2013FShome['HitsbyBOS'])
RedSoxBTA2013Hitshome = sum(RedSox2013BTAhome['HitsbyBOS'])
RedSoxATA2013Hitshome = sum(RedSox2013ATAhome['HitsbyBOS'])
RedSoxDTA2013Hitshome = sum(RedSox2013DTAhome['HitsbyBOS'])
RedSoxFS2013Hitsaway = sum(RedSox2013FSaway['HitsbyBOS'])
RedSoxBTA2013Hitsaway = sum(RedSox2013BTAaway['HitsbyBOS'])
RedSoxATA2013Hitsaway = sum(RedSox2013ATAaway['HitsbyBOS'])
RedSoxDTA2013Hitsaway = sum(RedSox2013DTAaway['HitsbyBOS'])
print('RedSox Full Season Hits 2013: ',RedSoxFS2013Hits)
print('RedSox Full Season Hits 2013 Home Games: ',RedSoxFS2013Hitshome)
print('RedSox Full Season Hits 2013 Away Games: ',RedSoxFS2013Hitsaway)
print('RedSox Before Ter Att Hits 2013: ',RedSoxBTA2013Hits)
print('RedSox Before Ter Att Hits 2013 Away Games: ',RedSoxBTA2013Hitshome)
print('RedSox Before Ter Att Hits 2013 Home Games: ',RedSoxBTA2013Hitsaway)
print('RedSox After Ter Att Hits 2013: ',RedSoxATA2013Hits)
print('RedSox After Ter Att Hits 2013 Home Games: ',RedSoxATA2013Hitshome)
print('RedSox After Ter Att Hits 2013 Away Games: ',RedSoxATA2013Hitsaway)
print('RedSox During Ter Att Hits 2013: ',RedSoxDTA2013Hits)
print('RedSox During Ter Att Hits 2013 Home Games: ',RedSoxDTA2013Hitshome)
print('RedSox During Ter Att Hits 2013 Away Games: ',RedSoxDTA2013Hitsaway)
# At Bats Records by Full Season, Before Ter Att, After Ter Att, During Ter Att
RedSoxFS2013AtBats = sum(RedSox2013['ABbyBOS'])
RedSoxBTA2013AtBats = sum(RedSox2013BTA['ABbyBOS'])
RedSoxATA2013AtBats = sum(RedSox2013ATA['ABbyBOS'])
RedSoxDTA2013AtBats = sum(RedSox2013DTA['ABbyBOS'])
RedSoxFS2013AtBatshome = sum(RedSox2013FShome['ABbyBOS'])
RedSoxBTA2013AtBatshome = sum(RedSox2013BTAhome['ABbyBOS'])
RedSoxATA2013AtBatshome = sum(RedSox2013ATAhome['ABbyBOS'])
RedSoxDTA2013AtBatshome = sum(RedSox2013DTAhome['ABbyBOS'])
RedSoxFS2013AtBatsaway = sum(RedSox2013FSaway['ABbyBOS'])
RedSoxBTA2013AtBatsaway = sum(RedSox2013BTAaway['ABbyBOS'])
RedSoxATA2013AtBatsaway = sum(RedSox2013ATAaway['ABbyBOS'])
RedSoxDTA2013AtBatsaway = sum(RedSox2013DTAaway['ABbyBOS'])
print('RedSox Full Season At Bats 2013: ',RedSoxFS2013AtBats)
print('RedSox Full Season At Bats 2013 Home Games: ',RedSoxFS2013AtBatshome)
print('RedSox Full Season At Bats 2013 Away Games: ',RedSoxFS2013AtBatsaway)
print('RedSox Before Ter Att At Bats 2013: ',RedSoxBTA2013AtBats)
print('RedSox Before Ter Att At Bats 2013 Home Games: ',RedSoxBTA2013AtBatshome)
print('RedSox Before Ter Att At Bats 2013 Away Games: ',RedSoxBTA2013AtBatsaway)
print('RedSox After Ter Att At Bats 2013: ',RedSoxATA2013AtBats)
print('RedSox After Ter Att At Bats 2013 Home Games: ',RedSoxATA2013AtBatshome)
print('RedSox After Ter Att At Bats 2013 Away games: ',RedSoxATA2013AtBatsaway)
print('RedSox During Ter Att At Bats 2013: ',RedSoxDTA2013AtBats)
print('RedSox During Ter Att At Bats 2013 Home Games: ',RedSoxDTA2013AtBatshome)
print('RedSox During Ter Att At Bats 2013 Away Games: ',RedSoxDTA2013AtBatsaway)
# Percent of At Bats resulting in hits by Full Season, Before Ter Att, After Ter Att, During Ter Att
RedSoxFS2013Hpercent = RedSoxFS2013Hits/RedSoxFS2013AtBats
RedSoxBTA2013Hpercent = RedSoxBTA2013Hits/RedSoxBTA2013AtBats
RedSoxATA2013Hpercent = RedSoxATA2013Hits/RedSoxATA2013AtBats
RedSoxDTA2013Hpercent = RedSoxDTA2013Hits/RedSoxDTA2013AtBats
RedSoxFS2013Hpercenthome = RedSoxFS2013Hitshome/RedSoxFS2013AtBatshome
RedSoxBTA2013Hpercenthome = RedSoxBTA2013Hitshome/RedSoxBTA2013AtBatshome
RedSoxATA2013Hpercenthome = RedSoxATA2013Hitshome/RedSoxATA2013AtBatshome
RedSoxDTA2013Hpercenthome = RedSoxDTA2013Hitshome/RedSoxDTA2013AtBatshome
RedSoxFS2013Hpercentaway = RedSoxFS2013Hitsaway/RedSoxFS2013AtBatsaway
RedSoxBTA2013Hpercentaway = RedSoxBTA2013Hitsaway/RedSoxBTA2013AtBatsaway
RedSoxATA2013Hpercentaway = RedSoxATA2013Hitsaway/RedSoxATA2013AtBatsaway
RedSoxDTA2013Hpercentaway = RedSoxDTA2013Hitsaway/RedSoxDTA2013AtBatsaway
print('RedSox Full Season Percentage of At Bats resulting in Hits 2013: ',"{:.2%}".format(RedSoxFS2013Hpercent))
print('RedSox Full Season Percentage of At Bats resulting in Hits 2013 Home Games: ',"{:.2%}".format(RedSoxFS2013Hpercenthome))
print('RedSox Full Season Percentage of At Bats resulting in Hits 2013 Away Games: ',"{:.2%}".format(RedSoxFS2013Hpercentaway))
print('RedSox Before Ter Att Percentage of At Bats resulting in Hits 2013: ',"{:.2%}".format(RedSoxBTA2013Hpercent))
print('RedSox Before Ter Att Percentage of At Bats resulting in Hits 2013 Home Games: ',"{:.2%}".format(RedSoxBTA2013Hpercenthome))
print('RedSox Before Ter Att Percentage of At Bats resulting in Hits 2013 Away Games: ',"{:.2%}".format(RedSoxBTA2013Hpercentaway))
print('RedSox After Ter Att Percentage of At Bats resulting in Hits 2013: ',"{:.2%}".format(RedSoxATA2013Hpercent))
print('RedSox After Ter Att Percentage of At Bats resulting in Hits 2013 Home Games: ',"{:.2%}".format(RedSoxATA2013Hpercenthome))
print('RedSox After Ter Att Percentage of At Bats resulting in Hits 2013 Away Games: ',"{:.2%}".format(RedSoxATA2013Hpercentaway))
print('RedSox During Ter Att Percentage of At Bats resulting in Hits 2013: ',"{:.2%}".format(RedSoxDTA2013Hpercent))
print('RedSox During Ter Att Percentage of At Bats resulting in Hits 2013 Home Games: ',"{:.2%}".format(RedSoxDTA2013Hpercenthome))
print('RedSox During Ter Att Percentage of At Bats resulting in Hits 2013 Away Games: ',"{:.2%}".format(RedSoxDTA2013Hpercentaway))
# Create a CSV for At Bats resulting in Hits based on Full Season, Before Ter Att, After Ter Att, and During Ter Att    
row_list1 = [['Portion of Season','Home vs Away','Hits','At Bats','Percent of At Bats resulting in Hits'],
             ['Full Season','ALL',RedSoxFS2013Hits,RedSoxFS2013AtBats,"{:.2%}".format(RedSoxFS2013Hpercent)],
             ['Full Season','Home',RedSoxFS2013Hitshome,RedSoxFS2013AtBatshome,"{:.2%}".format(RedSoxFS2013Hpercenthome)],
             ['Full Season','Away',RedSoxFS2013Hitsaway,RedSoxFS2013AtBatsaway,"{:.2%}".format(RedSoxFS2013Hpercentaway)],
             ['Before Ter Att','ALL',RedSoxBTA2013Hits,RedSoxBTA2013AtBats,"{:.2%}".format(RedSoxBTA2013Hpercent)],
             ['Before Ter Att','Home',RedSoxBTA2013Hitshome,RedSoxBTA2013AtBatshome,"{:.2%}".format(RedSoxBTA2013Hpercenthome)],
             ['Before Ter Att','Away',RedSoxBTA2013Hitsaway,RedSoxBTA2013AtBatsaway,"{:.2%}".format(RedSoxBTA2013Hpercentaway)],
             ['After Ter Att','All',RedSoxATA2013Hits,RedSoxATA2013AtBats,"{:.2%}".format(RedSoxATA2013Hpercent)],
             ['After Ter Att','Home',RedSoxATA2013Hitshome,RedSoxATA2013AtBatshome,"{:.2%}".format(RedSoxATA2013Hpercenthome)],
             ['After Ter Att','Away',RedSoxATA2013Hitsaway,RedSoxATA2013AtBatsaway,"{:.2%}".format(RedSoxATA2013Hpercentaway)],
             ['During Ter Att','ALL',RedSoxDTA2013Hits,RedSoxDTA2013AtBats,"{:.2%}".format(RedSoxDTA2013Hpercent)],
             ['During Ter Att','Home',RedSoxDTA2013Hits,RedSoxDTA2013AtBatshome,"{:.2%}".format(RedSoxDTA2013Hpercenthome)],
             ['During Ter Att','Away',RedSoxDTA2013Hits,RedSoxDTA2013AtBatsaway,"{:.2%}".format(RedSoxDTA2013Hpercentaway)]]
with open ('RedSox-Hits-AtBats2013.csv','w',newline='') as file:
    writer = csv.writer(file)
    writer.writerows(row_list1) 
# Plotting Hits to At Bat Ratios by Segment of the season
n_groups = 1
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.05
opacity = 0.8
FSALL = plt.bar(index,RedSoxFS2013Hpercent,bar_width, 
                 alpha = opacity,
                 color = 'royalblue',
                 label = 'Full Season')
FSHome = plt.bar(index + bar_width,RedSoxFS2013Hpercenthome,bar_width, 
                 alpha = opacity,
                 color = 'navy',
                 label = 'Full Season Home Games')
FSAway = plt.bar(index + 2*bar_width,RedSoxFS2013Hpercentaway,bar_width, 
                 alpha = opacity,
                 color = 'cornflowerblue',
                 label = 'Full Season Away Games')
BTAALL = plt.bar(index + 3.5*bar_width,RedSoxBTA2013Hpercent,bar_width, 
                 alpha = opacity,
                 color = 'red',
                 label = 'During Ter Att')
BTAHome = plt.bar(index + 4.5*bar_width,RedSoxBTA2013Hpercenthome,bar_width, 
                 alpha = opacity,
                 color = 'firebrick',
                 label = 'Before Ter Att Home Games')
BTAAway = plt.bar(index + 5.5*bar_width,RedSoxBTA2013Hpercentaway,bar_width,
                 alpha = opacity,
                 color = 'indianred',
                 label = 'Before Ter Att Away Games')
ATAALL = plt.bar(index + 7*bar_width,RedSoxATA2013Hpercent,bar_width, 
                 alpha = opacity,
                 color = 'cadetblue',
                 label = 'After Ter Att')
ATAHome = plt.bar(index + 8*bar_width,RedSoxATA2013Hpercenthome,bar_width, 
                 alpha = opacity,
                 color = 'steelblue',
                 label = 'After Ter Att Home Games')
ATAAway = plt.bar(index + 9*bar_width,RedSoxATA2013Hpercentaway,bar_width, 
                 alpha = opacity,
                 color = 'lightsteelblue',
                 label = 'After Ter Att Away Games')
DTAALL = plt.bar(index + 10.5*bar_width,RedSoxDTA2013Hpercent,bar_width, 
                 alpha = opacity,
                 color = 'tomato',
                 label = 'During Ter Att')
DTAHome = plt.bar(index + 11.5*bar_width,RedSoxDTA2013Hpercenthome,bar_width, 
                 alpha = opacity,
                 color = 'maroon',
                 label = 'During Ter Att Home Games')
DTAAway = plt.bar(index + 12.5*bar_width,RedSoxDTA2013Hpercentaway,bar_width, 
                 alpha = opacity,
                 color = 'lightcoral',
                 label = 'During Ter Att Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Hits to At Bats Ratio')
plt.title('RedSox 2013 Hits to At Bats Ratio by Segment of the Season')
plt.xticks([.05,.225,.4,.575],['Full Season','Before Ter Att','After Ter Att','During Ter Att'])
plt.legend(loc = 0,fontsize='xx-small',ncol = 3)
plt.tight_layout()
plt.show()
# Median Points Difference in games where RedSox were at home vs. away Full Season, Before Ter Att, After Ter Att, During Ter Att and full season both home and away
RedSoxFS2013Points_Diff = RedSox2013.loc[:,'Point_Diff'].median()
RedSoxBTA2013Points_Diff = RedSox2013BTA.loc[:,'Point_Diff'].median()
RedSoxATA2013Points_Diff = RedSox2013ATA.loc[:,'Point_Diff'].median()
RedSoxDTA2013Points_Diff = RedSox2013DTA.loc[:,'Point_Diff'].median()
RedSoxFS2013Points_DiffHome = RedSox2013FShome.loc[:,'Point_Diff'].median()
RedSoxFS2013Points_DiffAway = RedSox2013FSaway.loc[:,'Point_Diff'].median()
RedSoxBTA2013Points_DiffHome = RedSox2013BTAhome.loc[:,'Point_Diff'].median()
RedSoxBTA2013Points_DiffAway = RedSox2013BTAaway.loc[:,'Point_Diff'].median()
RedSoxATA2013Points_DiffHome = RedSox2013ATAhome.loc[:,'Point_Diff'].median()
RedSoxATA2013Points_DiffAway = RedSox2013ATAaway.loc[:,'Point_Diff'].median()
RedSoxDTA2013Points_DiffHome = RedSox2013DTAhome.loc[:,'Point_Diff'].median()
RedSoxDTA2013Points_DiffAway = RedSox2013DTAaway.loc[:,'Point_Diff'].median()
print('RedSox Full Season Median Points Difference 2013: ',RedSoxFS2013Points_Diff)
print('RedSox Full Season Home Games Median Points Difference 2013: ',RedSoxFS2013Points_DiffHome)
print('RedSox Full Season Away Games Median Points Difference 2013: ',RedSoxFS2013Points_DiffAway)
print('RedSox Before Ter Att Median Points Difference 2013: ',RedSoxBTA2013Points_Diff)
print('RedSox Before Ter Att Home Games Median Points Difference 2013: ',RedSoxBTA2013Points_DiffHome)
print('RedSox Before Ter Att Away Games Points Difference 2013: ',RedSoxBTA2013Points_DiffAway)
print('RedSox After Ter Att Median Points Difference 2013: ',RedSoxATA2013Points_Diff)
print('RedSox After Ter Att Home Games Median Points Difference 2013: ',RedSoxATA2013Points_DiffHome)
print('RedSox After Ter Att Away Games Median Points Difference 2013: ',RedSoxATA2013Points_DiffAway)
print('RedSox During Ter Att Median Points Difference 2013: ',RedSoxDTA2013Points_Diff)
print('RedSox During Ter Att Home Games Median Points Difference 2013: ',RedSoxDTA2013Points_DiffHome)
print('RedSox During Ter Att Away Games Median Points Difference 2013: ',RedSoxDTA2013Points_DiffAway)
# Plotting the Win/Loss Ratios for the RedSox 2013 Season Compare Home vs. Away
n_groups = 1
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.05
opacity = 0.8
FSALL = plt.bar(index,RedSoxFS2013Points_Diff,bar_width, 
                 alpha = opacity,
                 color = 'royalblue',
                 label = 'Full Season')
FSHome = plt.bar(index + bar_width,RedSoxFS2013Points_DiffHome,bar_width, 
                 alpha = opacity,
                 color = 'navy',
                 label = 'Full Season Home Games')
FSAway = plt.bar(index + 2*bar_width,RedSoxFS2013Points_DiffAway,bar_width, 
                 alpha = opacity,
                 color = 'cornflowerblue',
                 label = 'Full Season Away Games')
BTAALL = plt.bar(index + 3.5*bar_width,RedSoxBTA2013Points_Diff,bar_width, 
                 alpha = opacity,
                 color = 'red',
                 label = 'During Ter Att')
BTAHome = plt.bar(index + 4.5*bar_width,RedSoxBTA2013Points_DiffHome,bar_width, 
                 alpha = opacity,
                 color = 'firebrick',
                 label = 'Before Ter Att Home Games')
BTAAway = plt.bar(index + 5.5*bar_width,RedSoxBTA2013Points_DiffAway,bar_width,
                 alpha = opacity,
                 color = 'indianred',
                 label = 'Before Ter Att Away Games')
ATAALL = plt.bar(index + 7*bar_width,RedSoxATA2013Points_Diff,bar_width, 
                 alpha = opacity,
                 color = 'cadetblue',
                 label = 'After Ter Att')
ATAHome = plt.bar(index + 8*bar_width,RedSoxATA2013Points_DiffHome,bar_width, 
                 alpha = opacity,
                 color = 'steelblue',
                 label = 'After Ter Att Home Games')
ATAAway = plt.bar(index + 9*bar_width,RedSoxATA2013Points_DiffAway,bar_width, 
                 alpha = opacity,
                 color = 'lightsteelblue',
                 label = 'After Ter Att Away Games')
DTAALL = plt.bar(index + 10.5*bar_width,RedSoxDTA2013Points_Diff,bar_width, 
                 alpha = opacity,
                 color = 'tomato',
                 label = 'During Ter Att')
DTAHome = plt.bar(index + 11.5*bar_width,RedSoxDTA2013Points_DiffHome,bar_width, 
                 alpha = opacity,
                 color = 'maroon',
                 label = 'During Ter Att Home Games')
DTAAway = plt.bar(index + 12.5*bar_width,RedSoxDTA2013Points_DiffAway,bar_width, 
                 alpha = opacity,
                 color = 'lightcoral',
                 label = 'During Ter Att Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Median Points Differences')
plt.title('RedSox 2013 Median Points Differences by Segment of the Season')
plt.xticks([.05,.225,.4,.575],['Full Season','Before Ter Att','After Ter Att','During Ter Att'])
plt.legend(loc = 0,fontsize='x-small')
plt.tight_layout()
plt.show()
# Team Earned Run Average for the RedSox full season, Before Ter Att, After Ter Att, During Ter Att, then Home vs. away FS, BTA, ATA, DTA
RedSoxFS2013teamERA = sum(RedSox2013['EarnedRunsbyBOS'])/len(RedSox2013['EarnedRunsbyBOS'])
RedSoxBTA2013teamERA = sum(RedSox2013BTA['EarnedRunsbyBOS'])/len(RedSox2013BTA['EarnedRunsbyBOS'])
RedSoxATA2013teamERA = sum(RedSox2013ATA['EarnedRunsbyBOS'])/len(RedSox2013ATA['EarnedRunsbyBOS'])
RedSoxDTA2013teamERA = sum(RedSox2013DTA['EarnedRunsbyBOS'])/len(RedSox2013DTA['EarnedRunsbyBOS'])
print('RedSox Full Season Team Earned Run Average 2013: ',RedSoxFS2013teamERA)
print('RedSox Before Ter Att Team Earned Run Average 2013: ',RedSoxBTA2013teamERA)
print('RedSox After Ter Att Team Earned Run Average 2013: ',RedSoxATA2013teamERA)
print('RedSox During Ter Att Team Earned Run Average 2013: ',RedSoxDTA2013teamERA)
RedSoxFS2013teamERAhome = sum(RedSox2013FShome['EarnedRunsbyBOS'])/len(RedSox2013FShome['EarnedRunsbyBOS'])
RedSoxBTA2013teamERAhome = sum(RedSox2013BTAhome['EarnedRunsbyBOS'])/len(RedSox2013BTAhome['EarnedRunsbyBOS'])
RedSoxATA2013teamERAhome = sum(RedSox2013ATAhome['EarnedRunsbyBOS'])/len(RedSox2013ATAhome['EarnedRunsbyBOS'])
RedSoxDTA2013teamERAhome = sum(RedSox2013DTAhome['EarnedRunsbyBOS'])/len(RedSox2013DTAhome['EarnedRunsbyBOS'])
print('RedSox Full Season Home Games Team Earned Run Average 2013: ',RedSoxFS2013teamERAhome)
print('RedSox Before Ter Att Home Games Team Earned Run Average 2013: ',RedSoxBTA2013teamERAhome)
print('RedSox After Ter Att Home Games Team Earned Run Average 2013: ',RedSoxATA2013teamERAhome)
print('RedSox During Ter Att Home Games Team Earned Run Average 2013 : ',RedSoxDTA2013teamERAhome)
RedSoxFS2013teamERAaway = sum(RedSox2013FSaway['EarnedRunsbyBOS'])/len(RedSox2013FSaway['EarnedRunsbyBOS'])
RedSoxBTA2013teamERAaway = sum(RedSox2013BTAaway['EarnedRunsbyBOS'])/len(RedSox2013BTAaway['EarnedRunsbyBOS'])
RedSoxATA2013teamERAaway = sum(RedSox2013ATAaway['EarnedRunsbyBOS'])/len(RedSox2013ATAaway['EarnedRunsbyBOS'])
RedSoxDTA2013teamERAaway = sum(RedSox2013DTAaway['EarnedRunsbyBOS'])/len(RedSox2013DTAaway['EarnedRunsbyBOS'])
print('RedSox Full Season Away Games Team Earned Run Average 2013: ',RedSoxFS2013teamERAaway)
print('RedSox Before Ter Att Away Games Team Earned Run Average 2013: ',RedSoxBTA2013teamERAaway)
print('RedSox After Ter Att Away Games Team Earned Run Average 2013: ',RedSoxATA2013teamERAaway)
print('RedSox During Ter Att Away Games Team Earned Run Average 2013: ',RedSoxDTA2013teamERAaway)
# Plotting team ERA by segment of the season
n_groups = 1
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.05
opacity = 0.8
FSALL = plt.bar(index,RedSoxFS2013teamERA,bar_width, 
                 alpha = opacity,
                 color = 'royalblue',
                 label = 'Full Season')
FSHome = plt.bar(index + bar_width,RedSoxFS2013teamERAhome,bar_width, 
                 alpha = opacity,
                 color = 'navy',
                 label = 'Full Season Home Games')
FSAway = plt.bar(index + 2*bar_width,RedSoxFS2013teamERAaway,bar_width, 
                 alpha = opacity,
                 color = 'cornflowerblue',
                 label = 'Full Season Away Games')
BTAALL = plt.bar(index + 3.5*bar_width,RedSoxBTA2013teamERA,bar_width, 
                 alpha = opacity,
                 color = 'red',
                 label = 'During Ter Att')
BTAHome = plt.bar(index + 4.5*bar_width,RedSoxBTA2013teamERAhome,bar_width, 
                 alpha = opacity,
                 color = 'firebrick',
                 label = 'Before Ter Att Home Games')
BTAAway = plt.bar(index + 5.5*bar_width,RedSoxBTA2013teamERAaway,bar_width,
                 alpha = opacity,
                 color = 'indianred',
                 label = 'Before Ter Att Away Games')
ATAALL = plt.bar(index + 7*bar_width,RedSoxATA2013teamERA,bar_width, 
                 alpha = opacity,
                 color = 'cadetblue',
                 label = 'After Ter Att')
ATAHome = plt.bar(index + 8*bar_width,RedSoxATA2013teamERAhome,bar_width, 
                 alpha = opacity,
                 color = 'steelblue',
                 label = 'After Ter Att Home Games')
ATAAway = plt.bar(index + 9*bar_width,RedSoxATA2013teamERAaway,bar_width, 
                 alpha = opacity,
                 color = 'lightsteelblue',
                 label = 'After Ter Att Away Games')
DTAALL = plt.bar(index + 10.5*bar_width,RedSoxDTA2013teamERA,bar_width, 
                 alpha = opacity,
                 color = 'tomato',
                 label = 'During Ter Att')
DTAHome = plt.bar(index + 11.5*bar_width,RedSoxDTA2013teamERAhome,bar_width, 
                 alpha = opacity,
                 color = 'maroon',
                 label = 'During Ter Att Home Games')
DTAAway = plt.bar(index + 12.5*bar_width,RedSoxDTA2013teamERAaway,bar_width, 
                 alpha = opacity,
                 color = 'lightcoral',
                 label = 'During Ter Att Away Games')
plt.xlabel('Segment of the Season')
plt.ylabel('Median Points Differences')
plt.title('RedSox 2013 Team ERA by Segment of the Season')
plt.xticks([.05,.225,.4,.575],['Full Season','Before Ter Att','After Ter Att','During Ter Att'])
plt.legend(loc = 0,fontsize='xx-small',ncol=3)
plt.tight_layout()
plt.show()
